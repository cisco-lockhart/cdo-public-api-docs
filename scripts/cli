#!/usr/bin/env bash
# This script was generated by bashly 1.2.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_usage() {
  printf "cli - CDO Public API documentation\n\n"

  printf "%s\n" "Usage:"
  printf "  cli COMMAND\n"
  printf "  cli [COMMAND] --help | -h\n"
  printf "  cli --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Download and add public API YAML to the pubhub docs\n" "download              "
  printf "  %s   Perform transformations on FMC OAS and generate cdfmc-service-openapi.yaml\n" "transform-fmc-oas     "
  printf "  %s   Publishes a new version of the CDO SDK to PyPI\n" "publish-python-sdk    "
  printf "  %s   Updating the SDK description with SDK-DESC.md\n" "update-sdk-description"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cli_download_usage() {
  printf "cli download - Download and add public API YAML to the pubhub docs\n\n"
  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cli download [OPTIONS]\n"
  printf "  cli download --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--do-not-commit"
    printf "    Download the latest public API OpenAPI YAML, but do not commit and push it.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cli download\n"
    echo

  fi
}

# :command.usage
cli_transform_fmc_oas_usage() {
  printf "cli transform-fmc-oas - Perform transformations on FMC OAS and generate cdfmc-service-openapi.yaml\n\n"

  printf "%s\n" "Usage:"
  printf "  cli transform-fmc-oas\n"
  printf "  cli transform-fmc-oas --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cli transform-fmc-oas\n"
    echo

  fi
}

# :command.usage
cli_publish_python_sdk_usage() {
  printf "cli publish-python-sdk - Publishes a new version of the CDO SDK to PyPI\n\n"

  printf "%s\n" "Usage:"
  printf "  cli publish-python-sdk\n"
  printf "  cli publish-python-sdk --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cli publish-python-sdk\n"
    echo

  fi
}

# :command.usage
cli_update_sdk_description_usage() {
  printf "cli update-sdk-description - Updating the SDK description with SDK-DESC.md\n\n"

  printf "%s\n" "Usage:"
  printf "  cli update-sdk-description\n"
  printf "  cli update-sdk-description --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cli update-sdk-description\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions
# :command.function
cli_download_command() {
  # src/download_command.sh
  # Function to increment version number
  increment_version() {
      local version=$1
      local parts=( ${version//./ } )
      ((parts[2]++))
      new_version="${parts[0]}.${parts[1]}.${parts[2]}"
      echo "$new_version"
  }

  root_dir=$(dirname $(dirname $(readlink -f "$0")))
  filename=openapi.yaml
  declare -A urls=(
      ["public-api"]="https://edge.staging.cdo.cisco.com/api/platform/public-api/v3/api-docs.yaml"
      ["object-service"]="https://edge.staging.cdo.cisco.com/api/platform/object-service/v3/api-docs.yaml"
      ["msp-api"]="https://edge.staging.cdo.cisco.com/api/platform/msp-api/v3/api-docs.yaml"
  )

  scripts/cli transform-fmc-oas

  filenames=()
  for service in "${!urls[@]}"; do
      url=${urls[${service}]}
      filename="${service}-openapi.yaml"
      echo -n "$(yellow Downloading file from) $(yellow_underlined ${url}) to $(blue_bold ${root_dir}/${filename})... "
      curl -X GET --silent --url  "${url}" -o $root_dir/$filename
      filenames+=("${root_dir}/${filename}")
      echo "✅︎"
  done

  echo "$(yellow Installing redocly from npm)... "
  npm i
  echo "Installed ✅︎"

  echo -n "Updating references to shared schemas..."
  npm i yaml fs
  node scripts/src/lib/modify_schema.js msp-api-openapi.yaml CdoTransaction public-api-openapi.yaml
  node scripts/src/lib/modify_schema.js msp-api-openapi.yaml UserRole public-api-openapi.yaml
  echo "Updated ✅︎"
  echo -n "$(yellow Combining all OpenAPI YAMLs into one)... "
   ./node_modules/.bin/redocly join ${filenames[*]} -o openapi.yaml
  echo "Combined ✅︎"

  echo -n "$(yellow Generating Postman collection from combined OpenAPI YAMLs)... "
  ./node_modules/.bin/openapi2postmanv2 -s openapi.yaml -o postman-collection.json -O folderStrategy=Tags
  echo "Postman collection Generated ✅︎"

  echo -n "$(yellow Generating Python SDK from combined OpenAPI YAMLs)... "
  current_version=$(grep -Eo "VERSION = \"[0-9]+\.[0-9]+\.[0-9]+\"" cdo-sdk/python/setup.py | cut -d'"' -f2)
  new_version=$(increment_version "$current_version")
  npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g python -o ./cdo-sdk/python \
  --additional-properties packageName=cdo_sdk_python,packageVersion="$new_version" \
  --openapi-generator-ignore-list ".github/workflows/python.yml"
  echo "Python SDK Generated ✅︎"

  if [[ -z ${args[--do-not-commit]} ]]; then
      cd ${root_dir}
      git checkout main
      git pull origin main
      git add .
      git commit -am "Update OpenAPI.yaml from staging"
      git push origin main
      cd -
  fi
}

# :command.function
cli_transform_fmc_oas_command() {
  # src/transform_fmc_oas_command.sh
  root_dir=$(dirname $(dirname $(readlink -f "$0")))
  filename=openapi.yaml
  declare -A urls=(
      # Currently dependent on the CDO_cisco-ai-team-cdo tenant cdFMC - need to update
      ["cdFmc-service"]="https://demo-red.app.us.cdo.cisco.com/api/api-explorer/fmc_oas3.json"
  )

  filenames=()
  for service in "${!urls[@]}"; do
      url=${urls[${service}]}
      filename="${service}-openapi.yaml"
      echo -n "$(yellow Downloading file from) $(yellow_underlined ${url}) to $(blue_bold ${root_dir}/${filename})... "
      curl -s "$url" | \
      # Replace cdFMC URLs with the new Public API proxy URL
      jq '.paths |= with_entries(.key |= gsub("api/fmc_config/"; "v1/cdfmc/api/fmc_config/"))' | \
      # Add servers section
      jq '.servers = [
          {"url": "https://edge.us.cdo.cisco.com/api/rest", "description": "US"},
          {"url": "https://edge.eu.cdo.cisco.com/api/rest", "description": "EU"},
          {"url": "https://edge.apj.cdo.cisco.com/api/rest", "description": "APJ"},
          {"url": "https://edge.staging.cdo.cisco.com/api/rest", "description": "Staging"},
          {"url": "https://edge.scale.cdo.cisco.com/api/rest", "description": "Scale"},
          {"url": "https://edge.ci.cdo.cisco.com/api/rest", "description": "CI"}
        ]' | \
      yq e -P - > "${root_dir}/${filename}"
      echo "✅︎"
  done
}

# :command.function
cli_publish_python_sdk_command() {
  # src/publish_python_sdk_command.sh
  pip install setuptools
  scripts/cli update-sdk-description

  secret_arn=arn:aws:secretsmanager:us-west-2:107042026245:secret:jenkins-pypi-credentials-mD4NdK
  echo -n "$(yellow Retrieving the secret value from AWS Secrets Manager)... "
  secret_value=$(aws secretsmanager get-secret-value --secret-id $secret_arn --query SecretString --output text)

  package_name=$(grep -Eo 'NAME = "[^"]+"' cdo-sdk/python/setup.py | cut -d'"' -f2)
  current_version=$(grep -Eo "VERSION = \"[0-9]+\.[0-9]+\.[0-9]+\"" cdo-sdk/python/setup.py | cut -d'"' -f2)

  cd cdo-sdk/python
  pip3 install wheel twine

  echo -n "$(yellow Creating the Wheel and Source)... "
  rm -rf dist/ build/ *.egg-info
  python3 setup.py sdist bdist_wheel

  echo -n "$(yellow Publishing to PyPI)... "
  twine upload --username __token__ --password $secret_value dist/${package_name}-${current_version}.tar.gz dist/${package_name//-/_}-${current_version}-py3-none-any.whl

  unset secret_value
}

# :command.function
cli_update_sdk_description_command() {
  # src/update_sdk_description_command.sh
  SETUP_PY_PATH="cdo-sdk/python/setup.py"
  TEMP_FILE_PATH="cdo-sdk/python/setup.tmp.py"

  # Replace the long_description block in setup.py
  awk '
    /long_description=/{print "    long_description=open('\''../../SDK-DESC.md'\'', '\''r'\'', encoding='\''utf-8'\'').read(),"; inDescBlock=1; next}
    /^    [a-z_]+=/ {inDescBlock=0}
    inDescBlock {next}
    {print}
  ' "$SETUP_PY_PATH" > "$TEMP_FILE_PATH" && mv "$TEMP_FILE_PATH" "$SETUP_PY_PATH"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    download | d)
      action="download"
      shift
      cli_download_parse_requirements "$@"
      shift $#
      ;;

    transform-fmc-oas)
      action="transform-fmc-oas"
      shift
      cli_transform_fmc_oas_parse_requirements "$@"
      shift $#
      ;;

    publish-python-sdk)
      action="publish-python-sdk"
      shift
      cli_publish_python_sdk_parse_requirements "$@"
      shift $#
      ;;

    update-sdk-description)
      action="update-sdk-description"
      shift
      cli_update_sdk_description_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_download_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_download_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="download"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --do-not-commit)

        # :flag.case_no_arg
        args['--do-not-commit']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_transform_fmc_oas_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_transform_fmc_oas_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="transform-fmc-oas"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_publish_python_sdk_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_publish_python_sdk_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="publish-python-sdk"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_update_sdk_description_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_update_sdk_description_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="update-sdk-description"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "download") cli_download_command ;;
    "transform-fmc-oas") cli_transform_fmc_oas_command ;;
    "publish-python-sdk") cli_publish_python_sdk_command ;;
    "update-sdk-description") cli_update_sdk_description_command ;;
  esac
}

initialize
run "$@"
