openapi: 3.0.1
info:
  title: API Docs
  description: Use the interactive documentation to explore the endpoints CDO has to offer
  contact:
    name: CDO TAC
    email: cdo.tac@cisco.com
  version: 0.0.1
servers:
  - url: https://edge.us.cdo.cisco.com/api/rest
    description: US
  - url: https://edge.eu.cdo.cisco.com/api/rest
    description: EU
  - url: https://edge.apj.cdo.cisco.com/api/rest
    description: APJ
  - url: https://edge.staging.cdo.cisco.com/api/rest
    description: Staging
  - url: https://edge.scale.cdo.cisco.com/api/rest
    description: Scale
  - url: https://edge.ci.cdo.cisco.com/api/rest
    description: CI
tags:
  - name: Users
    x-displayName: Users
  - name: Search
    x-displayName: Search
  - name: Tenant Management
    x-displayName: Tenant Management
  - name: Inventory
    x-displayName: Inventory
  - name: Transactions
    x-displayName: Transactions
  - name: Meta
    x-displayName: Meta
  - name: Connectors
    x-displayName: Connectors
  - name: Changelogs
    x-displayName: Changelogs
  - name: CdFMC
    x-displayName: CdFMC
  - name: Object Management
    x-displayName: Object Management
paths:
  /v1/users:
    get:
      tags:
        - Users
      summary: Fetch a list of users associated with the CDO tenant.
      operationId: listUsers
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: name:London-Office-ASA
      responses:
        '200':
          description: List of User objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - Users
      summary: Create a user in the CDO tenant
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrUpdateInput'
        required: true
      responses:
        '201':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users/{apiUserId}/apiToken/revoke:
    post:
      tags:
        - Users
      summary: Revoke API Token of API-only user
      operationId: revokeApiToken
      parameters:
        - name: apiUserId
          in: path
          description: The unique identifier of the API user in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusInfo'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users/{apiUserId}/apiToken/generate:
    post:
      tags:
        - Users
      summary: Generate API Token for API-only user
      operationId: generateApiToken
      parameters:
        - name: apiUserId
          in: path
          description: The unique identifier of the API user in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: API Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenInfo'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/token/revoke:
    post:
      tags:
        - Users
      summary: Revoke the current token
      operationId: revokeToken
      responses:
        '200':
          description: Revoke success
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/search/index:
    post:
      tags:
        - Search
      summary: Initiate Full Indexing
      operationId: initiateFullIndexing
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            indexing operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/msp/tenants:
    post:
      tags:
        - Tenant Management
      summary: Add a tenant to the MSP Portal
      operationId: addMspTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MspAddTenantInput'
        required: true
      responses:
        '201':
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusInfo'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/ios:
    post:
      tags:
        - Inventory
      summary: Onboard a IOS device in the CDO tenant
      operationId: onboardIosDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IosCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            onboarding operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/ftds:
    post:
      tags:
        - Inventory
      summary: Create an FTD device in the CDO tenant
      operationId: createFtdDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FtdCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            creation operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/ftds/register:
    post:
      tags:
        - Inventory
      summary: >-
        Register an FTD device managed by an FMC to the CDO tenant. Call this
        API endpoint after you have created an FTD, and pasted the generated CLI
        output in the FTD
      operationId: finishOnboardingFtdDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FtdRegistrationInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            creation operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/ftds/cdfmcManaged/{deviceUid}/delete:
    post:
      tags:
        - Inventory
      summary: Delete cdFMC managed FTD device in the CDO tenant
      operationId: deleteCdFmcManagedFtdDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the cdFMC managed FTD device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            deletion operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/duoAdminPanels:
    post:
      tags:
        - Inventory
      summary: Onboard a Duo Admin Panel in the CDO tenant
      description: >-
        Onboard a Duo Admin Panel to the CDO tenant. The credentials to onboard
        the Duo Admin Panel to CDO must be generated by creating an Admin API
        application on https://www.duo.com
      operationId: createDuoAdminPanel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuoAdminPanelCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            onboarding operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas:
    post:
      tags:
        - Inventory
      summary: Onboard a ASA device in the CDO tenant
      operationId: onboardAsaDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsaCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            onboarding operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas/{deviceUid}/reconnect:
    post:
      tags:
        - Inventory
      summary: Reconnect an ASA device in the CDO tenant
      operationId: reconnectAsaDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the ASA device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            reconnecting operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas/{deviceUid}/read:
    post:
      tags:
        - Inventory
      summary: Read configuration on ASA device into CDO
      operationId: readFromAsaDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the ASA device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            read operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas/{deviceUid}/deploy:
    post:
      tags:
        - Inventory
      summary: Deploy changes to an ASA device in the CDO tenant
      operationId: deployAsaDeviceChanges
      parameters:
        - name: deviceUid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            ASA deploy operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/settings/tenant:
    get:
      tags:
        - Tenant Management
      summary: Fetch the tenant settings in CDO
      operationId: getTenantSettings
      responses:
        '200':
          description: Tenant Settings Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantSettings'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Tenant Management
      summary: Update the tenant settings in CDO
      operationId: updateTenantSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantSettings'
        required: true
      responses:
        '200':
          description: Tenant Settings Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantSettings'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/templates/{templateDeviceUid}:
    get:
      tags:
        - Inventory
      summary: Fetch a template device by UID in the CDO tenant
      operationId: getTemplateDevice
      parameters:
        - name: templateDeviceUid
          in: path
          description: The unique identifier of the template device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Template Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Inventory
      summary: Delete a template device by UID in the CDO tenant
      operationId: deleteTemplateDevice
      parameters:
        - name: templateDeviceUid
          in: path
          description: The unique identifier of the template device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Inventory
      summary: Modify a template device in the CDO tenant
      operationId: patchTemplateDevice
      parameters:
        - name: templateDeviceUid
          in: path
          description: The unique identifier of the template device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePatchInput'
        required: true
      responses:
        '200':
          description: Template Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/services/{cloudServiceUid}:
    get:
      tags:
        - Inventory
      summary: Fetch a Cloud Service by UID in the CDO tenant
      operationId: getCloudService
      parameters:
        - name: cloudServiceUid
          in: path
          description: The unique identifier of the cloud service in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Cloud Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Inventory
      summary: Delete a Cloud Service by UID in the CDO tenant
      operationId: deleteCloudService
      parameters:
        - name: cloudServiceUid
          in: path
          description: The unique identifier of the cloud service in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Inventory
      summary: Modify a Cloud Service by UID in the CDO tenant
      operationId: patchCloudService
      parameters:
        - name: cloudServiceUid
          in: path
          description: The unique identifier of the cloud service in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePatchInput'
        required: true
      responses:
        '200':
          description: Cloud Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/managers/{deviceManagerUid}:
    get:
      tags:
        - Inventory
      summary: Fetch a Device Manager by UID in the CDO tenant
      operationId: getDeviceManager
      parameters:
        - name: deviceManagerUid
          in: path
          description: The unique identifier of the device manager in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Device Manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Inventory
      summary: Delete a Device Manager by UID in the CDO tenant
      operationId: deleteDeviceManager_1
      parameters:
        - name: deviceManagerUid
          in: path
          description: The unique identifier of the device manager in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Inventory
      summary: Modify a device manager by UID in the CDO tenant
      operationId: patchDeviceManager
      parameters:
        - name: deviceManagerUid
          in: path
          description: The unique identifier of the device manager in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePatchInput'
        required: true
      responses:
        '200':
          description: Device manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/{deviceUid}:
    get:
      tags:
        - Inventory
      summary: Fetch a device by UID in the CDO tenant
      operationId: getDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Inventory
      summary: Delete a device by UID in the CDO tenant
      operationId: deleteDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Inventory
      summary: Modify a device in the CDO tenant
      operationId: patchDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePatchInput'
        required: true
      responses:
        '200':
          description: Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users/{userUid}:
    get:
      tags:
        - Users
      summary: Fetch a user by UID in the CDO tenant.
      operationId: getUser
      parameters:
        - name: userUid
          in: path
          description: The unique identifier of the user in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: Delete a User by UID in the CDO tenant
      operationId: deleteDeviceManager
      parameters:
        - name: userUid
          in: path
          description: The unique identifier of the user in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/transactions/{transactionUid}:
    get:
      tags:
        - Transactions
      summary: Get information of an in-progress CDO transaction
      operationId: getTransaction
      parameters:
        - name: transactionUid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: >-
            CDO Transaction that has completed, either successfully or
            unsuccessfully. Note: failed CDO Transactions do not roll back.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '202':
          description: CDO Transaction that is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/token:
    get:
      tags:
        - Users
      summary: Fetch information on the current token
      operationId: getToken
      responses:
        '200':
          description: Token information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTokenInfo'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/tenants:
    get:
      tags:
        - Tenant Management
      summary: Fetch a list of tenants associated with the CDO user.
      operationId: listTenants
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
      responses:
        '200':
          description: List of Tenant Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/tenants/{tenantUid}:
    get:
      tags:
        - Tenant Management
      summary: Fetch a tenant by UID in CDO
      operationId: getTenant
      parameters:
        - name: tenantUid
          in: path
          description: The unique identifier of the tenant in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tenant Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/search:
    get:
      tags:
        - Search
      summary: >-
        Search for devices, services, managers, objects and policies across the
        CDO tenant
      operationId: search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResult'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/regions:
    get:
      tags:
        - Meta
      summary: Fetch a list of CDO regions.
      operationId: listRegions
      responses:
        '200':
          description: List of CDO regions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoRegionList'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/meta:
    get:
      tags:
        - Meta
      summary: >-
        Get Meta information about CDO, including the IP addresses of CDO
        services
      operationId: getMeta
      responses:
        '200':
          description: Meta information about CDO.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/inventory/templates:
    get:
      tags:
        - Inventory
      summary: Fetch a list of template devices in the CDO tenant
      operationId: listTemplateDevices
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: name:London-Office-ASA
        - name: sort
          in: query
          description: The fields to sort results by.
          required: true
          schema:
            $ref: '#/components/schemas/SortCriteriaParam'
          example: name:DESC
      responses:
        '200':
          description: List of Template Devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/services:
    get:
      tags:
        - Inventory
      summary: Fetch a list of Cloud Services in the CDO tenant
      operationId: listDeviceCloudServices
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: name:London-Office-ASA
        - name: sort
          in: query
          description: The fields to sort results by.
          required: true
          schema:
            $ref: '#/components/schemas/SortCriteriaParam'
          example: name:DESC
      responses:
        '200':
          description: List of Cloud Services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/managers:
    get:
      tags:
        - Inventory
      summary: >-
        Fetch a list of Device Managers (on-prem FMCs and cloud-delivered FMCs)
        in the CDO tenant
      operationId: listDeviceManagers
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: name:London-Office-ASA
        - name: sort
          in: query
          description: The fields to sort results by.
          required: true
          schema:
            $ref: '#/components/schemas/SortCriteriaParam'
          example: name:DESC
      responses:
        '200':
          description: List of Device Manager objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices:
    get:
      tags:
        - Inventory
      summary: Fetch a list of devices in the CDO tenant
      operationId: listDevices
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: name:London-Office-ASA
        - name: sort
          in: query
          description: The fields to sort results by.
          required: true
          schema:
            $ref: '#/components/schemas/SortCriteriaParam'
          example: name:DESC
      responses:
        '200':
          description: List of Device objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/features:
    get:
      tags:
        - Tenant Management
      summary: Fetch the feature flags enabled for this tenant
      operationId: listFeatureFlags
      responses:
        '200':
          description: Set of feature flags that are enabled for the user's tenant.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - feature-1
                - feature-2
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/connectors/sdcs:
    get:
      tags:
        - Connectors
      summary: Fetch a list of SDCs in the CDO tenant
      operationId: listSdcs
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: name:London-Office-ASA
        - name: sort
          in: query
          description: The fields to sort results by.
          required: true
          schema:
            $ref: '#/components/schemas/SortCriteriaParam'
          example: name:DESC
      responses:
        '200':
          description: List of SDC objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdcPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/connectors/sdcs/{sdcUid}:
    get:
      tags:
        - Connectors
      summary: Fetch a SDC by UID in the CDO tenant
      operationId: fetchSdc
      parameters:
        - name: sdcUid
          in: path
          description: The unique identifier of the SDC in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: SDC object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sdc'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/changelogs:
    get:
      tags:
        - Changelogs
      summary: Fetch a list of Change Logs.
      operationId: listChangelogs
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: name:London-Office-ASA
      responses:
        '200':
          description: List of Change Log objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangelogPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /.well-known/jwks.json:
    get:
      tags:
        - Meta
      summary: Fetch The JSON Web Key Set
      description: >-
        Retrieves the JSON Web Key Set (JWKS), which is a set of keys containing
        the public keys used to verify any JSON Web Token (JWT) issued by the
        Authorization Server and signed using the RS256 signing algorithm. Note:
        Verification of the token using a JSON Web Key does not guarantee
        validity due to the possibility of revocation.
      operationId: getJwks
      responses:
        '200':
          description: The JSON Web Key Set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwkSet'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/cdfmc/**:
    get:
      tags:
        - CdFMC
      summary: Proxies request to cdFMC
      operationId: proxyFmcRequest
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    put:
      tags:
        - CdFMC
      summary: Proxies request to cdFMC
      operationId: proxyFmcRequest_3
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - CdFMC
      summary: Proxies request to cdFMC
      operationId: proxyFmcRequest_2
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - CdFMC
      summary: Proxies request to cdFMC
      operationId: proxyFmcRequest_5
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    options:
      tags:
        - CdFMC
      summary: Proxies request to cdFMC
      operationId: proxyFmcRequest_6
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    head:
      tags:
        - CdFMC
      summary: Proxies request to cdFMC
      operationId: proxyFmcRequest_1
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - CdFMC
      summary: Proxies request to cdFMC
      operationId: proxyFmcRequest_4
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v0/objects:
    get:
      tags:
        - Object Management
      summary: Retrieves objects in the CDO tenant
      operationId: listObjects
      parameters:
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: name:London-Office-ASA
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 1
            type: string
            default: '50'
        - name: sortBy
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: string
          example: name:DESC
      responses:
        '200':
          description: A paginated view of the CDO objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
    post:
      tags:
        - Object Management
      summary: Creates an object in the CDO tenant
      operationId: createObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequest'
        required: true
      responses:
        '201':
          description: A descriptive representation of the created CDO object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v0/objects/{uid}/targets:
    post:
      tags:
        - Object Management
      summary: Create targets for an object in the CDO tenant
      operationId: createTargets
      parameters:
        - name: uid
          in: path
          description: >-
            The request UID of the object for which the targets are being added
            to.
          required: true
          schema:
            type: string
            format: uuid
          example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetsRequest'
        required: true
      responses:
        '200':
          description: No content
          content:
            '*/*':
              schema:
                type: object
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          description: Not found
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
    delete:
      tags:
        - Object Management
      summary: Removes targets from an object in the CDO tenant
      operationId: removeTargets
      parameters:
        - name: uid
          in: path
          description: >-
            The request UID of the object for which the targets are being
            removed from.
          required: true
          schema:
            type: string
            format: uuid
          example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        - name: targetUuids
          in: query
          description: The list of UIDs of the targets being removed.
          required: true
          schema:
            type: array
            items:
              type: string
          example:
            - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
            - yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy
      responses:
        '204':
          description: No content
          content:
            '*/*':
              schema:
                type: object
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          description: Not found
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v0/objects/{uid}:
    get:
      tags:
        - Object Management
      summary: Retrieves an object in the CDO tenant
      operationId: getObject
      parameters:
        - name: uid
          in: path
          description: The request UID of the object being retrieved.
          required: true
          schema:
            type: string
            format: uuid
          example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        - name: fields
          in: query
          description: >-
            The scope of the fields to be retrieved. One of ["@basic",
            "@detailed"]. Defaults to "@basic".
          required: false
          schema:
            type: string
          example: '@detailed'
      responses:
        '200':
          description: Fetch an object by UID in the CDO tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
    delete:
      tags:
        - Object Management
      summary: Deletes an object in the CDO tenant
      operationId: deleteObject
      parameters:
        - name: uid
          in: path
          description: The request UID of the object being deleted.
          required: true
          schema:
            type: string
            format: uuid
          example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      responses:
        '204':
          description: No content
          content:
            '*/*':
              schema:
                type: object
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
    patch:
      tags:
        - Object Management
      summary: Updates an object in the CDO tenant
      operationId: updateObject
      parameters:
        - name: uid
          in: path
          description: The request UID of the object being updated.
          required: true
          schema:
            type: string
            format: uuid
          example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
        required: true
      responses:
        '200':
          description: A descriptive representation of the updated CDO object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v0/objects/{uid}/usage:
    get:
      tags:
        - Object Management
      summary: Retrieves usages of an object in the CDO tenant
      operationId: getObjectUsage
      parameters:
        - name: uid
          in: path
          description: The request UID of the object to retrieve usages for.
          required: true
          schema:
            type: string
            format: uuid
          example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      responses:
        '200':
          description: A descriptive representation of the created CDO object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferenceInfo'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
components:
  schemas:
    UserCreateOrUpdateInput:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the user in CDO.
          example: myusername@cisco.com
        role:
          type: string
          description: The user role in CDO.
          example: ROLE_ADMIN
        apiOnlyUser:
          type: boolean
          description: >-
            Whether the user is API-only, an API-only user cannot access CDO in
            the UI.
          example: false
          default: false
    User:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the SDC in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the user in CDO.
          example: myusername@cisco.com
        roles:
          type: array
          description: Roles associated with this user in CDO.
          example: '[ROLE_ADMIN]'
          items:
            $ref: '#/components/schemas/UserRole'
        apiOnlyUser:
          type: boolean
          description: >-
            Whether the user is API-only, an API-only user cannot access CDO in
            the UI.
          example: false
        lastSuccessfulLogin:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) that
            indicate the last time the user successfully login CDO.
          format: date-time
          example: '2023-12-13T05:15:44Z'
    UserRole:
      type: string
      description: >-
        The role of the user this token belongs to. The user can be API-only or
        a human.
      enum:
        - ROLE_ADMIN
        - ROLE_SUPER_ADMIN
        - ROLE_READ_ONLY
        - ROLE_DEPLOY_ONLY
        - ROLE_EDIT_ONLY
        - ROLE_VPN_SESSIONS_MANAGER
    StatusInfo:
      type: object
      properties:
        status:
          type: string
          description: The Status of the request.
          example: OK
    ApiTokenInfo:
      type: object
      properties:
        apiToken:
          type: string
          description: The API Access Token.
          example: FaKE-toKeN
    CdoTransaction:
      type: object
      properties:
        transactionUid:
          type: string
          description: The unique identifier of the asynchronous transaction triggered.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        tenantUid:
          type: string
          description: >-
            The unique identifier of the tenant that asynchronous transaction
            triggered on.
          format: uuid
          example: 5131daad-e813-4b8f-8f42-be1e241e2cdb
        entityUid:
          type: string
          description: >-
            The unique identifier of the entity that the asynchronous
            transaction is triggered on.
          format: uuid
          example: f5f660d4-4b81-4374-877d-fbc4bee894e2
        entityUrl:
          type: string
          description: >-
            A URL to access the entity that the asynchronous transaction is
            triggered on.
          example: >-
            https://edge.us.cdo.cisco.com/platform/public-api/v1/inventory/devices/f5f660d4-4b81-4374-877d-fbc4bee894e2
        transactionPollingUrl:
          type: string
          description: The URL to poll to track the progress of the transaction.
          example: >-
            https://edge.us.cdo.cisco.com/platform/public-api/v1/transactions/7131daad-e813-4b8f-8f42-be1e241e8cdb
        submissionTime:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            transaction was triggered
          format: date-time
          example: '2023-12-13T05:15:44Z'
        lastUpdatedTime:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            transaction status was last updated
          format: date-time
          example: '2023-12-13T08:15:44Z'
        transactionType:
          $ref: '#/components/schemas/CdoTransactionType'
        cdoTransactionStatus:
          $ref: '#/components/schemas/CdoTransactionStatus'
        errorMessage:
          type: string
          description: Transaction error message, if any
        errorDetails:
          type: object
          additionalProperties:
            type: string
            description: Transaction error details, if any
          description: Transaction error details, if any
    CdoTransactionStatus:
      type: string
      description: The status of the CDO transaction
      example: IN_PROGRESS
      enum:
        - PENDING
        - IN_PROGRESS
        - DONE
        - ERROR
    CdoTransactionType:
      type: string
      description: the type of the transaction
      example: ONBOARD_ASA
      enum:
        - ONBOARD_ASA
        - ONBOARD_IOS
        - ONBOARD_DUO_ADMIN_PANEL
        - CREATE_FTD
        - REGISTER_FTD
        - DELETE_CDFMC_MANAGED_FTD
        - RECONNECT_ASA
        - READ_ASA
        - DEPLOY_ASA_DEVICE_CHANGES
        - INDEX_TENANT
    MspAddTenantInput:
      required:
        - apiToken
      type: object
      properties:
        apiToken:
          type: string
          description: The Tenant API Access Token.
          example: FaKE-toKeN
    IosCreateOrUpdateInput:
      required:
        - connectorName
        - name
        - password
        - username
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My IOS
        deviceAddress:
          type: string
          description: >-
            The address of the device to onboard, specified in the format
            `host:port`.
          example: 10.2.2.5:443
        username:
          type: string
          description: The username used to authenticate with the device.
          example: admin
        password:
          type: string
          description: The password used to authenticate with the device.
          example: Cisco@23
        ignoreCertificate:
          type: boolean
          description: >-
            Set this attribute to true if you do not want CDO to validate the
            certificate of this device before onboarding.
          example: false
          default: false
        connectorName:
          type: string
          description: >-
            The name of the Secure Device Connector (SDC) that will be used to
            communicate with the device.
          example: SDC-1
        labels:
          uniqueItems: true
          type: array
          description: >-
            Specify a set of labels to identify the device as part of a group.
            Refer to the CDO documentation for details on how labels are used in
            CDO.
          example:
            - ios
            - ra-vpn-headend
          items:
            type: string
            description: >-
              Specify a set of labels to identify the device as part of a group.
              Refer to the CDO documentation for details on how labels are used
              in CDO.
            example: '["ios","ra-vpn-headend"]'
    EntityType:
      type: string
      description: The type of the device.
      example: CDFMC_MANAGED_FTD
      enum:
        - ASA
        - CDFMC_MANAGED_FTD
        - ONPREM_FMC_MANAGED_FTD
        - ONPREM_FMC_MANAGED_FIREPOWER
        - ONPREM_FMC_NGIPS
        - FDM_MANAGED_FTD
        - IOS
        - SSH_DEVICE
        - GENERIC_DEVICE
        - MERAKI_MX
        - CLOUD_DNG
        - SFCN
        - SFCN_DNG
        - SFCN_STS
        - ONPREM_FMC
        - CDFMC
        - AWS_VPC
        - AZURE_VNET
        - DUO_ADMIN_PANEL
        - UMBRELLA_ORGANIZATION
    FtdCreateOrUpdateInput:
      required:
        - fmcAccessPolicyUid
        - licenses
        - name
      type: object
      properties:
        name:
          type: string
          description: Specify a human-readable name for the device.
          example: My FTD
        licenses:
          uniqueItems: true
          type: array
          description: Specify a set of licenses to apply to the device.
          example: '[BASE]'
          items:
            type: string
            description: Specify a set of licenses to apply to the device.
            example: '[BASE]'
            enum:
              - BASE
              - CARRIER
              - THREAT
              - MALWARE
              - URLFilter
        virtual:
          type: boolean
          description: Indicate whether the FTD is a virtual or a physical device.
        fmcAccessPolicyUid:
          type: string
          description: >-
            Specify the unique identifier of the FMC access policy to apply to
            this device.
          format: uuid
        performanceTier:
          type: string
          description: >-
            Specify the performance tier of the FTDv (required only if isVirtual
            is set to true)
          enum:
            - FTDv5
            - FTDv10
            - FTDv20
            - FTDv30
            - FTDv50
            - FTDv100
            - FTDv
        labels:
          uniqueItems: true
          type: array
          description: >-
            Specify a set of labels to identify the device as part of a group.
            Refer to the CDO documentation for details on how labels are used in
            CDO.
          example:
            - ios
            - ra-vpn-headend
          items:
            type: string
            description: >-
              Specify a set of labels to identify the device as part of a group.
              Refer to the CDO documentation for details on how labels are used
              in CDO.
            example: '["ios","ra-vpn-headend"]'
        deviceType:
          $ref: '#/components/schemas/EntityType'
    FtdRegistrationInput:
      required:
        - ftdUid
      type: object
      properties:
        ftdUid:
          type: string
          description: >-
            The unique identifier of the FTD device in CDO for which
            registration should be triggered.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
    DuoAdminPanelCreateOrUpdateInput:
      required:
        - integrationKey
        - name
        - secretKey
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My Duo Admin Panel
        host:
          type: string
          description: The address of the Duo Admin Panel to onboard.
          example: api-1aa2bbb3.duosecurity.com
        integrationKey:
          type: string
          description: >-
            The integration key of the Admin API application used to
            authenticate with Duo Admin Panel.
          example: EIVJAJFK1Y25B1BWVSO
        secretKey:
          type: string
          description: >-
            The secret key of the Admin API application used to authenticate
            with Duo Admin Panel.
          example: b2Ln2DrBioS2sTI7dqRYh7DPoLsvYDm0wn5UbIKi
        labels:
          uniqueItems: true
          type: array
          description: >-
            Specify a set of labels to identify the device as part of a group.
            Refer to the CDO documentation for details on how labels are used in
            CDO.
          example:
            - duo-admin-panel
            - ra-vpn-headend
          items:
            type: string
            description: >-
              Specify a set of labels to identify the device as part of a group.
              Refer to the CDO documentation for details on how labels are used
              in CDO.
            example: '["duo-admin-panel","ra-vpn-headend"]'
    AsaCreateOrUpdateInput:
      required:
        - connectorType
        - name
        - password
        - username
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My ASA
        deviceAddress:
          type: string
          description: >-
            The address of the device to onboard, specified in the format
            `host:port`.
          example: 10.2.2.5:443
        username:
          type: string
          description: The username used to authenticate with the device.
          example: admin
        password:
          type: string
          description: The password used to authenticate with the device.
          example: Cisco@23
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        ignoreCertificate:
          type: boolean
          description: >-
            Set this attribute to true if you do not want CDO to validate the
            certificate of this device before onboarding.
          example: false
          default: false
        connectorName:
          type: string
          description: >-
            The name of the Secure Device Connector (SDC) that will be used to
            communicate with the device. This value is not required if the
            connector type selected is Cloud Connector (CDG).
          example: SDC-1
        labels:
          uniqueItems: true
          type: array
          description: >-
            Specify a set of labels to identify the device as part of a group.
            Refer to the CDO documentation for details on how labels are used in
            CDO.
          example:
            - asa
            - ra-vpn-headend
          items:
            type: string
            description: >-
              Specify a set of labels to identify the device as part of a group.
              Refer to the CDO documentation for details on how labels are used
              in CDO.
            example: '["asa","ra-vpn-headend"]'
    ConnectorType:
      type: string
      description: >-
        The type of the connector that will be used to communicate with the
        device. CDO can communicate with your device using either a Cloud
        Connector (CDG) or a Secure Device Connector (SDC).
      example: CDG
      enum:
        - SDC
        - CDG
    ConflictDetectionInterval:
      type: string
      description: >-
        Specifies the default interval at which CDO checks for changes made
        out-of-band on the devices on the tenant.
      example: EVERY_6_HOURS
      enum:
        - EVERY_10_MINUTES
        - EVERY_HOUR
        - EVERY_6_HOURS
        - EVERY_24_HOURS
    TenantSettings:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the tenant in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        changeRequestSupport:
          type: boolean
          description: Indicates if the tenant supports change requests.
          example: true
        autoAcceptDeviceChanges:
          type: boolean
          description: >-
            Indicates if changes made out-of-band on devices on the tenant are
            automatically accepted without manual approval.
          example: true
        webAnalytics:
          type: boolean
          description: Indicates if web analytics are enabled for the tenant.
          example: true
        scheduledDeployments:
          type: boolean
          description: Indicates if the tenant has scheduled deployments enabled.
          example: false
        denyCiscoSupportAccessToTenant:
          type: boolean
          description: Indicates if Cisco support is denied access to the tenant.
          example: true
        multicloudDefense:
          type: boolean
          description: Indicates if the tenant has enabled multicloud defense capabilities.
          example: false
        autoDiscoverOnPremFmcs:
          type: boolean
          description: Indicates if the system automatically discovers on-premise FMCs.
          example: true
        conflictDetectionInterval:
          $ref: '#/components/schemas/ConflictDetectionInterval'
    DevicePatchInput:
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My ASA
        labels:
          uniqueItems: true
          type: array
          description: >-
            Specify a set of labels to identify the device as part of a group.
            Refer to the CDO documentation for details on how labels are used in
            CDO.
          example:
            - asa
            - ra-vpn-headend
          items:
            type: string
            description: >-
              Specify a set of labels to identify the device as part of a group.
              Refer to the CDO documentation for details on how labels are used
              in CDO.
            example: '["asa","ra-vpn-headend"]'
    AsaFailoverMate:
      type: object
      properties:
        failoverState:
          type: string
          description: (High Availability ASAs only) Failover state of this device.
          example: Primary - Active
        serial:
          type: string
          description: >-
            (High Availability ASAs only) The serial number of the device. This
            is typically used for licensing, and is not the same as the chassis'
            serial number.
          example: JAD24500xxx
        softwareVersion:
          type: string
          description: >-
            (High Availability ASAs only) The version of the software running on
            the device.
          example: 9.18.8
      description: >-
        (High Availability ASAs only) Information on the failover mate of this
        device.
    AsaFailoverMode:
      type: string
      description: (ASAs only) Failover mode of the device.
      example: ACTIVE_STANDBY
      enum:
        - 'OFF'
        - ACTIVE_STANDBY
        - ACTIVE_ACTIVE
    CdFmcInfo:
      type: object
      properties:
        cliKey:
          type: string
          description: >-
            The CLI key to paste into the FTD CLI to register the FTD with a
            cdFMC. You need to paste this value in only once, when the FTD is
            being onboarded. Refer to the [CDO
            Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)
            for details.
          example: >-
            configure manager add acme.app.us.cdo.cisco.com
            E2jsyiZggyeCfFfCUaMK2kD1a1bxxx 5Do6FwUaXY4EFlyraC2yVnxodLxhuxxx
            acme.app.us.cdo.cisco.com
        regKey:
          type: string
          description: >-
            The Network Address Translation (NAT) ID of this FTD. Refer to the
            [CDO
            Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)
            for details.
          example: E2jsyiZggyeCfFfCUaMK2kD1a1bxxx
        natId:
          type: string
          description: >-
            The Registration Key of this FTD. Refer to the [CDO
            Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)
            for details.
          example: 5Do6FwUaXY4EFlyraC2yVnxodLxhuxxx
      description: >-
        (FTDs managed by cdFMC only) Information on the cloud-delivered FMC
        managing this FTD. This information is not available for FTDs managed
        using FDM or on-prem FMCs.
    ConfigState:
      type: string
      description: >-
        The state of the device configuration in CDO. CDO stages configuration
        changes which have to be manually applied to the device; this field
        indicates whether the configuration on CDO does not match the
        configuration on the device, which indicates whether there are changes
        to be deployed from CDO to the device.
      example: SYNCED
      enum:
        - NO_CONFIG
        - SYNCED
        - NOT_SYNCED
        - UNKNOWN
    ConflictDetectionState:
      type: string
      description: >-
        Indicates whether there have been changes made to the device's
        configuration outside of CDO.
      example: NO_CONFLICTS
      enum:
        - CONFLICT_DETECTED
        - NO_CONFLICTS
    ConnectivityState:
      type: string
      description: >-
        The connectivity state of the device to CDO. A connectivity state that
        is not ONLINE can indicate either a problem with the device, or the
        communication pathways between the device and CDO.
      example: ONLINE
      enum:
        - ONLINE
        - UNREACHABLE
        - BAD_CREDENTIALS
        - UNKNOWN
        - PENDING_SETUP
    Device:
      required:
        - deviceType
        - name
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the device in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the device in CDO. Device names are unique in CDO.
          example: my-example-device
        deviceType:
          $ref: '#/components/schemas/EntityType'
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        connectorUid:
          type: string
          description: >-
            The unique identifier of the Secure Device Connector (SDC) that will
            be used to communicate with the device. This value is not required
            if the connector type selected is Cloud Connector (CDG)The name of
            the Secure Device Connector (SDC) that will be used to communicate
            with the device. This value is not required if the connector type
            selected is Cloud Connector (CDG).
          format: uuid
          example: 3af473a8-d70f-4090-bcdb-853981696478
        address:
          type: string
          description: >-
            The address of the device, in `host:port` format. CDO connects to
            the device at this address.
          example: my-example-device.example.com:443
        deviceRole:
          $ref: '#/components/schemas/DeviceRole'
        serial:
          type: string
          description: >-
            The serial number of the device. This is typically used for
            licensing, and is not the same as the chassis' serial number.
          example: JAD24500xxx
        chassisSerial:
          type: string
          description: >-
            The serial number on the chassis of the device (ASA-only). This is
            typically used to type up to Cisco SmartNet, and is not the same as
            the serial number.
          example: JMX2450Xxxx
        softwareVersion:
          type: string
          description: The version of the software running on the device.
          example: 7.4.1
        connectivityState:
          $ref: '#/components/schemas/ConnectivityState'
        configState:
          $ref: '#/components/schemas/ConfigState'
        conflictDetectionState:
          $ref: '#/components/schemas/ConflictDetectionState'
        notes:
          type: string
          description: Free-form notes on the device.
          example: This is an example note on the device.
        asdmVersion:
          type: string
          description: >-
            (ASAs only) Version of the ASDM device manager running on the
            device.
          example: 7.6(2)
        asaFailoverMode:
          $ref: '#/components/schemas/AsaFailoverMode'
        asaFailoverState:
          type: string
          description: (High Availability ASAs only) Failover state of this device.
          example: Primary - Active
        asaFailoverMate:
          $ref: '#/components/schemas/AsaFailoverMate'
        asaLicenseEntitlements:
          type: object
          additionalProperties:
            type: string
            description: (ASAs only) Map of ASA License entitlements.
          description: (ASAs only) Map of ASA License entitlements.
        ftdLicenses:
          type: array
          description: (FTDs only) List of FTD License entitlements.
          items:
            type: string
            description: (FTDs only) List of FTD License entitlements.
        snortVersion:
          type: string
          description: (FTDs only) List of FTD License entitlements.
        ftdPerformanceTier:
          type: string
          description: >-
            (FTDvs only) The FTDv supports performance-tiered licensing that
            provides different throughput levels and VPN connection limits based
            on deployment requirements. This field specifies the performance
            tier of the FTD.
        cdFmcInfo:
          $ref: '#/components/schemas/CdFmcInfo'
        onPremFmcInfo:
          $ref: '#/components/schemas/OnPremFmcInfo'
        merakiDeploymentMode:
          $ref: '#/components/schemas/MerakiDeploymentMode'
        merakiNetwork:
          $ref: '#/components/schemas/Network'
        state:
          type: string
          description: The device state.
        stateMachineDetails:
          $ref: '#/components/schemas/StateMachineDetails'
        labels:
          uniqueItems: true
          type: array
          description: The tags associated with the device
          items:
            type: string
            description: The tags associated with the device
    DeviceRole:
      type: string
      description: The role this device performs on the network.
      example: RA_VPN_HEADEND
      enum:
        - RA_VPN_HEADEND
        - MFA_PROVIDER
        - ZTNA_PROVIDER
    MerakiDeploymentMode:
      type: string
      description: (Meraki devices only) The deployment mode of the Meraki device.
      example: ROUTED
      enum:
        - ROUTED
        - PASSTHROUGH
    Network:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the Meraki Dashboard Network.
          example: L_583779101697901532
        name:
          type: string
          description: The name of the Meraki Dashboard Network.
          example: meraki-network
        timezone:
          type: string
          description: The timezone of the Meraki Dashboard Network.
          example: UTC +0
      description: >-
        (Meraki devices only) The [Dashboard
        Network](https://documentation.meraki.com/General_Administration/Organizations_and_Networks/Creating_and_Deleting_Dashboard_Networks)
        the device is deployed in.
    OnPremFmcInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of the device in CDO. Device names are unique in CDO.
          example: my-example-fmc
        address:
          type: string
          description: >-
            The address of the on-prem FMC managing this device, in `host:port`
            format.
          example: my-example-fmc.example.com:443
      description: >-
        (Devices managed by on-prem FMC only) Information on the on-prem FMC
        managing this device.
    StateMachineDetails:
      type: object
      properties:
        identifier:
          type: string
        lastError:
          $ref: '#/components/schemas/StateMachineError'
      description: The device state machine details.
    StateMachineError:
      type: object
      properties:
        errorMessage:
          type: string
        errorCode:
          type: string
        actionIdentifier:
          type: string
    UserPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/User'
    CdoTokenInfo:
      type: object
      properties:
        uid:
          type: string
          description: >-
            The unique identifier of the user this token belongs to. The user
            can be API-only or a human.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: >-
            The name of the user this token belongs to. The user can be API-only
            or a human.
          example: my-example-device
        roles:
          uniqueItems: true
          type: array
          description: >-
            The role of the user this token belongs to. The user can be API-only
            or a human.
          items:
            $ref: '#/components/schemas/UserRole'
        expiresAt:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) the token
            expires. If this field is missing, the token will never expire.
          format: date-time
        tenantUid:
          type: string
          description: >-
            The unique identifier of the tenant this token is associated with.
            While a user can be associated with multiple tenants, a token is
            associated with a single tenant.
          format: uuid
    Tenant:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the tenant in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the tenant in CDO.
          example: mytenantname@cisco.com
        securityCloudControlEnterpriseId:
          type: string
          description: >-
            The unique identifier of the Security Cloud Control Enterprise this
            tenant is associated with.
          format: uuid
          example: dda3ce52-312c-477a-aa86-1fd1866ddab7
        displayName:
          type: string
          description: >-
            A human-readable display name for the tenant. This is the tenant
            name displayed in the CDO Web UI.
          example: mytenantname
        payType:
          $ref: '#/components/schemas/TenantPayType'
    TenantPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Tenant'
    TenantPayType:
      type: string
      description: An enum that describes the payment status of the tenant in CDO.
      example: TRIAL
      enum:
        - PAYING
        - NOT_PAYING
        - TRIAL
        - INTERNAL
        - PARTNER
        - DEMO
    CdFmcObject:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the entity in Cloud-delivered FMC.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the entity in Cloud-delivered FMC.
          example: my-example-entity
        link:
          type: string
          description: A URL to access the entity in Cloud-delivered FMC.
          example: >-
            https://edge.us.cdo.cisco.com/api/platform/public-api/v1/cdfmc/api/fmc_config/v1/domain/e276abec-e0f2-11e3-8169-6d9ed49b625f/devices/devicerecords/7131daad-e813-4b8f-8f42-be1e241e8cdb
      description: Policies that match the search term.
    CdFmcResult:
      type: object
      properties:
        devices:
          type: array
          description: Devices that match the search term.
          items:
            $ref: '#/components/schemas/CdFmcObject'
        objects:
          type: array
          description: Objects that match the search term.
          items:
            $ref: '#/components/schemas/CdFmcObject'
        policies:
          type: array
          description: Policies that match the search term.
          items:
            $ref: '#/components/schemas/CdFmcObject'
      description: >-
        Results from the Cloud-delivered FMC devices, objects or policies that
        match the search term.
    Entity:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the entity in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the entity in CDO. Device names are unique in CDO.
          example: my-example-entity
        type:
          $ref: '#/components/schemas/EntityType'
        address:
          type: string
          description: The address of the entity.
          example: my-example-device.example.com:443
        matchingConfigurations:
          type: array
          description: >-
            (ASAs only) Parts of the ASA device configuration that match the
            search term.
          items:
            type: string
            description: >-
              (ASAs only) Parts of the ASA device configuration that match the
              search term.
      description: Cloud Services that match the search term.
    GlobalSearchResult:
      type: object
      properties:
        inventory:
          $ref: '#/components/schemas/Inventory'
        objects:
          type: array
          description: Results from the CDO objects that match the search term.
          items:
            type: object
        policies:
          type: array
          description: Results from the CDO policies that match the search term.
          items:
            $ref: '#/components/schemas/Policy'
        cdFmcResult:
          $ref: '#/components/schemas/CdFmcResult'
    Inventory:
      type: object
      properties:
        devices:
          type: array
          description: Devices that match the search term.
          items:
            $ref: '#/components/schemas/Entity'
        managers:
          type: array
          description: Device Managers that match the search term.
          items:
            $ref: '#/components/schemas/Entity'
        services:
          type: array
          description: Cloud Services that match the search term.
          items:
            $ref: '#/components/schemas/Entity'
      description: Results from the CDO inventory that match the search term.
    Policy:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the policy in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the policy in CDO.
          example: my-example-policy
      description: Results from the CDO policies that match the search term.
    CdoRegion:
      type: object
      properties:
        domain:
          type: string
          description: The domain for the region.
        apiDomain:
          type: string
          description: The domain for API services in the region.
        description:
          type: string
          description: Human readable description of the region.
      description: The list of items.
    CdoRegionList:
      type: object
      properties:
        items:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/CdoRegion'
    Meta:
      type: object
      properties:
        cloudConnectorIps:
          type: array
          description: >-
            The IP addresses from which to allow inbound access to your network
            if you wish to connect to your devices through CDO's Cloud
            Connector.
          items:
            type: string
            description: >-
              The IP addresses from which to allow inbound access to your
              network if you wish to connect to your devices through CDO's Cloud
              Connector.
    SortCriteriaParam:
      type: object
      properties:
        sort:
          type: array
          writeOnly: true
          items:
            type: string
        sortFields:
          type: array
          items:
            type: string
    DevicePage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Device'
    Sdc:
      required:
        - name
      type: object
      properties:
        sdcPublicKey:
          $ref: '#/components/schemas/SdcPublicKey'
        uid:
          type: string
          description: The unique identifier of the SDC in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the SDC in CDO. SDC names are unique in CDO.
          example: my-example-sdc
        softwareVersion:
          type: string
          description: The software version running on the SDC.
          example: '202311071057'
        ipAddress:
          type: string
          description: The IP address of the SDC.
          example: '202311071057'
        sdcStatus:
          $ref: '#/components/schemas/SdcStatus'
        lastHeartbeat:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) that a
            heartbeat was last received from the SDC. This serves as an
            indicator of the health of the SDC.
          format: date-time
          example: '2023-12-13T05:15:44Z'
    SdcPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Sdc'
    SdcPublicKey:
      type: object
      properties:
        base64EncodedKey:
          type: string
          description: >-
            Base64 RSA public key to use to encrypt device credentials sent to
            the SDC.
          example: >-
            c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEZGpxeDNNMjh3ZHE2Rk11R2NFZHJqaGl3SFp5NDE0WXZFUmRDcVdnRXgrSXloNjVteHlkaVh1OVpoMXUyVTRtNDlnL0VUL2JxTklFNGgraUViQURjcjlScVFGRGZ4RC9pK1ZPSkhiQzQ0UERhZHFJd21vUGNoazYvQ0RoZVlJSmZTM0xTNmlkaC9SRGVFVHpnZ3lTaUI2Mm5yMnRmTkJ3V0ZScjV1Sko5dkNvdUxKRVBZbDBVMkpZNnBjd0paNk1lRDg5dU4rTjlHWFN2Vlh4bEZKNXg0VThReGFCMzJuNHZoekNiUzlYSVg1bGJJQnVIUEZ1bmMrNThPaUFzS0dwTTZ1NzhVR2V2TndOVzU0eVZmU2c4Q01XQ09vM1hiNTIrMnU2VHZlcE1BT2ZFU290YUd5NHV1RTBnUHYwSnowano3ZnFGTCt4d1AzNnNVY2pPRlIzQ1VhbEVpUDEyT2tTeEhreVNMUXJ3a2lFTVUvQ3VPUjdOWkdjUFd0dkVBaUZOTEN0VHhzY25Ma0xNNENkUEt3WnZQV3l3cHAyVGdValU4MEFaWkJZaGZBWTd3SFFQdDhrTkROMURhMWpWaHlwMWlycE5VbTEvaDNrS2srOFdFOVV2RjNDeVgyL1NqWUpPR2lMUWdVaXFUL3E5UkNMZUdVWStzaUFwS3ZyNS91UkU9IHNpd2FycmllQFNJV0FSUklFLU0tS1JBRgo=
        keyId:
          type: string
          description: >-
            The identifier of the RSA public key. This identifier is used by the
            SDC to know which private key to use to decrypt a string.
          example: example-key-id
      description: >-
        Information on the public key used to encrypt credentials sent to the
        SDC.
    SdcStatus:
      type: string
      description: The status of the SDC.
      example: ACTIVE
      enum:
        - NEW
        - ONBOARDING
        - ACTIVE
        - INACTIVE
        - DISABLED
        - UNKNOWN
    Changelog:
      required:
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the Change Log.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        status:
          type: string
          description: The status of the Change Log.
          example: ACTIVE
          enum:
            - ACTIVE
            - COMPLETED
            - UNKNOWN
        entityUid:
          type: string
          description: The uid of the device/manager/service the Change Log refers to.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        events:
          type: array
          description: The events recorded in this Change Log.
          items:
            $ref: '#/components/schemas/Event'
      description: The list of items retrieved.
    ChangelogPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Changelog'
    Event:
      type: object
      properties:
        description:
          type: string
          description: A human-readable description of the Change Log event.
        diff:
          type: string
          description: >-
            A textual Diff representation of the changes made to the
            configuration.
        username:
          type: string
          description: The username of the user that triggered the Change Log event.
          example: myuser@cisco.com
        date:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            Change Log Event occurred.
          format: date-time
        action:
          type: string
          description: The action performed.
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - ERROR
            - UNKNOWN
        changeRequestUid:
          type: string
          description: >-
            The unique Identifier of the Change Request associated with the
            Change Log event.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        changeRequestName:
          type: string
          description: The name of the Change Request associated with the Change Log event.
          example: LH-12345
      description: The events recorded in this Change Log.
    JsonWebKey:
      type: object
      properties:
        kty:
          type: string
          description: The family of cryptographic algorithms used with the key.
        e:
          type: string
          description: The exponent for the RSA public key.
        use:
          type: string
          description: How the key was meant to be used.
        kid:
          type: string
          description: The unique identifier for the key.
        alg:
          type: string
          description: The specific cryptographic algorithm used with the key.
        'n':
          type: string
          description: The modulus for the RSA public key.
      description: The JSON Web Key Set.
    JwkSet:
      type: object
      properties:
        keys:
          type: array
          description: The JSON Web Key Set.
          items:
            $ref: '#/components/schemas/JsonWebKey'
    AuthenticationError:
      type: object
      properties:
        error:
          type: string
          description: A human-readable error description in English.
          example: invalid_token
        errorDescription:
          type: string
          description: A human-readable error description in English.
          example: Your token is invalid
    CommonApiError:
      type: object
      properties:
        errorCode:
          type: string
          description: A unique error code that describes the error.
          example: INVALID_INPUT
          enum:
            - INVALID_INPUT
            - UNAUTHORIZED
            - FORBIDDEN
            - NOT_FOUND
            - METHOD_NOT_ALLOWED
            - CONFLICT
            - TOO_MANY_REQUESTS
            - CANNOT_DELETE_CDFMC_MANAGED_FTD
            - CANNOT_DELETE_ONPREM_FMC_MANAGED_FTD
            - CANNOT_DELETE_ONPREM_FMC_MANAGED_FIREPOWER
            - CANNOT_DELETE_CDFMC
            - SERVER_ERROR
            - PROXY_ERROR
        errorMsg:
          type: string
          description: A human-readable error description in English.
          example: sample error
        details:
          type: object
          additionalProperties:
            type: object
            description: Additional details, if any, on the error
          description: Additional details, if any, on the error
    CreateRequest:
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
          description: The name of the object
          example: my-object
        value:
          $ref: '#/components/schemas/SharedObjectValue'
        description:
          type: string
          description: The human-readable description of the object
          example: My object description
        targetIds:
          uniqueItems: true
          type: array
          description: >-
            Set of IDs for targets that contain the object. A target can be, for
            example, a device, service, or a shared policy (Ruleset).
          example:
            - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
          items:
            type: string
            description: >-
              Set of IDs for targets that contain the object. A target can be,
              for example, a device, service, or a shared policy (Ruleset).
            example: '["xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"]'
        tags:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: The tags for the object
            example:
              location:
                - London
                - Head-office
            items:
              type: string
              description: The tags for the object
              example: '{"location":["London","Head-office"]}'
          description: The tags for the object
          example:
            location:
              - London
              - Head-office
        labels:
          uniqueItems: true
          type: array
          description: The labels for the object
          example:
            - migration
          items:
            type: string
            description: The labels for the object
            example: '["migration"]'
    GroupContent:
      type: object
      properties:
        literals:
          type: array
          description: List of content literals
          items:
            $ref: '#/components/schemas/SingleContent'
        referencedObjectUids:
          uniqueItems: true
          type: array
          description: Set of UIDs of the group's referenced objects
          example:
            - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
          items:
            type: string
            description: Set of UIDs of the group's referenced objects
            format: uuid
      description: The contents of an object group
    Icmp4Value:
      type: object
      properties:
        icmp4Type:
          type: string
          example: DESTINATION_UNREACHABLE
          enum:
            - ANY
            - ECHO_REPLY
            - DESTINATION_UNREACHABLE
            - SOURCE_QUENCH
            - REDIRECT_MESSAGE
            - ALTERNATE_HOST_ADDRESS
            - ECHO_REQUEST
            - ROUTER_ADVERTISEMENT
            - ROUTER_SOLICITATION
            - TIME_EXCEEDED
            - PARAMETER_PROBLEM
            - TIMESTAMP
            - TIMESTAMP_REPLY
            - INFO_REQUEST
            - INFO_REPLY
            - ADDR_MASK_REQUEST
            - ADDR_MASK_REPLY
            - TRACEROUTE
            - DATAGRAM_CONVERSION_ERROR
            - MOBILE_HOST_REDIRECT
            - WHERE_ARE_YOU
            - HERE_I_AM
            - MOBILE_REG_REQUEST
            - MOBILE_REG_REPLY
            - DOMAIN_NAME_REQUEST
            - DOMAIN_NAME_REPLY
            - SKIP_ALGORITHM_DISCOVERY_PROTOCOL
            - PHOTURIS
            - EXPERIMENTAL_MOB_PROTOCOLS
        icmp4Code:
          type: string
          example: NET_UNREACHABLE
          enum:
            - NET_UNREACHABLE
            - HOST_UNREACHABLE
            - PROTOCOL_UNREACHABLE
            - PORT_UNREACHABLE
            - FRAGMENTATION_NEEDED
            - SOURCE_ROUTE_FAILED
            - DEST_NETWORK_UNKNOWN
            - DEST_HOST_UNKNOWN
            - SRC_HOST_ISOLATED
            - COMMUNICATION_DEST_NET_PROHIBITED
            - COMMUNICATION_DEST_HOST_PROHIBITED
            - DEST_NET_UNREACHABLE_FOR_TOS
            - DEST_HOST_UNREACHABLE_FOR_TOS
            - COMM_ADMINISTRATIVELY_PROHIBITED
            - HOST_PRECEDENCE_VIOLATION
            - PRECEDENCE_CUTOFF
            - REDIRECT_DATAGRAM_NETWORK
            - REDIRECT_DATAGRAM_HOST
            - REDIRECT_DATAGRAM_SERVICE_NETWORK
            - REDIRECT_DATAGRAM_SERVICE_HOST
            - ALTERNATE_HOST_ADDR
            - DO_NOT_ROUTE_COMMON_TRAFFIC
            - NORMAL_ROUTER_ADV
            - TTL_EXPIRED_TRANSIT
            - FRAG_ASSEMBLY
            - PTR_ERROR
            - MISSING_REQD_OPTION
            - BAD_LENGTH
            - BAD_SPI
            - AUTH_FAILED
            - DECOMPRESSION_FAILED
            - DECRYPTION_FAILED
            - NEED_AUTHENTICATION
            - NEED_AUTHORIZATION
    Icmp6Value:
      type: object
      properties:
        icmp6Type:
          type: string
          example: DESTINATION_UNREACHABLE
          enum:
            - ANY
            - DESTINATION_UNREACHABLE
            - PACKET_TOO_BIG
            - TIME_EXCEEDED
            - PARAMETER_PROBLEM
            - ECHO_REQUEST
            - ECHO_REPLY
            - MULTICAST_LISTENER_QUERY
            - MULTICAST_LISTENER_REPORT
            - MULTICAST_LISTENER_DONE
            - ROUTER_SOLICITATION
            - ROUTER_ADVERTISEMENT
            - NEIGHBOUR_SOLICITATION
            - NEIGHBOUR_ADVERTISEMENT
            - REDIRECT_MESSAGE
            - ROUTER_RENUMBERING
            - ICMP_NODE_INFO_QUERY
            - ICMP_NODE_INFO_RESPONSE
            - INVERSE_NEIGHBOR_DISCOVERY_SOLICITATION
            - INVERSE_NEIGHBOR_DISCOVERY_ADVERTISEMENT
            - VER2_MULTICAST_LISTENER_REPORT
            - HOME_AGENT_ADDR_DISCOVERY_REQUEST
            - HOME_AGENT_ADDR_DISCOVERY_REPLY
            - MOBILE_PREFIX_SOLICITATION
            - MOBILE_PREFIX_ADVERTISEMENT
            - CERT_PATH_SOLICITATION
            - CERT_PATH_ADVERTISEMENT
            - ICMP_EXP_MOBILITY_PROTOCOLS
            - MULTICAST_ROUTER_ADVERTISEMENT
            - MULTICAST_ROUTER_SOLICITATION
            - MULTICAST_ROUTER_TERMINATION
            - FMIPV6_MESSAGE
            - RPL_CONTROL_MESSAGE
            - PRIVATE_EXPERIMENTATION
            - PRIVATE_EXPERIMENTATION_EXTENDED
        icmp6Code:
          type: string
          example: ADDRESS_UNREACHABLE
          enum:
            - NO_ROUTE_DEST
            - COMMUNICATION_PROHIBITED
            - BEYOND_SCOPE_SRC_ADDR
            - ADDRESS_UNREACHABLE
            - PORT_UNREACHABLE
            - SOURCE_ADDRESS_FAILED
            - REJECT_ROUTE
            - ERROR_SRC_ROUTING_HEADER
            - HOP_LIMIT_EXCEEDED
            - FRAGMENT_REASSEMBLY_TIME_EXCEEDED
            - ERRONEOUS_HEADER_ENCOUNTERED
            - UNRECOGNIZED_NEXT_HEADER_TYPE_ENCOUNTERED
            - UNRECOGNIZED_IPV6_OPTION_ENCOUNTERED
            - IPV6_FIRST_FRAG_HAS_INCOMPLETE_HEADER_CHAIN
            - SR_UPPER_LAYER_HEADER_ERROR
            - ROUTER_RENUMBERING_COMMAND
            - ROUTER_RENUMBERING_RESULT
            - DATA_CONTAINS_IPV6
            - DATA_CONTAINS_NAME
            - DATA_CONTAINS_IPV4
            - SUCCESSFUL_REPLY
            - RESPONDER_REFUSES_ANSWER
            - QTYPE_UNKNOWN
    NetworkObjectContent:
      required:
        - literal
      type: object
      properties:
        literal:
          type: string
          description: The literal content of the network object
          example: a:b:c::1
      description: The content of a network object
    ObjectContent:
      type: object
      description: >-
        The content value of the override. This overrides the object's default
        content.
      example:
        literal: a:b:c::1
      oneOf:
        - $ref: '#/components/schemas/ServiceObjectContent'
        - $ref: '#/components/schemas/UrlObjectContent'
        - $ref: '#/components/schemas/GroupContent'
        - $ref: '#/components/schemas/NetworkObjectContent'
    Override:
      required:
        - content
      type: object
      properties:
        targetId:
          type: string
          description: >-
            The ID of the target. A target can be, for example, a device,
            service, or a shared policy (Ruleset).
          example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        content:
          $ref: '#/components/schemas/ObjectContent'
      description: >-
        The list of target overrides for the object. Each override the default
        content for its target.
      example:
        targetId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        content: a:b:c::2
    PortsValue:
      type: object
      properties:
        op:
          type: string
          description: The operator applied to the list of ports
          example: RANGE
          enum:
            - EQ
            - RANGE
            - GT
            - LT
            - NEQ
            - SOURCE_DESTINATION
        ports:
          type: array
          description: The list of ports
          example:
            - '80'
            - '81'
          items:
            type: string
            description: The list of ports
            example: '["80","81"]'
    ServiceObjectContent:
      type: object
      properties:
        protocol:
          type: string
          description: The service object protocol
          example: TCP
          enum:
            - TCP
            - UDP
            - ICMP4
            - ICMP6
            - TCP_UDP
            - IGMP
            - GGP
            - ST2
            - CBT
            - EGP
            - IGP
            - BBNRCCMON
            - NVP2
            - PUP
            - ARGUS
            - EMCON
            - XNET
            - CHAOS
            - MUX
            - DCNMEAS
            - HMP
            - PRM
            - XNSIDP
            - TRUNK1
            - TRUNK2
            - LEAF1
            - LEAF2
            - RDP
            - IRTP
            - ISOTP4
            - NETBLT
            - MFENSP
            - MERITINP
            - SEP
            - THREEPC
            - IDPR
            - XTP
            - DDP
            - IDPRCMTP
            - TPPLUSPLUS
            - IL
            - SDRP
            - IDRP
            - RSVP
            - GRE
            - MHRP
            - BNA
            - ESP
            - AH
            - INLSP
            - SWIPE
            - NARP
            - MOBILE
            - TLSP
            - SKIP
            - IPv6NONXT
            - CFTP
            - SATEXPAK
            - KRYPTOLAN
            - RVD
            - IPPC
            - SATMON
            - VISA
            - IPCV
            - CPNX
            - CPHB
            - WSN
            - PVP
            - BRSATMON
            - SUNND
            - WBMON
            - WBEXPAK
            - ISOIP
            - VMTP
            - SECUREVMTP
            - VINES
            - TTP
            - NSFNETIGP
            - DGP
            - TCF
            - EIGRP
            - OSPFIGP
            - SPRITERPC
            - LARP
            - MTP
            - AX25
            - IPIP
            - MICP
            - SCCSP
            - ETHERIP
            - ENCAP
            - GMTP
            - IFMP
            - PNNI
            - PIM
            - ARIS
            - SCPS
            - QNX
            - AN
            - IPCOMP
            - SNP
            - COMPAQPEER
            - IPXINIP
            - VRRP
            - PGM
            - L2TP
            - DDX
            - IATP
            - ST
            - SRP
            - UTI
            - SMP
            - SM
            - PTP
            - ISIS
            - FIRE
            - CRTP
            - CRUDP
            - SSCOPMCE
            - IPLT
            - SPS
            - PIPE
            - SCTP
            - FC
            - DIVERT
        serviceValue:
          $ref: '#/components/schemas/ServiceObjectValueContent'
    ServiceObjectValueContent:
      type: object
      description: The value of the service object
      example:
        op: EQ
        ports:
          - '80'
      oneOf:
        - $ref: '#/components/schemas/Icmp4Value'
        - $ref: '#/components/schemas/Icmp6Value'
        - $ref: '#/components/schemas/PortsValue'
    SharedObjectValue:
      required:
        - defaultContent
        - objectType
      type: object
      properties:
        objectType:
          type: string
          description: The type of object
          example: NETWORK_OBJECT
          enum:
            - NETWORK_OBJECT
            - URL_OBJECT
            - SERVICE_OBJECT
            - NETWORK_GROUP
            - URL_GROUP
            - SERVICE_GROUP
        defaultContent:
          $ref: '#/components/schemas/ObjectContent'
        overrides:
          type: array
          description: >-
            The list of target overrides for the object. Each override the
            default content for its target.
          items:
            $ref: '#/components/schemas/Override'
      description: The value of the object
    SingleContent:
      type: object
      description: List of content literals
      oneOf:
        - $ref: '#/components/schemas/ServiceObjectContent'
        - $ref: '#/components/schemas/UrlObjectContent'
        - $ref: '#/components/schemas/NetworkObjectContent'
    UrlObjectContent:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          description: The URL literal
          example: https://www.cisco.com/
    ObjectResponse:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the object
          format: uuid
        name:
          type: string
          description: The name of the object
          example: my-object
        value:
          $ref: '#/components/schemas/SharedObjectValue'
        description:
          type: string
          description: The human-readable description of the object
          example: My object description
        targets:
          type: array
          description: >-
            Set of targets that contain the object. A target can be, for
            example, a device, service, or a shared policy (Ruleset).
          items:
            $ref: '#/components/schemas/Target'
        elements:
          type: array
          description: A flattened list of the content value of the object
          example: '[a:b:c::1]'
          items:
            type: string
            description: A flattened list of the content value of the object
            example: '[a:b:c::1]'
        referencesInfoFromDefaultAndOverrides:
          type: array
          description: >-
            List of objects referenced in the default content or in any of the
            overrides.
          items:
            $ref: '#/components/schemas/ReferenceInfo'
        tags:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: The tags for the object
            example:
              location:
                - London
                - Head-office
            items:
              type: string
              description: The tags for the object
              example: '{"location":["London","Head-office"]}'
          description: The tags for the object
          example:
            location:
              - London
              - Head-office
        labels:
          uniqueItems: true
          type: array
          description: The labels for the object
          example:
            - migration
          items:
            type: string
            description: The labels for the object
            example: '["migration"]'
    ReferenceInfo:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the referenced object
          format: uuid
        name:
          type: string
          description: The name of the referenced object
          example: another-object
        objectType:
          type: string
          description: The object type
          example: NETWORK_OBJECT
          enum:
            - NETWORK_OBJECT
            - URL_OBJECT
            - SERVICE_OBJECT
            - NETWORK_GROUP
            - URL_GROUP
            - SERVICE_GROUP
    Target:
      type: object
      properties:
        id:
          type: string
          description: >-
            The ID of the target with which the object is associated. A target
            can be, for example, a device, service, or a shared policy
            (Ruleset).
          example: '[xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]'
        displayName:
          type: string
          description: The display name of the target
          example: My ASA
        type:
          type: string
          description: The target type
          example: ASA
          enum:
            - ASA
            - FDM_MANAGED_FTD
            - CDFMC
            - CDFMC_MANAGED_FTD
            - SFCN
            - AWS_VPC
            - ONPREM_FMC
            - MERAKI_MX
            - FDM_RULESET
            - ONPREM_FMC_MANAGED_FTD
            - MCD
      description: >-
        Set of targets that contain the object. A target can be, for example, a
        device, service, or a shared policy (Ruleset).
    TargetsRequest:
      type: object
      properties:
        targetsUuids:
          type: array
          description: The list of UIDs of the targets to be deleted.
          example:
            - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
          items:
            type: string
            description: The list of UIDs of the targets to be deleted.
            example: '["xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"]'
    UpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the object to update
          example: my-object
        description:
          type: string
          description: The description of the object
          example: My object description
        value:
          $ref: '#/components/schemas/SharedObjectValue'
        tags:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: The tags for the object
            example:
              location:
                - London
                - Head-office
            items:
              type: string
              description: The tags for the object
              example: '{"location":["London","Head-office"]}'
          description: The tags for the object
          example:
            location:
              - London
              - Head-office
        labels:
          uniqueItems: true
          type: array
          description: The labels for the object
          example:
            - migration
          items:
            type: string
            description: The labels for the object
            example: '["migration"]'
    ListObjectResponse:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int64
          example: 100
        limit:
          maximum: 200
          type: integer
          description: The number of results retrieved.
          format: int64
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO Public API uses the
            offset field to determine the index of the first result retrieved,
            and will retrieve `limit` results from the offset specified.
          format: int64
          example: 0
        items:
          type: array
          description: The list of objects retrieved.
          items:
            $ref: '#/components/schemas/UnifiedObjectListView'
    UnifiedObjectListView:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        value:
          $ref: '#/components/schemas/SharedObjectValue'
        targetIds:
          uniqueItems: true
          type: array
          items:
            type: string
        overrideIds:
          uniqueItems: true
          type: array
          items:
            type: string
        tags:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
        labels:
          uniqueItems: true
          type: array
          items:
            type: string
      description: The list of objects retrieved.
  responses:
    http400BadRequest:
      description: Invalid input provided. Check the response for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http401Unauthorised:
      description: Request not authorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
    http403Forbidden:
      description: User does not have sufficient privileges to perform this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http404NotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http405MethodNotAllowed:
      description: Method not allowed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
x-tagGroups:
  - name: public-api-openapi
    tags:
      - Users
      - Search
      - Tenant Management
      - Inventory
      - Transactions
      - Meta
      - Connectors
      - Changelogs
      - CdFMC
  - name: object-service-openapi
    tags:
      - Object Management
