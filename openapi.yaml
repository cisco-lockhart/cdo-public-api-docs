openapi: 3.0.1
info:
  title: API Docs
  description: Use the interactive documentation to explore the endpoints CDO has
    to offer
  contact:
    name: CDO TAC
    email: cdo.tac@cisco.com
  version: 0.0.1
servers:
- url: https://edge.us.cdo.cisco.com/api/rest
  description: US
- url: https://edge.eu.cdo.cisco.com/api/rest
  description: EU
- url: https://edge.apj.cdo.cisco.com/api/rest
  description: APJ
- url: https://edge.staging.cdo.cisco.com/api/rest
  description: Staging
- url: https://edge.scale.cdo.cisco.com/api/rest
  description: Scale
- url: https://edge.ci.cdo.cisco.com/api/rest
  description: CI
paths:
  /v1/users:
    get:
      tags:
      - user-controller
      summary: Fetch a list of users associated with the CDO tenant.
      operationId: listUsers
      parameters:
      - name: limit
        in: query
        description: The number of results to retrieve.
        required: false
        schema:
          maximum: 200
          minimum: 0
          type: string
          default: "50"
      - name: offset
        in: query
        description: "The offset of the results retrieved. The CDO Public API uses\
          \ the offset field to determine the index of the first result retrieved,\
          \ and will retrieve `limit` results from the offset specified."
        required: false
        schema:
          minimum: 0
          type: string
          default: "0"
      - name: q
        in: query
        description: The query to execute. Use the Lucene Query Syntax to construct
          your query.
        required: false
        schema:
          type: string
        example: name:London-Office-ASA
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "200":
          description: List of User objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPage'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
    post:
      tags:
      - user-controller
      summary: Create a user in the CDO tenant
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrUpdateInput'
        required: true
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "201":
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/users/{apiUserId}/apiToken/revoke:
    post:
      tags:
      - user-controller
      summary: Revoke API Token of API-only user
      operationId: revokeApiToken
      parameters:
      - name: apiUserId
        in: path
        description: The unique identifier of the API user in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "201":
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusInfo'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/users/{apiUserId}/apiToken/generate:
    post:
      tags:
      - user-controller
      summary: Generate API Token for API-only user
      operationId: generateApiToken
      parameters:
      - name: apiUserId
        in: path
        description: The unique identifier of the API user in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "201":
          description: API Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenInfo'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/token/revoke:
    post:
      tags:
      - token-controller
      summary: Revoke the current token
      operationId: revokeToken
      responses:
        "200":
          description: Revoke success
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/msp/tenants:
    post:
      tags:
      - msp-controller
      summary: Add a tenant to the MSP Portal
      operationId: addMspTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MspAddTenantInput'
        required: true
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "201":
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusInfo'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices/ios:
    post:
      tags:
      - ios-device-controller
      summary: Onboard a IOS device in the CDO tenant
      operationId: createIosDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IosCreateOrUpdateInput'
        required: true
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "202":
          description: CDO Transaction object that can be used to track the progress
            of the onboarding operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices/ftds:
    post:
      tags:
      - ftd-device-controller
      summary: Create an FTD device in the CDO tenant
      operationId: createFtdDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FtdCreateOrUpdateInput'
        required: true
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "202":
          description: CDO Transaction object that can be used to track the progress
            of the creation operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices/ftds/register:
    post:
      tags:
      - ftd-device-controller
      summary: "Register an FTD device managed by an FMC to the CDO tenant. Call this\
        \ API endpoint after you have created an FTD, and pasted the generated CLI\
        \ output in the FTD"
      operationId: finishOnboardingFtdDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FtdRegistrationInput'
        required: true
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "202":
          description: CDO Transaction object that can be used to track the progress
            of the creation operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices/ftds/cdfmcManaged/{deviceUid}/delete:
    post:
      tags:
      - ftd-device-controller
      summary: Delete cdFMC managed FTD device in the CDO tenant
      operationId: deleteCdFmcManagedFtdDevice
      parameters:
      - name: deviceUid
        in: path
        description: The unique identifier of the cdFMC managed FTD device in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "202":
          description: CDO Transaction object that can be used to track the progress
            of the deletion operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices/asas:
    post:
      tags:
      - asa-device-controller
      summary: Onboard a ASA device in the CDO tenant
      operationId: createAsaDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsaCreateOrUpdateInput'
        required: true
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "404":
          $ref: '#/components/responses/http404NotFound'
        "202":
          description: CDO Transaction object that can be used to track the progress
            of the onboarding operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices/asas/{deviceUid}/reconnect:
    post:
      tags:
      - asa-device-controller
      summary: Reconnect an ASA device in the CDO tenant
      operationId: reconnectAsaDevice
      parameters:
      - name: deviceUid
        in: path
        description: The unique identifier of the ASA device in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "202":
          description: CDO Transaction object that can be used to track the progress
            of the reconnecting operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices/asas/{deviceUid}/read:
    post:
      tags:
      - asa-device-controller
      summary: Read configuration on ASA device into CDO
      operationId: readFromAsaDevice
      parameters:
      - name: deviceUid
        in: path
        description: The unique identifier of the ASA device in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "202":
          description: CDO Transaction object that can be used to track the progress
            of the read operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/users/{userUid}:
    get:
      tags:
      - user-controller
      summary: Fetch a user by UID in the CDO tenant.
      operationId: getUser
      parameters:
      - name: userUid
        in: path
        description: The unique identifier of the user in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "404":
          $ref: '#/components/responses/http404NotFound'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "200":
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
    delete:
      tags:
      - user-controller
      summary: Delete a User by UID in the CDO tenant
      operationId: deleteDeviceManager
      parameters:
      - name: userUid
        in: path
        description: The unique identifier of the user in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "204":
          description: No Content
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/transactions/{transactionUid}:
    get:
      tags:
      - transactions-controller
      summary: Get information of an in-progress CDO transaction
      operationId: getTransaction
      parameters:
      - name: transactionUid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "404":
          $ref: '#/components/responses/http404NotFound'
        "200":
          description: "CDO Transaction that has completed, either successfully or\
            \ unsuccessfully. Note: failed CDO Transactions do not roll back."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "202":
          description: CDO Transaction that is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/token:
    get:
      tags:
      - token-controller
      summary: Fetch information on the current token
      operationId: getToken
      responses:
        "200":
          description: Token information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTokenInfo'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/regions:
    get:
      tags:
      - regions-controller
      summary: Fetch a list of CDO regions.
      operationId: listRegions
      responses:
        "200":
          description: List of CDO regions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoRegionList'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/meta:
    get:
      tags:
      - meta-controller
      summary: "Get Meta information about CDO, including the IP addresses of CDO\
        \ services"
      operationId: getMeta
      responses:
        "200":
          description: Meta information about CDO.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/inventory/templates:
    get:
      tags:
      - template-device-controller
      summary: Fetch a list of template devices in the CDO tenant
      operationId: listTemplateDevices
      parameters:
      - name: limit
        in: query
        description: The number of results to retrieve.
        required: false
        schema:
          maximum: 200
          minimum: 0
          type: string
          default: "50"
      - name: offset
        in: query
        description: "The offset of the results retrieved. The CDO Public API uses\
          \ the offset field to determine the index of the first result retrieved,\
          \ and will retrieve `limit` results from the offset specified."
        required: false
        schema:
          minimum: 0
          type: string
          default: "0"
      - name: q
        in: query
        description: The query to execute. Use the Lucene Query Syntax to construct
          your query.
        required: false
        schema:
          type: string
        example: name:London-Office-ASA
      - name: sort
        in: query
        description: The fields to sort results by.
        required: true
        schema:
          $ref: '#/components/schemas/SortCriteriaParam'
        example: name:DESC
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "200":
          description: List of Template Devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/templates/{templateDeviceUid}:
    get:
      tags:
      - template-device-controller
      summary: Fetch a template device by UID in the CDO tenant
      operationId: getTemplateDevice
      parameters:
      - name: templateDeviceUid
        in: path
        description: The unique identifier of the template device in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "200":
          description: Template Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "404":
          $ref: '#/components/responses/http404NotFound'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
    delete:
      tags:
      - template-device-controller
      summary: Delete a template device by UID in the CDO tenant
      operationId: deleteTemplateDevice
      parameters:
      - name: templateDeviceUid
        in: path
        description: The unique identifier of the template device in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "204":
          description: No Content
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/services:
    get:
      tags:
      - device-cloud-services-controller
      summary: Fetch a list of Cloud Services in the CDO tenant
      operationId: listDeviceCloudServices
      parameters:
      - name: limit
        in: query
        description: The number of results to retrieve.
        required: false
        schema:
          maximum: 200
          minimum: 0
          type: string
          default: "50"
      - name: offset
        in: query
        description: "The offset of the results retrieved. The CDO Public API uses\
          \ the offset field to determine the index of the first result retrieved,\
          \ and will retrieve `limit` results from the offset specified."
        required: false
        schema:
          minimum: 0
          type: string
          default: "0"
      - name: q
        in: query
        description: The query to execute. Use the Lucene Query Syntax to construct
          your query.
        required: false
        schema:
          type: string
        example: name:London-Office-ASA
      - name: sort
        in: query
        description: The fields to sort results by.
        required: true
        schema:
          $ref: '#/components/schemas/SortCriteriaParam'
        example: name:DESC
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "200":
          description: List of Cloud Services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/services/{cloudServiceUid}:
    get:
      tags:
      - device-cloud-services-controller
      summary: Fetch a Cloud Service by UID in the CDO tenant
      operationId: getCloudService
      parameters:
      - name: cloudServiceUid
        in: path
        description: The unique identifier of the cloud service in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "404":
          $ref: '#/components/responses/http404NotFound'
        "200":
          description: Cloud Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
    delete:
      tags:
      - device-cloud-services-controller
      summary: Delete a Cloud Service by UID in the CDO tenant
      operationId: deleteCloudService
      parameters:
      - name: cloudServiceUid
        in: path
        description: The unique identifier of the cloud service in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "204":
          description: No Content
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/managers:
    get:
      tags:
      - device-manager-controller
      summary: Fetch a list of Device Managers (on-prem FMCs and cloud-delivered FMCs)
        in the CDO tenant
      operationId: listDeviceManagers
      parameters:
      - name: limit
        in: query
        description: The number of results to retrieve.
        required: false
        schema:
          maximum: 200
          minimum: 0
          type: string
          default: "50"
      - name: offset
        in: query
        description: "The offset of the results retrieved. The CDO Public API uses\
          \ the offset field to determine the index of the first result retrieved,\
          \ and will retrieve `limit` results from the offset specified."
        required: false
        schema:
          minimum: 0
          type: string
          default: "0"
      - name: q
        in: query
        description: The query to execute. Use the Lucene Query Syntax to construct
          your query.
        required: false
        schema:
          type: string
        example: name:London-Office-ASA
      - name: sort
        in: query
        description: The fields to sort results by.
        required: true
        schema:
          $ref: '#/components/schemas/SortCriteriaParam'
        example: name:DESC
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "200":
          description: List of Device Manager objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/managers/{deviceManagerUid}:
    get:
      tags:
      - device-manager-controller
      summary: Fetch a Device Manager by UID in the CDO tenant
      operationId: getDeviceManager
      parameters:
      - name: deviceManagerUid
        in: path
        description: The unique identifier of the device manager in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "404":
          $ref: '#/components/responses/http404NotFound'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "200":
          description: Device Manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
    delete:
      tags:
      - device-manager-controller
      summary: Delete a Device Manager by UID in the CDO tenant
      operationId: deleteDeviceManager_1
      parameters:
      - name: deviceManagerUid
        in: path
        description: The unique identifier of the device manager in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "204":
          description: No Content
        "405":
          $ref: '#/components/responses/http405MethodNotAllowed'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices:
    get:
      tags:
      - device-controller
      summary: Fetch a list of devices in the CDO tenant
      operationId: listDevices
      parameters:
      - name: limit
        in: query
        description: The number of results to retrieve.
        required: false
        schema:
          maximum: 200
          minimum: 0
          type: string
          default: "50"
      - name: offset
        in: query
        description: "The offset of the results retrieved. The CDO Public API uses\
          \ the offset field to determine the index of the first result retrieved,\
          \ and will retrieve `limit` results from the offset specified."
        required: false
        schema:
          minimum: 0
          type: string
          default: "0"
      - name: q
        in: query
        description: The query to execute. Use the Lucene Query Syntax to construct
          your query.
        required: false
        schema:
          type: string
        example: name:London-Office-ASA
      - name: sort
        in: query
        description: The fields to sort results by.
        required: true
        schema:
          $ref: '#/components/schemas/SortCriteriaParam'
        example: name:DESC
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "200":
          description: List of Device objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        "405":
          $ref: '#/components/responses/http405MethodNotAllowed'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/inventory/devices/{deviceUid}:
    get:
      tags:
      - device-controller
      summary: Fetch a device by UID in the CDO tenant
      operationId: getDevice
      parameters:
      - name: deviceUid
        in: path
        description: The unique identifier of the device in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "404":
          $ref: '#/components/responses/http404NotFound'
        "405":
          $ref: '#/components/responses/http405MethodNotAllowed'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "200":
          description: Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
    delete:
      tags:
      - device-controller
      summary: Delete a device by UID in the CDO tenant
      operationId: deleteDevice
      parameters:
      - name: deviceUid
        in: path
        description: The unique identifier of the device in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "204":
          description: No Content
        "405":
          $ref: '#/components/responses/http405MethodNotAllowed'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/features:
    get:
      tags:
      - features-controller
      summary: Fetch the feature flags enabled for this tenant
      operationId: listFeatureFlags
      responses:
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "200":
          description: Set of feature flags that are enabled for the user's tenant.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
              - feature-1
              - feature-2
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/connectors/sdcs:
    get:
      tags:
      - sdc-controller
      summary: Fetch a list of SDCs in the CDO tenant
      operationId: listSdcs
      parameters:
      - name: limit
        in: query
        description: The number of results to retrieve.
        required: false
        schema:
          maximum: 200
          minimum: 0
          type: string
          default: "50"
      - name: offset
        in: query
        description: "The offset of the results retrieved. The CDO Public API uses\
          \ the offset field to determine the index of the first result retrieved,\
          \ and will retrieve `limit` results from the offset specified."
        required: false
        schema:
          minimum: 0
          type: string
          default: "0"
      - name: q
        in: query
        description: The query to execute. Use the Lucene Query Syntax to construct
          your query.
        required: false
        schema:
          type: string
        example: name:London-Office-ASA
      - name: sort
        in: query
        description: The fields to sort results by.
        required: true
        schema:
          $ref: '#/components/schemas/SortCriteriaParam'
        example: name:DESC
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "200":
          description: List of SDC objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdcPage'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
  /v1/connectors/sdcs/{sdcUid}:
    get:
      tags:
      - sdc-controller
      summary: Fetch a SDC by UID in the CDO tenant
      operationId: fetchSdc
      parameters:
      - name: sdcUid
        in: path
        description: The unique identifier of the SDC in CDO.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "403":
          $ref: '#/components/responses/http403Forbidden'
        "404":
          $ref: '#/components/responses/http404NotFound'
        "200":
          description: SDC object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sdc'
        "401":
          $ref: '#/components/responses/http401Unauthorised'
        "400":
          $ref: '#/components/responses/http400BadRequest'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
      - bearerAuth: []
components:
  schemas:
    UserCreateOrUpdateInput:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the user in CDO.
          example: myusername@cisco.com
        role:
          type: string
          description: The user role in CDO.
          example: ROLE_ADMIN
        apiOnlyUser:
          type: boolean
          description: "Whether the user is API-only, an API-only user cannot access\
            \ CDO in the UI."
          example: false
          default: false
    User:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the SDC in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the user in CDO.
          example: myusername@cisco.com
        roles:
          type: array
          description: Roles associated with this user in CDO.
          example: "[ROLE_ADMIN]"
          items:
            $ref: '#/components/schemas/UserRole'
        apiOnlyUser:
          type: boolean
          description: "Whether the user is API-only, an API-only user cannot access\
            \ CDO in the UI."
          example: false
        lastSuccessfulLogin:
          type: string
          description: The time (UTC; represented using the RFC-3339 standard) that
            indicate the last time the user successfully login CDO.
          format: date-time
          example: 2023-12-13T05:15:44Z
    UserRole:
      type: string
      description: The role of the user this token belongs to. The user can be API-only
        or a human.
      enum:
      - ROLE_ADMIN
      - ROLE_SUPER_ADMIN
      - ROLE_READ_ONLY
      - ROLE_DEPLOY_ONLY
      - ROLE_EDIT_ONLY
      - ROLE_VPN_SESSIONS_MANAGER
    StatusInfo:
      type: object
      properties:
        status:
          type: string
          description: The Status of the request.
          example: OK
    ApiTokenInfo:
      type: object
      properties:
        apiToken:
          type: string
          description: The API Access Token.
          example: FaKE-toKeN
    MspAddTenantInput:
      required:
      - apiToken
      type: object
      properties:
        apiToken:
          type: string
          description: The Tenant API Access Token.
          example: FaKE-toKeN
    IosCreateOrUpdateInput:
      required:
      - connectorName
      - name
      - password
      - username
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My IOS
        deviceAddress:
          type: string
          description: "The address of the device to onboard, specified in the format\
            \ `host:port`."
          example: 10.2.2.5:443
        username:
          type: string
          description: The username used to authenticate with the device.
          example: admin
        password:
          type: string
          description: The password used to authenticate with the device.
          example: Cisco@23
        ignoreCertificate:
          type: boolean
          description: Set this attribute to true if you do not want CDO to validate
            the certificate of this device before onboarding.
          example: false
          default: false
        connectorName:
          type: string
          description: The name of the Secure Device Connector (SDC) that will be
            used to communicate with the device.
          example: SDC-1
        labels:
          uniqueItems: true
          type: array
          description: Specify a set of labels to identify the device as part of a
            group. Refer to the CDO documentation for details on how labels are used
            in CDO.
          example:
          - ios
          - ra-vpn-headend
          items:
            type: string
            description: Specify a set of labels to identify the device as part of
              a group. Refer to the CDO documentation for details on how labels are
              used in CDO.
            example: "[\"ios\",\"ra-vpn-headend\"]"
    CdoTransaction:
      type: object
      properties:
        transactionUid:
          type: string
          description: The unique identifier of the asynchronous transaction triggered.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        tenantUid:
          type: string
          description: The unique identifier of the tenant that asynchronous transaction
            triggered on.
          format: uuid
          example: 5131daad-e813-4b8f-8f42-be1e241e2cdb
        entityUid:
          type: string
          description: The unique identifier of the entity that the asynchronous transaction
            is triggered on.
          format: uuid
          example: f5f660d4-4b81-4374-877d-fbc4bee894e2
        entityUrl:
          type: string
          description: A URL to access the entity that the asynchronous transaction
            is triggered on.
          example: https://edge.us.cdo.cisco.com/platform/public-api/v1/inventory/devices/f5f660d4-4b81-4374-877d-fbc4bee894e2
        transactionPollingUrl:
          type: string
          description: The URL to poll to track the progress of the transaction.
          example: https://edge.us.cdo.cisco.com/platform/public-api/v1/transactions/7131daad-e813-4b8f-8f42-be1e241e8cdb
        submissionTime:
          type: string
          description: The time (UTC; represented using the RFC-3339 standard) at
            which the transaction was triggered
          format: date-time
          example: 2023-12-13T05:15:44Z
        lastUpdatedTime:
          type: string
          description: The time (UTC; represented using the RFC-3339 standard) at
            which the transaction status was last updated
          format: date-time
          example: 2023-12-13T08:15:44Z
        transactionType:
          $ref: '#/components/schemas/CdoTransactionType'
        cdoTransactionStatus:
          $ref: '#/components/schemas/CdoTransactionStatus'
        errorMessage:
          type: string
          description: "Transaction error message, if any"
        errorDetails:
          type: object
          additionalProperties:
            type: string
            description: "Transaction error details, if any"
          description: "Transaction error details, if any"
    CdoTransactionStatus:
      type: string
      description: The status of the CDO transaction
      example: IN_PROGRESS
      enum:
      - PENDING
      - IN_PROGRESS
      - DONE
      - ERROR
    CdoTransactionType:
      type: string
      description: the type of the transaction
      example: ONBOARD_ASA
      enum:
      - ONBOARD_ASA
      - ONBOARD_IOS
      - CREATE_FTD
      - REGISTER_FTD
      - DELETE_CDFMC_MANAGED_FTD
      - RECONNECT_ASA
      - READ_ASA
    EntityType:
      type: string
      description: The type of the device.
      example: CDFMC_MANAGED_FTD
      enum:
      - ASA
      - CDFMC_MANAGED_FTD
      - ONPREM_FMC_MANAGED_FTD
      - ONPREM_FMC_MANAGED_FIREPOWER
      - ONPREM_FMC_NGIPS
      - FDM_MANAGED_FTD
      - IOS
      - SSH_DEVICE
      - GENERIC_DEVICE
      - MERAKI_MX
      - CLOUD_DNG
      - SFCN
      - SFCN_DNG
      - SFCN_STS
      - ONPREM_FMC
      - CDFMC
      - AWS_VPC
      - AZURE_VNET
      - DUO_ADMIN_PANEL
      - UMBRELLA_ORGANIZATION
    FtdCreateOrUpdateInput:
      required:
      - fmcAccessPolicyUid
      - licenses
      - name
      type: object
      properties:
        name:
          type: string
          description: Specify a human-readable name for the device.
          example: My FTD
        licenses:
          uniqueItems: true
          type: array
          description: Specify a set of licenses to apply to the device.
          example: BASE
          items:
            type: string
            description: Specify a set of licenses to apply to the device.
            example: BASE
            enum:
            - BASE
            - CARRIER
            - THREAT
            - MALWARE
            - URLFilter
        virtual:
          type: boolean
          description: Indicate whether the FTD is a virtual or a physical device.
        fmcAccessPolicyUid:
          type: string
          description: Specify the unique identifier of the FMC access policy to apply
            to this device.
          format: uuid
        performanceTier:
          type: string
          description: Specify the performance tier of the FTDv (required only if
            isVirtual is set to true)
          enum:
          - FTDv5
          - FTDv10
          - FTDv20
          - FTDv30
          - FTDv50
          - FTDv100
          - FTDv
        labels:
          uniqueItems: true
          type: array
          description: Specify a set of labels to identify the device as part of a
            group. Refer to the CDO documentation for details on how labels are used
            in CDO.
          example:
          - ios
          - ra-vpn-headend
          items:
            type: string
            description: Specify a set of labels to identify the device as part of
              a group. Refer to the CDO documentation for details on how labels are
              used in CDO.
            example: "[\"ios\",\"ra-vpn-headend\"]"
        deviceType:
          $ref: '#/components/schemas/EntityType'
    FtdRegistrationInput:
      required:
      - ftdUid
      type: object
      properties:
        ftdUid:
          type: string
          description: The unique identifier of the FTD device in CDO for which registration
            should be triggered.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
    AsaCreateOrUpdateInput:
      required:
      - connectorType
      - name
      - password
      - username
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My ASA
        deviceAddress:
          type: string
          description: "The address of the device to onboard, specified in the format\
            \ `host:port`."
          example: 10.2.2.5:443
        username:
          type: string
          description: The username used to authenticate with the device.
          example: admin
        password:
          type: string
          description: The password used to authenticate with the device.
          example: Cisco@23
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        ignoreCertificate:
          type: boolean
          description: Set this attribute to true if you do not want CDO to validate
            the certificate of this device before onboarding.
          example: false
          default: false
        connectorName:
          type: string
          description: The name of the Secure Device Connector (SDC) that will be
            used to communicate with the device. This value is not required if the
            connector type selected is Cloud Connector (CDG).
          example: SDC-1
        labels:
          uniqueItems: true
          type: array
          description: Specify a set of labels to identify the device as part of a
            group. Refer to the CDO documentation for details on how labels are used
            in CDO.
          example:
          - asa
          - ra-vpn-headend
          items:
            type: string
            description: Specify a set of labels to identify the device as part of
              a group. Refer to the CDO documentation for details on how labels are
              used in CDO.
            example: "[\"asa\",\"ra-vpn-headend\"]"
    ConnectorType:
      type: string
      description: The type of the connector that will be used to communicate with
        the device. CDO can communicate with your device using either a Cloud Connector
        (CDG) or a Secure Device Connector (SDC).
      example: CDG
      enum:
      - SDC
      - CDG
    UserPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: "The offset of the results retrieved. The CDO Public API uses\
            \ the offset field to determine the index of the first result retrieved,\
            \ and will retrieve `limit` results from the offset specified."
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/User'
    CdoTokenInfo:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the user this token belongs to. The
            user can be API-only or a human.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the user this token belongs to. The user can be
            API-only or a human.
          example: my-example-device
        roles:
          uniqueItems: true
          type: array
          description: The role of the user this token belongs to. The user can be
            API-only or a human.
          items:
            $ref: '#/components/schemas/UserRole'
        expiresAt:
          type: string
          description: "The time (UTC; represented using the RFC-3339 standard) the\
            \ token expires. If this field is missing, the token will never expire."
          format: date-time
        tenantUid:
          type: string
          description: "The unique identifier of the tenant this token is associated\
            \ with. While a user can be associated with multiple tenants, a token\
            \ is associated with a single tenant."
          format: uuid
    CdoRegion:
      type: object
      properties:
        domain:
          type: string
          description: The domain for the region.
        apiDomain:
          type: string
          description: The domain for API services in the region.
        description:
          type: string
          description: Human readable description of the region.
      description: The list of items.
    CdoRegionList:
      type: object
      properties:
        items:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/CdoRegion'
    Meta:
      type: object
      properties:
        cloudConnectorIps:
          type: array
          description: The IP addresses from which to allow inbound access to your
            network if you wish to connect to your devices through CDO's Cloud Connector.
          items:
            type: string
            description: The IP addresses from which to allow inbound access to your
              network if you wish to connect to your devices through CDO's Cloud Connector.
    SortCriteriaParam:
      type: object
      properties:
        sort:
          type: array
          writeOnly: true
          items:
            type: string
        sortFields:
          type: array
          items:
            type: string
    AsaFailoverMate:
      type: object
      properties:
        failoverState:
          type: string
          description: (High Availability ASAs only) Failover state of this device.
          example: Primary - Active
        serial:
          type: string
          description: "(High Availability ASAs only) The serial number of the device.\
            \ This is typically used for licensing, and is not the same as the chassis'\
            \ serial number."
          example: JAD24500xxx
        softwareVersion:
          type: string
          description: (High Availability ASAs only) The version of the software running
            on the device.
          example: 9.18.8
      description: (High Availability ASAs only) Information on the failover mate
        of this device.
    AsaFailoverMode:
      type: string
      description: (ASAs only) Failover mode of the device.
      example: ACTIVE_STANDBY
      enum:
      - "OFF"
      - ACTIVE_STANDBY
      - ACTIVE_ACTIVE
    CdFmcInfo:
      type: object
      properties:
        cliKey:
          type: string
          description: "The CLI key to paste into the FTD CLI to register the FTD\
            \ with a cdFMC. You need to paste this value in only once, when the FTD\
            \ is being onboarded. Refer to the [CDO Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)\
            \ for details."
          example: configure manager add acme.app.us.cdo.cisco.com E2jsyiZggyeCfFfCUaMK2kD1a1bxxx
            5Do6FwUaXY4EFlyraC2yVnxodLxhuxxx acme.app.us.cdo.cisco.com
        regKey:
          type: string
          description: "The Network Address Translation (NAT) ID of this FTD. Refer\
            \ to the [CDO Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)\
            \ for details."
          example: E2jsyiZggyeCfFfCUaMK2kD1a1bxxx
        natId:
          type: string
          description: "The Registration Key of this FTD. Refer to the [CDO Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)\
            \ for details."
          example: 5Do6FwUaXY4EFlyraC2yVnxodLxhuxxx
      description: (FTDs managed by cdFMC only) Information on the cloud-delivered
        FMC managing this FTD. This information is not available for FTDs managed
        using FDM or on-prem FMCs.
    ConfigState:
      type: string
      description: "The state of the device configuration in CDO. CDO stages configuration\
        \ changes which have to be manually applied to the device; this field indicates\
        \ whether the configuration on CDO does not match the configuration on the\
        \ device, which indicates whether there are changes to be deployed from CDO\
        \ to the device."
      example: SYNCED
      enum:
      - NO_CONFIG
      - SYNCED
      - NOT_SYNCED
      - UNKNOWN
    ConflictDetectionState:
      type: string
      description: Indicates whether there have been changes made to the device's
        configuration outside of CDO.
      example: NO_CONFLICTS
      enum:
      - CONFLICT_DETECTED
      - NO_CONFLICTS
    ConnectivityState:
      type: string
      description: "The connectivity state of the device to CDO. A connectivity state\
        \ that is not ONLINE can indicate either a problem with the device, or the\
        \ communication pathways between the device and CDO."
      example: ONLINE
      enum:
      - ONLINE
      - UNREACHABLE
      - BAD_CREDENTIALS
      - UNKNOWN
      - PENDING_SETUP
    Device:
      required:
      - deviceType
      - name
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the device in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the device in CDO. Device names are unique in CDO.
          example: my-example-device
        deviceType:
          $ref: '#/components/schemas/EntityType'
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        connectorUid:
          type: string
          description: The unique identifier of the Secure Device Connector (SDC)
            that will be used to communicate with the device. This value is not required
            if the connector type selected is Cloud Connector (CDG)The name of the
            Secure Device Connector (SDC) that will be used to communicate with the
            device. This value is not required if the connector type selected is Cloud
            Connector (CDG).
          format: uuid
          example: 3af473a8-d70f-4090-bcdb-853981696478
        address:
          type: string
          description: "The address of the device, in `host:port` format. CDO connects\
            \ to the device at this address."
          example: my-example-device.example.com:443
        deviceRole:
          $ref: '#/components/schemas/DeviceRole'
        serial:
          type: string
          description: "The serial number of the device. This is typically used for\
            \ licensing, and is not the same as the chassis' serial number."
          example: JAD24500xxx
        chassisSerial:
          type: string
          description: "The serial number on the chassis of the device (ASA-only).\
            \ This is typically used to type up to Cisco SmartNet, and is not the\
            \ same as the serial number."
          example: JMX2450Xxxx
        softwareVersion:
          type: string
          description: The version of the software running on the device.
          example: 7.4.1
        connectivityState:
          $ref: '#/components/schemas/ConnectivityState'
        configState:
          $ref: '#/components/schemas/ConfigState'
        conflictDetectionState:
          $ref: '#/components/schemas/ConflictDetectionState'
        notes:
          type: string
          description: Free-form notes on the device.
          example: This is an example note on the device.
        asdmVersion:
          type: string
          description: (ASAs only) Version of the ASDM device manager running on the
            device.
          example: 7.6(2)
        asaFailoverMode:
          $ref: '#/components/schemas/AsaFailoverMode'
        asaFailoverState:
          type: string
          description: (High Availability ASAs only) Failover state of this device.
          example: Primary - Active
        asaFailoverMate:
          $ref: '#/components/schemas/AsaFailoverMate'
        asaLicenseEntitlements:
          type: object
          additionalProperties:
            type: string
            description: (ASAs only) Map of ASA License entitlements.
          description: (ASAs only) Map of ASA License entitlements.
        ftdLicenses:
          type: array
          description: (FTDs only) List of FTD License entitlements.
          items:
            type: string
            description: (FTDs only) List of FTD License entitlements.
        snortVersion:
          type: string
          description: (FTDs only) List of FTD License entitlements.
        ftdPerformanceTier:
          type: string
          description: (FTDvs only) The FTDv supports performance-tiered licensing
            that provides different throughput levels and VPN connection limits based
            on deployment requirements. This field specifies the performance tier
            of the FTD.
        cdFmcInfo:
          $ref: '#/components/schemas/CdFmcInfo'
        onPremFmcInfo:
          $ref: '#/components/schemas/OnPremFmcInfo'
        merakiDeploymentMode:
          $ref: '#/components/schemas/MerakiDeploymentMode'
        merakiNetwork:
          $ref: '#/components/schemas/Network'
        state:
          type: string
          description: The device state.
        stateMachineDetails:
          $ref: '#/components/schemas/StateMachineDetails'
    DevicePage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: "The offset of the results retrieved. The CDO Public API uses\
            \ the offset field to determine the index of the first result retrieved,\
            \ and will retrieve `limit` results from the offset specified."
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Device'
    DeviceRole:
      type: string
      description: The role this device performs on the network.
      example: RA_VPN_HEADEND
      enum:
      - RA_VPN_HEADEND
      - MFA_PROVIDER
      - ZTNA_PROVIDER
    MerakiDeploymentMode:
      type: string
      description: (Meraki devices only) The deployment mode of the Meraki device.
      example: ROUTED
      enum:
      - ROUTED
      - PASSTHROUGH
    Network:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the Meraki Dashboard Network.
          example: L_583779101697901532
        name:
          type: string
          description: The name of the Meraki Dashboard Network.
          example: meraki-network
        timezone:
          type: string
          description: The timezone of the Meraki Dashboard Network.
          example: UTC +0
      description: "(Meraki devices only) The [Dashboard Network](https://documentation.meraki.com/General_Administration/Organizations_and_Networks/Creating_and_Deleting_Dashboard_Networks)\
        \ the device is deployed in."
    OnPremFmcInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of the device in CDO. Device names are unique in CDO.
          example: my-example-fmc
        address:
          type: string
          description: "The address of the on-prem FMC managing this device, in `host:port`\
            \ format."
          example: my-example-fmc.example.com:443
      description: (Devices managed by on-prem FMC only) Information on the on-prem
        FMC managing this device.
    StateMachineDetails:
      type: object
      properties:
        identifier:
          type: string
        lastError:
          $ref: '#/components/schemas/StateMachineError'
      description: The device state machine details.
    StateMachineError:
      type: object
      properties:
        errorMessage:
          type: string
        errorCode:
          type: string
        actionIdentifier:
          type: string
    Sdc:
      required:
      - name
      type: object
      properties:
        sdcPublicKey:
          $ref: '#/components/schemas/SdcPublicKey'
        uid:
          type: string
          description: The unique identifier of the SDC in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the SDC in CDO. SDC names are unique in CDO.
          example: my-example-sdc
        softwareVersion:
          type: string
          description: The software version running on the SDC.
          example: "202311071057"
        ipAddress:
          type: string
          description: The IP address of the SDC.
          example: "202311071057"
        sdcStatus:
          $ref: '#/components/schemas/SdcStatus'
        lastHeartbeat:
          type: string
          description: The time (UTC; represented using the RFC-3339 standard) that
            a heartbeat was last received from the SDC. This serves as an indicator
            of the health of the SDC.
          format: date-time
          example: 2023-12-13T05:15:44Z
    SdcPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: "The offset of the results retrieved. The CDO Public API uses\
            \ the offset field to determine the index of the first result retrieved,\
            \ and will retrieve `limit` results from the offset specified."
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Sdc'
    SdcPublicKey:
      type: object
      properties:
        base64EncodedKey:
          type: string
          description: Base64 RSA public key to use to encrypt device credentials
            sent to the SDC.
          example: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEZGpxeDNNMjh3ZHE2Rk11R2NFZHJqaGl3SFp5NDE0WXZFUmRDcVdnRXgrSXloNjVteHlkaVh1OVpoMXUyVTRtNDlnL0VUL2JxTklFNGgraUViQURjcjlScVFGRGZ4RC9pK1ZPSkhiQzQ0UERhZHFJd21vUGNoazYvQ0RoZVlJSmZTM0xTNmlkaC9SRGVFVHpnZ3lTaUI2Mm5yMnRmTkJ3V0ZScjV1Sko5dkNvdUxKRVBZbDBVMkpZNnBjd0paNk1lRDg5dU4rTjlHWFN2Vlh4bEZKNXg0VThReGFCMzJuNHZoekNiUzlYSVg1bGJJQnVIUEZ1bmMrNThPaUFzS0dwTTZ1NzhVR2V2TndOVzU0eVZmU2c4Q01XQ09vM1hiNTIrMnU2VHZlcE1BT2ZFU290YUd5NHV1RTBnUHYwSnowano3ZnFGTCt4d1AzNnNVY2pPRlIzQ1VhbEVpUDEyT2tTeEhreVNMUXJ3a2lFTVUvQ3VPUjdOWkdjUFd0dkVBaUZOTEN0VHhzY25Ma0xNNENkUEt3WnZQV3l3cHAyVGdValU4MEFaWkJZaGZBWTd3SFFQdDhrTkROMURhMWpWaHlwMWlycE5VbTEvaDNrS2srOFdFOVV2RjNDeVgyL1NqWUpPR2lMUWdVaXFUL3E5UkNMZUdVWStzaUFwS3ZyNS91UkU9IHNpd2FycmllQFNJV0FSUklFLU0tS1JBRgo=
        keyId:
          type: string
          description: The identifier of the RSA public key. This identifier is used
            by the SDC to know which private key to use to decrypt a string.
          example: example-key-id
      description: Information on the public key used to encrypt credentials sent
        to the SDC.
    SdcStatus:
      type: string
      description: The status of the SDC.
      example: ACTIVE
      enum:
      - NEW
      - ONBOARDING
      - ACTIVE
      - INACTIVE
      - DISABLED
      - UNKNOWN
    AuthenticationError:
      type: object
      properties:
        error:
          type: string
          description: A human-readable error description in English.
          example: invalid_token
        errorDescription:
          type: string
          description: A human-readable error description in English.
          example: Your token is invalid
    CommonApiError:
      type: object
      properties:
        errorCode:
          type: string
          description: A unique error code that describes the error.
          example: INVALID_INPUT
          enum:
          - INVALID_INPUT
          - UNAUTHORIZED
          - FORBIDDEN
          - NOT_FOUND
          - METHOD_NOT_ALLOWED
          - CONFLICT
          - TOO_MANY_REQUESTS
          - CANNOT_DELETE_CDFMC_MANAGED_FTD
          - CANNOT_DELETE_ONPREM_FMC_MANAGED_FTD
          - CANNOT_DELETE_ONPREM_FMC_MANAGED_FIREPOWER
          - CANNOT_DELETE_CDFMC
          - SERVER_ERROR
          - PROXY_ERROR
        errorMsg:
          type: string
          description: A human-readable error description in English.
          example: sample error
        details:
          type: object
          additionalProperties:
            type: object
            description: "Additional details, if any, on the error"
          description: "Additional details, if any, on the error"
  responses:
    http400BadRequest:
      description: Invalid input provided. Check the response for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http401Unauthorised:
      description: Request not authorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
    http403Forbidden:
      description: User does not have sufficient privileges to perform this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http404NotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http405MethodNotAllowed:
      description: Method not allowed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
