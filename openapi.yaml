openapi: 3.0.1
info:
  title: CDO API
  description: Use the documentation to explore the endpoints CDO has to offer
  contact:
    name: CDO TAC
    email: cdo.tac@cisco.com
  version: 1.3.0
servers:
  - url: https://edge.us.cdo.cisco.com/api/rest
    description: US
  - url: https://edge.eu.cdo.cisco.com/api/rest
    description: EU
  - url: https://edge.apj.cdo.cisco.com/api/rest
    description: APJ
  - url: https://edge.aus.cdo.cisco.com/api/rest
    description: AUS
  - url: https://edge.in.cdo.cisco.com/api/rest
    description: IN
  - url: https://edge.staging.cdo.cisco.com/api/rest
    description: Staging
  - url: https://edge.scale.cdo.cisco.com/api/rest
    description: Scale
  - url: https://edge.ci.cdo.cisco.com/api/rest
    description: CI
tags:
  - name: Cloud-delivered FMC
    x-displayName: Cloud-delivered FMC
  - name: Remote Access Monitoring
    x-displayName: Remote Access Monitoring
  - name: Users
    x-displayName: Users
  - name: Search
    x-displayName: Search
  - name: ASA Access Rules
    x-displayName: ASA Access Rules
  - name: Access Groups
    x-displayName: Access Groups
  - name: MSP
    x-displayName: MSP
  - name: Inventory
    x-displayName: Inventory
  - name: Connectors
    x-displayName: Connectors
  - name: Command Line Interface
    x-displayName: Command Line Interface
  - name: Change Requests
    x-displayName: Change Requests
  - name: AI Assistant
    x-displayName: AI Assistant
  - name: Tenant Management
    x-displayName: Tenant Management
  - name: Transactions
    x-displayName: Transactions
  - name: Meta
    x-displayName: Meta
  - name: Changelogs
    x-displayName: Changelogs
  - name: Audit Logs
    x-displayName: Audit Logs
  - name: Object Management
    x-displayName: Object Management
paths:
  /v1/cdfmc/**:
    get:
      tags:
        - Cloud-delivered FMC
      summary: Proxy Request To Cloud-Delivered FMC
      description: >-
        This endpoint proxies the request to the Cloud-Delivered FMC (cdFMC).
        Refer to the <a
        href="https://www.cisco.com/c/en/us/td/docs/security/firepower/730/Rapid-Release/API/CDO/cloud_delivered_firewall_management_center_rest_api_quick_start_guide/About_The_API_Explorer.html">cdFMC
        API Explorer in CDO</a> for the list of available endpoints. You can
        append the relative API paths provided in the cdFMC API documentation to
        the `/v1/cdfmc` URL to make requests to the cdFMC in your CDO tenant.
        <b>Note:</b> These endpoints will return 404 if the CDO tenant does not
        have a cdFMC provisioned.
      operationId: proxyFmcRequest
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    put:
      tags:
        - Cloud-delivered FMC
      summary: Proxy Request To Cloud-Delivered FMC
      description: >-
        This endpoint proxies the request to the Cloud-Delivered FMC (cdFMC).
        Refer to the <a
        href="https://www.cisco.com/c/en/us/td/docs/security/firepower/730/Rapid-Release/API/CDO/cloud_delivered_firewall_management_center_rest_api_quick_start_guide/About_The_API_Explorer.html">cdFMC
        API Explorer in CDO</a> for the list of available endpoints. You can
        append the relative API paths provided in the cdFMC API documentation to
        the `/v1/cdfmc` URL to make requests to the cdFMC in your CDO tenant.
        <b>Note:</b> These endpoints will return 404 if the CDO tenant does not
        have a cdFMC provisioned.
      operationId: proxyFmcRequest_2
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - Cloud-delivered FMC
      summary: Proxy Request To Cloud-Delivered FMC
      description: >-
        This endpoint proxies the request to the Cloud-Delivered FMC (cdFMC).
        Refer to the <a
        href="https://www.cisco.com/c/en/us/td/docs/security/firepower/730/Rapid-Release/API/CDO/cloud_delivered_firewall_management_center_rest_api_quick_start_guide/About_The_API_Explorer.html">cdFMC
        API Explorer in CDO</a> for the list of available endpoints. You can
        append the relative API paths provided in the cdFMC API documentation to
        the `/v1/cdfmc` URL to make requests to the cdFMC in your CDO tenant.
        <b>Note:</b> These endpoints will return 404 if the CDO tenant does not
        have a cdFMC provisioned.
      operationId: proxyFmcRequest_1
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Cloud-delivered FMC
      summary: Proxy Request To Cloud-Delivered FMC
      description: >-
        This endpoint proxies the request to the Cloud-Delivered FMC (cdFMC).
        Refer to the <a
        href="https://www.cisco.com/c/en/us/td/docs/security/firepower/730/Rapid-Release/API/CDO/cloud_delivered_firewall_management_center_rest_api_quick_start_guide/About_The_API_Explorer.html">cdFMC
        API Explorer in CDO</a> for the list of available endpoints. You can
        append the relative API paths provided in the cdFMC API documentation to
        the `/v1/cdfmc` URL to make requests to the cdFMC in your CDO tenant.
        <b>Note:</b> These endpoints will return 404 if the CDO tenant does not
        have a cdFMC provisioned.
      operationId: proxyFmcRequest_4
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Cloud-delivered FMC
      summary: Proxy Request To Cloud-Delivered FMC
      description: >-
        This endpoint proxies the request to the Cloud-Delivered FMC (cdFMC).
        Refer to the <a
        href="https://www.cisco.com/c/en/us/td/docs/security/firepower/730/Rapid-Release/API/CDO/cloud_delivered_firewall_management_center_rest_api_quick_start_guide/About_The_API_Explorer.html">cdFMC
        API Explorer in CDO</a> for the list of available endpoints. You can
        append the relative API paths provided in the cdFMC API documentation to
        the `/v1/cdfmc` URL to make requests to the cdFMC in your CDO tenant.
        <b>Note:</b> These endpoints will return 404 if the CDO tenant does not
        have a cdFMC provisioned.
      operationId: proxyFmcRequest_3
      responses:
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/vpnsessions/{deviceUid}/terminate:
    post:
      tags:
        - Remote Access Monitoring
      summary: Terminate RA VPN Sessions
      description: >-
        This is an asynchronous operation to terminate all RA VPN sessions on a
        device in the CDO tenant. This operation returns a link to a transaction
        object that can be used to monitor the progress of the operation.
      operationId: terminateRaVpnSessionsByDevice
      parameters:
        - name: deviceUid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            termination operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/vpnsessions/{deviceUid}/terminate/{userName}:
    post:
      tags:
        - Remote Access Monitoring
      summary: Terminate User's RA VPN Sessions
      description: >-
        This is an asynchronous operation to terminate all of a user's RA VPN
        sessions on a device in the CDO tenant. This operation returns a link to
        a transaction object that can be used to monitor the progress of the
        operation.
      operationId: terminateRaVpnSessionsByDeviceAndUserName
      parameters:
        - name: deviceUid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userName
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            termination operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/vpnsessions/refresh:
    post:
      tags:
        - Remote Access Monitoring
      summary: Refresh RA VPN Sessions
      description: >-
        This is an asynchronous operation to refresh RA VPN sessions for all
        devices in the CDO tenant.
      operationId: refreshRaVpnSessionsByDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaVpnDeviceInput'
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            refresh operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users:
    get:
      tags:
        - Users
      summary: Get Tenant Users
      description: Get a list of users associated with the CDO tenant.
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
      responses:
        '200':
          description: List of User objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - Users
      summary: Create User in CDO Tenant
      description: >-
        Create a user in the CDO tenant. The user may already exist and have
        access to other tenants, in which case this endpoint adds the user to
        this tenant.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrUpdateInput'
        required: true
      responses:
        '201':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users/{apiUserUid}/apiToken/revoke:
    post:
      tags:
        - Users
      summary: Revoke API-only User's Token
      description: >-
        Revoke API Token of API-only user. If the user ID provided is not that
        of an API-only user, this operation will fail.
      operationId: revokeApiToken
      parameters:
        - name: apiUserUid
          in: path
          description: The unique identifier of the API user in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusInfo'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users/{apiUserUid}/apiToken/generate:
    post:
      tags:
        - Users
      summary: Generate Token for API-only user
      description: >-
        Generate API Token for API-only user. API-only users are used for
        building automations with CDO. If the user ID provided is not that of an
        API-only user, this operation will fail.
      operationId: generateApiToken
      parameters:
        - name: apiUserUid
          in: path
          description: The unique identifier of the API-only user in CDO
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: API Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenInfo'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users/groups:
    get:
      tags:
        - Users
      summary: Get Active Directory Groups
      description: Get a list of active directory groups associated with the CDO tenant.
      operationId: getActiveDirectoryGroups
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
      responses:
        '200':
          description: List of Active Directory Group objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveDirectoryGroupPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - Users
      summary: Create Active Directory Group in CDO Tenant
      description: Create an Active Directory Group in the CDO tenant.
      operationId: createActiveDirectoryGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActiveDirectoryGroupCreateOrUpdateInput'
        required: true
      responses:
        '201':
          description: Active Directory Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveDirectoryGroup'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/token/revoke:
    post:
      tags:
        - Users
      summary: Revoke Token
      description: >-
        Revoke the current token. All subsequent requests with a revoked token
        will fail with 401 Unauthorized errors.
      operationId: revokeToken
      responses:
        '200':
          description: Revoke success
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/search/index:
    post:
      tags:
        - Search
      summary: Rebuild search index
      description: >-
        Initiate Full Indexing on the CDO tenant, to improve accuracy of search
        results. This operation is performed automatically on a schedule by CDO,
        but can be triggered on demand too. This operation is asynchronous, but
        its progress cannot be tracked using CDO's API.
      operationId: initiateFullIndexing
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            indexing operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/policies/asa/accessrules:
    get:
      tags:
        - ASA Access Rules
      summary: Get Access Rules
      description: Get a list of ASA Access Rules.
      operationId: listAccessRules
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of Access Rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRulePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - ASA Access Rules
      summary: Create Access Rule
      description: Create an Access Rule in the CDO tenant.
      operationId: createAccessRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessRuleCreateInput'
        required: true
      responses:
        '201':
          description: CDO Access Rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRule'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/policies/asa/accessgroups:
    get:
      tags:
        - Access Groups
      summary: Get Access Groups
      description: Get a list of ASA Access Groups.
      operationId: listAccessGroups
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of Access Groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroupPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - Access Groups
      summary: Create Access Group
      description: Create an Access Group
      operationId: createAccessGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupCreateInput'
        required: true
      responses:
        '200':
          description: CDO Access Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroup'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/msp/tenants:
    post:
      tags:
        - MSP
      summary: Add Tenant to MSP Portal (API token)
      description: >-
        Add a tenant to the MSP Portal by providing an API token for the tenant.
        Use this endpoint to add a tenant that the user performing the operation
        is not associated with, or a tenant in a different region to that of the
        MSP Portal. Note: This endpoint can only be executed by a super-admin in
        an MSP Portal.
      operationId: addMspTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MspAddTenantInput'
        required: true
      responses:
        '201':
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusInfo'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/msp/tenants/{tenantUid}:
    post:
      tags:
        - MSP
      summary: Add tenant to MSP Portal
      description: >-
        This is an asynchronous operation to add an existing tenant that the
        user making the API call is associated with to the MSP Portal. This
        endpoint will add an API-only user to the tenant, generate an API token
        for the API-only user, and add the tenant to the MSP Portal. Note: this
        endpoint can only be executed by a super-admin in the MSP Portal who is
        also associated with the tenant being added.
      operationId: addTenantToMspPortal
      parameters:
        - name: tenantUid
          in: path
          description: Unique identifier of the tenant to add to the MSP portal.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '409':
          $ref: '#/components/responses/http409Conflict'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/msp/tenants/{tenantUid}/users:
    post:
      tags:
        - MSP
      summary: Add users to CDO tenant in MSP Portal
      description: >-
        This is an asynchronous operation to add a list of users to a tenant
        associated with the MSP Portal. Note: this endpoint cannot be used to
        add API-only users.
      operationId: addUsersToTenantInMspPortal
      parameters:
        - name: tenantUid
          in: path
          description: Unique identifier of the tenant to which the users will be added.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MspAddUsersToTenantInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/msp/tenants/{tenantUid}/users/groups:
    post:
      tags:
        - MSP
      summary: Add Active Directory Groups to CDO tenant in MSP Portal
      description: >-
        This is an asynchronous operation to add a list of Active Directory
        Groups to a tenant associated with the MSP Portal.
      operationId: addActiveDirectoryGroupsToTenantInMspPortal
      parameters:
        - name: tenantUid
          in: path
          description: >-
            Unique identifier of the tenant to which the user groups will be
            added.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ActiveDirectoryGroupCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/msp/tenants/{tenantUid}/mcd:
    post:
      tags:
        - MSP
      summary: Enable Multicloud Defense for CDO tenant in MSP Portal
      description: >-
        This is an asynchronous operation to enable Multicloud Defense for a
        tenant associated with the MSP Portal.
      operationId: enableMulticloudDefenseForTenantInMspPortal
      parameters:
        - name: tenantUid
          in: path
          description: >-
            Unique identifier of the tenant that Multicloud Defense will be
            enabled for.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/msp/tenants/{tenantUid}/cdfmc:
    post:
      tags:
        - MSP
      summary: Provision cdfmc for CDO tenant in MSP Portal
      description: >-
        This is an asynchronous operation to Cloud-Delivered FMC for a tenant
        associated with the MSP Portal.
      operationId: provisionCdFmcForTenantInMspPortal
      parameters:
        - name: tenantUid
          in: path
          description: >-
            Unique identifier of the tenant that Cloud-Delivered FMC
            provisioning will be enabled for.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/msp/tenants/create:
    post:
      tags:
        - MSP
      summary: Create CDO Tenant
      description: >-
        Create a new tenant in CDO from an MSP Portal. This endpoint creates a
        tenant, adds the tenant to the MSP Portal. If the user creating the
        tenant is not an API-only user, the user is also added to the tenant.
        Note: This endpoint can only be executed by a super-admin in an MSP
        Portal. You can create no more than 1 tenant every 30 seconds.
        Additionally, you are limited to creating a total of 100 tenants: please
        speak to support to raise this limit.
      operationId: createTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MspCreateTenantInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            tenant creation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '409':
          $ref: '#/components/responses/http409Conflict'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/managers/mcd:
    post:
      tags:
        - Inventory
      summary: Enable Multicloud Defense
      description: >-
        This is an asynchronous operation to Enable Multicloud Defense for the
        CDO tenant. This operation returns a link to a transaction object that
        can be used to monitor the progress of the operation.
      operationId: enableMulticloudDefense
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '409':
          $ref: '#/components/responses/http409Conflict'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/managers/cdfmc:
    post:
      tags:
        - Inventory
      summary: Provision cdFMC
      description: >-
        This is an asynchronous operation to provision a cloud-delivered FMC in
        a tenant. This operation can only be performed as a super-admin user.
      operationId: provisionCdFmc
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '409':
          $ref: '#/components/responses/http409Conflict'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/ios:
    post:
      tags:
        - Inventory
      summary: Onboard IOS Device
      description: >-
        Onboard a IOS device in the CDO tenant. This operation returns a link to
        a transaction object that can be used to monitor the progress of the
        operation.
      operationId: onboardIosDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IosCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            onboarding operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/ftds:
    post:
      tags:
        - Inventory
      summary: Onboard FTD device.
      description: >-
        This is an asynchronous operation to generate a registration key for a
        cdFMC managed FTD device in the CDO tenant. This operation returns a
        link to a transaction object that can be used to monitor the progress of
        the operation. Onboarding a cdFMC managed FTD device is a two-step
        process: the first step, handled by this operation, creates an FTD
        device with a configure manager string that must be pasted into the FTD
        device's Command-Line Interface. The FTD then uses this information to
        register itself with the CDO tenant.
      operationId: createFtdDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FtdCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            creation operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/ftds/register:
    post:
      tags:
        - Inventory
      summary: Register FTD device to FMC
      description: >-
        Complete registration of an FTD device managed by an FMC to the CDO
        tenant. Call this API endpoint after you have created an FTD and pasted
        the generated CLI output in the FTD. This operation returns a link to a
        transaction object that can be used to monitor the progress of the
        operation.
      operationId: finishOnboardingFtdDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FtdRegistrationInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            creation operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/ftds/cdfmcManaged/{deviceUid}/delete:
    post:
      tags:
        - Inventory
      summary: Delete cdFMC managed FTD device
      description: >-
        This is an asynchronous operation to delete cdFMC managed FTD device in
        the CDO tenant. This operation returns a link to a transaction object
        that can be used to monitor the progress of the operation. The reason
        this operation is asynchronous is because the device is first removed
        from the cdFMC, following which it is deleted from the CDO tenant.
      operationId: deleteCdFmcManagedFtdDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the cdFMC managed FTD device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            deletion operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/duoAdminPanels:
    post:
      tags:
        - Inventory
      summary: Onboard Duo Admin Panel
      description: >-
        Onboard a Duo Admin Panel to the CDO tenant. The credentials to onboard
        the Duo Admin Panel to CDO must be generated by creating an Admin API
        application on https://www.duo.com. This operation returns a link to a
        transaction object that can be used to monitor the progress of the
        operation.
      operationId: createDuoAdminPanel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuoAdminPanelCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            onboarding operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas:
    post:
      tags:
        - Inventory
      summary: Onboard ASA device
      description: >-
        This is an asynchronous operation to onboard an ASA to a CDO tenant.
        This operation returns a link to a transaction object that can be used
        to monitor the progress of the operation.
      operationId: onboardAsaDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsaCreateOrUpdateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            onboarding operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas/{deviceUid}/reconnect:
    post:
      tags:
        - Inventory
      summary: Reconnect ASA device
      description: >-
        This is an asynchronous operation to re-establish the connection between
        an ASA and the CDO cloud. This operation returns a link to a transaction
        object that can be used to monitor the progress of the operation.
      operationId: reconnectAsaDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the ASA device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            reconnecting operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas/{deviceUid}/read:
    post:
      tags:
        - Inventory
      summary: Read ASA device configuration
      description: >-
        This is an asynchronous operation to read the latest configuration on an
        ASA device in to the CDO tenant. This operation returns a link to a
        transaction object that can be used to monitor the progress of the
        operation.
      operationId: readAsaDeviceConfiguration
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the ASA device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            read operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas/{deviceUid}/deploy:
    post:
      tags:
        - Inventory
      summary: Deploy ASA device changes
      description: >-
        This is an asynchronous operation to deploy changes made to an ASA
        device's configuration on CDO to the device. This operation returns a
        link to a transaction object that can be used to monitor the progress of
        the operation.
      operationId: deployAsaDeviceChanges
      parameters:
        - name: deviceUid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            ASA deploy operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas/cli/execute:
    post:
      tags:
        - Inventory
      summary: Execute CLI Command
      description: >-
        This is an asynchronous operation to execute CLI commands in the CDO
        tenant.
      operationId: executeCliCommand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CliCommandInput'
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            execute CLI operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/asas/cli/executeMacro:
    post:
      tags:
        - Inventory
      summary: Execute CLI Macro Command
      description: >-
        This is an asynchronous operation to execute CLI macro command in the
        CDO tenant.
      operationId: executeCliMacro
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CliMacroExecuteInput'
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            execute CLI operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/connectors/sdcs:
    get:
      tags:
        - Connectors
      summary: Get SDCs
      description: Get a list of on-prem SDCs in the CDO tenant.
      operationId: getSdcs
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of SDC objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SdcPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - Connectors
      summary: Create SDC
      description: >-
        This is an asynchronous operation to create an SDC to a CDO tenant. This
        operation returns a link to a transaction object that can be used to
        monitor the progress of the operation.
      operationId: createSdc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SdcCreateInput'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the progress of the
            creation operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/cli/macros:
    get:
      tags:
        - Command Line Interface
      summary: Get CLI Macros
      description: >-
        Get a list of CLI macros. A CLI macro is a fully-formed CLI command
        ready to use, or a template of a CLI command you can modify before you
        run it.
      operationId: getCliMacros
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of CDO CLI macros
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoCliMacroPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - Command Line Interface
      summary: Create CLI Macro
      description: >-
        Create a CLI macro, which is a fully-formed CLI command ready to use or
        a template of a CLI command you can modify before you run it.
      operationId: createCliMacro
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CliMacroCreateInput'
        required: true
      responses:
        '200':
          description: CDO CLI macro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoCliMacro'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/changeRequests:
    get:
      tags:
        - Change Requests
      summary: Get Change Requests
      description: Get a list of Change Requests.
      operationId: getChangeRequests
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
      responses:
        '200':
          description: List of Change Request objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeRequestPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - Change Requests
      summary: Create Change Request
      description: Create a Change Request in the CDO tenant.
      operationId: createChangeRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeRequestCreateInput'
        required: true
      responses:
        '201':
          description: Created change Request object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeRequest'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/ai-assistant/conversations:
    get:
      tags:
        - AI Assistant
      summary: Get Conversations
      description: >-
        Get a list of AI Assistant Conversations. Note: the total number of
        conversations is set to -1 as this information is currently unavailable.
      operationId: getConversations
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of Conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiAssistantConversationPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - AI Assistant
      summary: Ask AI Assistant (New Conversation)
      description: Start a new conversation with the AI Assistant by asking a question.
      operationId: askAiAssistantInNewConversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AiQuestion'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            question.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/ai-assistant/conversations/{conversationUid}:
    get:
      tags:
        - AI Assistant
      summary: Get Conversation
      description: Get an AI Assistant conversation by UID in the CDO tenant.
      operationId: getConversation
      parameters:
        - name: conversationUid
          in: path
          description: The unique identifier of the conversation in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Conversation object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiConversation'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    post:
      tags:
        - AI Assistant
      summary: Ask AI Assistant (Existing Conversation)
      description: >-
        Ask the AI Assistant a question in the context of an existing
        conversation with the AI Assistant.
      operationId: askAiAssistantInExistingConversation
      parameters:
        - name: conversationUid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AiQuestion'
        required: true
      responses:
        '202':
          description: >-
            CDO Transaction object that can be used to track the status of the
            question.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users/groups/{groupUid}:
    get:
      tags:
        - Users
      summary: Get Active Directory Group
      description: Fetch a active directory group by UID in the CDO tenant.
      operationId: getActiveDirectoryGroup
      parameters:
        - name: groupUid
          in: path
          description: The unique identifier of the active directory group in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Active Directory Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveDirectoryGroup'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: Remove Active Directory Group from CDO Tenant
      description: Delete a Active Directory Group by UID in the CDO tenant.
      operationId: deleteActiveDirectoryGroup
      parameters:
        - name: groupUid
          in: path
          description: The unique identifier of the Active Directory Group in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Users
      summary: Modify Active Directory Group
      description: Modify an Active Directory Group by UID.
      operationId: modifyActiveDirectoryGroup
      parameters:
        - name: groupUid
          in: path
          description: The unique identifier of the active directory group in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActiveDirectoryGroupCreateOrUpdateInput'
        required: true
      responses:
        '200':
          description: Active Directory Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveDirectoryGroup'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/settings/tenant:
    get:
      tags:
        - Tenant Management
      summary: Get Tenant Settings
      description: Get the settings for the CDO tenant.
      operationId: getTenantSettings
      responses:
        '200':
          description: Tenant Settings Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantSettings'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Tenant Management
      summary: Modify Tenant Settings
      description: Modify the settings for the CDO tenant.
      operationId: modifyTenantSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantSettings'
        required: true
      responses:
        '200':
          description: Tenant Settings Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantSettings'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/policies/asa/accessrules/{accessRuleUid}:
    get:
      tags:
        - ASA Access Rules
      summary: Get Access Rule
      description: Get a single ASA Access Rule by UUID.
      operationId: fetchAccessRule
      parameters:
        - name: accessRuleUid
          in: path
          description: The unique identifier of the Access Rule in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Access Rule object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRule'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - ASA Access Rules
      summary: Delete Access Rule
      description: Delete Access Rule by UID in the CDO tenant.
      operationId: deleteAccessRule
      parameters:
        - name: accessRuleUid
          in: path
          description: The unique identifier of the Access Rule in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - ASA Access Rules
      summary: Modify ASA Access Rule
      description: Modify an Access Rule in the CDO tenant by UID.
      operationId: modifyAccessRule
      parameters:
        - name: accessRuleUid
          in: path
          description: The unique identifier of the CDO Access Rule.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessRuleUpdateInput'
        required: true
      responses:
        '200':
          description: CDO Access Rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRule'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/policies/asa/accessgroups/{accessGroupUid}:
    get:
      tags:
        - Access Groups
      summary: Get Access Group
      description: Get a single ASA Access Group by UUID.
      operationId: fetchAccessGroup
      parameters:
        - name: accessGroupUid
          in: path
          description: The unique identifier of the Access Group in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Access Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroup'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Access Groups
      summary: Delete Access Group
      description: Delete Access Group by UID in the CDO tenant.
      operationId: deleteAccessGroup
      parameters:
        - name: accessGroupUid
          in: path
          description: The unique identifier of the Access Group in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Access Groups
      summary: Modify ASA Access Group
      description: Modify CDO Access Group by UID.
      operationId: patchAccessGroup
      parameters:
        - name: accessGroupUid
          in: path
          description: The unique identifier of the CDO Access Group.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessGroupUpdateInput'
        required: true
      responses:
        '200':
          description: CDO Access Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroup'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/templates/{templateDeviceUid}:
    get:
      tags:
        - Inventory
      summary: Get Template Device
      description: Get a template device by UID in the CDO tenant.
      operationId: getTemplateDevice
      parameters:
        - name: templateDeviceUid
          in: path
          description: The unique identifier of the template device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Template Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Inventory
      summary: Delete Template Device
      description: Delete a template device by UID in the CDO tenant.
      operationId: deleteTemplateDevice
      parameters:
        - name: templateDeviceUid
          in: path
          description: The unique identifier of the template device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Inventory
      summary: Modify Template Device
      description: Modify a template device in the CDO tenant.
      operationId: modifyTemplateDevice
      parameters:
        - name: templateDeviceUid
          in: path
          description: The unique identifier of the template device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePatchInput'
        required: true
      responses:
        '200':
          description: Template Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/services/{cloudServiceUid}:
    get:
      tags:
        - Inventory
      summary: Get Cloud Service
      description: Get a Cloud Service by UID in the CDO tenant.
      operationId: getCloudService
      parameters:
        - name: cloudServiceUid
          in: path
          description: The unique identifier of the cloud service in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Cloud Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Inventory
      summary: Delete Cloud Service
      description: Delete a Cloud Service by UID in the CDO tenant.
      operationId: deleteCloudService
      parameters:
        - name: cloudServiceUid
          in: path
          description: The unique identifier of the cloud service in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Inventory
      summary: Modify Cloud Service
      description: Modify a Cloud Service by UID in the CDO tenant.
      operationId: modifyCloudService
      parameters:
        - name: cloudServiceUid
          in: path
          description: The unique identifier of the cloud service in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePatchInput'
        required: true
      responses:
        '200':
          description: Cloud Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/managers/{deviceManagerUid}:
    get:
      tags:
        - Inventory
      summary: Get Device Manager
      description: Get a Device Manager by UID in the CDO tenant.
      operationId: getDeviceManager
      parameters:
        - name: deviceManagerUid
          in: path
          description: The unique identifier of the device manager in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Device Manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Inventory
      summary: Delete Device Manager
      description: Delete a Device Manager by UID in the CDO tenant.
      operationId: deleteDeviceManager
      parameters:
        - name: deviceManagerUid
          in: path
          description: The unique identifier of the device manager in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Inventory
      summary: Modify Device Manager
      description: Modify a device manager by UID in the CDO tenant.
      operationId: modifyDeviceManager
      parameters:
        - name: deviceManagerUid
          in: path
          description: The unique identifier of the device manager in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePatchInput'
        required: true
      responses:
        '200':
          description: Device manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices/{deviceUid}:
    get:
      tags:
        - Inventory
      summary: Get Device
      description: Get a device by UID in the CDO tenant
      operationId: getDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Inventory
      summary: Delete Device
      description: >-
        Delete a device by UID in the CDO tenant. On-prem FMCs and
        cloud-delivered FMCs cannot be deleted using this endpoint.
      operationId: deleteDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Inventory
      summary: Modify Device
      description: Modify a device in the CDO tenant
      operationId: modifyDevice
      parameters:
        - name: deviceUid
          in: path
          description: The unique identifier of the device in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicePatchInput'
        required: true
      responses:
        '200':
          description: Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/connectors/sdcs/{sdcUid}:
    get:
      tags:
        - Connectors
      summary: Get SDC
      description: Get a SDC by UID in the CDO tenant.
      operationId: getSdc
      parameters:
        - name: sdcUid
          in: path
          description: The unique identifier of the SDC in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: SDC object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sdc'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Connectors
      summary: Delete SDC
      description: Delete an SDC in the CDO tenant
      operationId: deleteSdc
      parameters:
        - name: sdcUid
          in: path
          description: The unique identifier of the SDC in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Connectors
      summary: Modify SDC
      description: Modify a SDC in the CDO tenant
      operationId: modifySdc
      parameters:
        - name: sdcUid
          in: path
          description: The unique identifier of the SDC in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SdcPatchInput'
        required: true
      responses:
        '200':
          description: SDC object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sdc'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/cli/macros/{macroUid}:
    get:
      tags:
        - Command Line Interface
      summary: Get CLI Macro
      description: Get a CDO CLI Macro by UID.
      operationId: getCliMacro
      parameters:
        - name: macroUid
          in: path
          description: The unique identifier of the CDO CLI macro in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: CDO CLI macro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoCliMacro'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Command Line Interface
      summary: Delete CLI Macro
      description: Delete a CDO CLI Macro by UID.
      operationId: deleteCliMacro
      parameters:
        - name: macroUid
          in: path
          description: The unique identifier of the CDO CLI macro in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: CDO CLI macro
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - Command Line Interface
      summary: Modify CLI Macro
      description: Modify a CDO CLI Macro by UID.
      operationId: modifyCliMacro
      parameters:
        - name: macroUid
          in: path
          description: The unique identifier of the CDO CLI macro in CDO.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CliMacroPatchInput'
        required: true
      responses:
        '200':
          description: CDO CLI macro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoCliMacro'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/vpnsessions:
    get:
      tags:
        - Remote Access Monitoring
      summary: Get RA VPN Sessions
      description: Get a list of RA VPN sessions.
      operationId: getRaVpnSessions
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of RA VPN Sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaVpnSessionPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/vpnsessions/{raVpnSessionUid}:
    get:
      tags:
        - Remote Access Monitoring
      summary: Get RA VPN Session
      description: Get a RA VPN session by UID in the CDO tenant.
      operationId: getRaVpnSession
      parameters:
        - name: raVpnSessionUid
          in: path
          description: The unique identifier of the RA VPN session in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: RA VPN Session object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RaVpnSession'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/users/{userUid}:
    get:
      tags:
        - Users
      summary: Get Tenant User
      description: >-
        Fetch a user by UID in the CDO tenant. This will only return 200
        responses for users associated with the CDO tenant.
      operationId: getUser
      parameters:
        - name: userUid
          in: path
          description: The unique identifier of the user in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
      summary: Remove User from CDO Tenant
      description: >-
        Delete a User by UID in the CDO tenant. If the user is associated with
        multiple tenants, they will continue to have access to every other
        tenant.
      operationId: deleteUser
      parameters:
        - name: userUid
          in: path
          description: The unique identifier of the user in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/transactions/{transactionUid}:
    get:
      tags:
        - Transactions
      summary: Get Transaction
      description: >-
        Get information of an in-progress CDO transaction. A CDO transaction is
        an entity used to monitor progress of, and provide feedback on,
        long-running operations. All asynchronous operations in CDO's API create
        CDO transactions.
      operationId: getTransaction
      parameters:
        - name: transactionUid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: >-
            CDO Transaction that has completed, either successfully or
            unsuccessfully. Note: failed CDO Transactions do not roll back.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '202':
          description: CDO Transaction that is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTransaction'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/token:
    get:
      tags:
        - Users
      summary: Get Token Info
      description: >-
        Fetch information on the current token. Each CDO token is associated
        with a specific user and a specific tenant. A token can only be used to
        perform operations on the tenant it is associated with.
      operationId: getToken
      responses:
        '200':
          description: Token information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoTokenInfo'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/tenants:
    get:
      tags:
        - Tenant Management
      summary: Get Tenants
      description: Get a list of tenants with which the CDO user is associated.
      operationId: getTenants
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
      responses:
        '200':
          description: List of Tenant Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/tenants/{tenantUid}:
    get:
      tags:
        - Tenant Management
      summary: Get Tenant
      description: >-
        Fetch a tenant by UID in CDO. This will return a 200 response only if
        the user is associated with the tenant.
      operationId: getTenant
      parameters:
        - name: tenantUid
          in: path
          description: The unique identifier of the tenant in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tenant Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/search:
    get:
      tags:
        - Search
      summary: Search
      description: >-
        Search for devices, services, managers, objects and policies across the
        CDO tenant.
      operationId: search
      parameters:
        - name: q
          in: query
          description: >-
            This can be any non-empty string, and represents the search
            criteria. Spaces are allowed, but must be URL encoded.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResult'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/regions:
    get:
      tags:
        - Meta
      summary: Get CDO Regions
      description: Get the list of regions that CDO is deployed in.
      operationId: getRegions
      responses:
        '200':
          description: List of CDO regions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoRegionList'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/mfaevents:
    get:
      tags:
        - Remote Access Monitoring
      summary: Get MFA Events
      description: Get a list of MFA events.
      operationId: getMfaEvents
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of MFA events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaEventPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/mfaevents/{mfaEventUid}:
    get:
      tags:
        - Remote Access Monitoring
      summary: Get MFA Event
      description: Get a MFA event by UID in the CDO tenant.
      operationId: getMfaEvent
      parameters:
        - name: mfaEventUid
          in: path
          description: The unique identifier of the MFA event in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: MFA Event object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaEvent'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/meta:
    get:
      tags:
        - Meta
      summary: Get Meta information
      description: >-
        Get Meta information about CDO, including the IP addresses of CDO
        services.
      operationId: getMeta
      responses:
        '200':
          description: Meta information about CDO.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meta'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/inventory/templates:
    get:
      tags:
        - Inventory
      summary: Get Template Devices
      description: Get a list of template devices in the CDO tenant.
      operationId: getTemplateDevices
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of Template Devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/services:
    get:
      tags:
        - Inventory
      summary: Get Cloud Services
      description: Get a list of Cloud Services in the CDO tenant.
      operationId: getCloudServices
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of Cloud Services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/managers:
    get:
      tags:
        - Inventory
      summary: Get Device Managers
      description: >-
        Fetch a list of Device Managers (on-prem FMCs and cloud-delivered FMCs)
        in the CDO tenant.
      operationId: getDeviceManagers
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of Device Manager objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/managers/{fmcUid}/health/metrics:
    get:
      tags:
        - Inventory
      summary: Get health metrics on devices managed by the FMC (cdFMC only)
      description: >-
        Get metrics that indicate the current health of all devices managed by
        the cdFMC. Note: For specific health metrics to be available for a given
        device under management of the cdFMC, the health policy for that device
        should be configured to collect those metrics. For example, CPU metrics
        will be unavailable for a device if the health policy applied to that
        device has CPU metric collection turned off. Note: This endpoint can
        only be queried once every minute.
      operationId: getFmcHealth
      parameters:
        - name: fmcUid
          in: path
          description: The unique identifier of the FMC in CDO.
          required: true
          schema:
            type: string
            format: uuid
        - name: timeRange
          in: query
          description: The time range for which results should be retrieved.
          required: false
          schema:
            type: string
            enum:
              - 5m
              - 15m
              - 30m
              - 1h
      responses:
        '200':
          description: FMC health metrics
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FmcHealthMetrics'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/inventory/devices:
    get:
      tags:
        - Inventory
      summary: Get Devices
      description: Get a list of devices in the CDO tenant.
      operationId: getDevices
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of Device objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/features:
    get:
      tags:
        - Tenant Management
      summary: Get Feature Flags
      description: Get the feature flags enabled in the CDO tenant.
      operationId: getFeatureFlags
      responses:
        '200':
          description: Set of feature flags that are enabled for the user's tenant.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - feature-1
                - feature-2
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/cli/results:
    get:
      tags:
        - Command Line Interface
      summary: Get CLI Results
      description: >-
        Get a list of results from command lines executed using the [CDO Command
        Line Interface
        (CLI)](https://docs.defenseorchestrator.com/c-using-the-cdo-command-line-interface.html).
        These commands can be executed using either the CDO UI or the API.
      operationId: getCliResults
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of CDO CLI execution results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoCliResultPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/cli/results/{cliResultUid}:
    get:
      tags:
        - Command Line Interface
      summary: Get CLI Result
      description: >-
        Get the result of a command executed using the CDO Command Line
        Interface (CLI) by UID.
      operationId: getCliResult
      parameters:
        - name: cliResultUid
          in: path
          description: The unique identifier of the CDO CLI result in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: CDO CLI result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdoCliResult'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/changelogs:
    get:
      tags:
        - Changelogs
      summary: Get Change Logs
      description: Get a list of Change Logs in the CDO tenant.
      operationId: getChangelogs
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: searchText
          in: query
          description: >-
            The searchText parameter serves as a flexible search option that
            allows for text-based filtering across all fields of the Change Log
            object. This parameter can be used independently to search for
            entries containing the specified text, or in combination with the q
            query parameter for more targeted results. When used with q, the
            search conditions of searchText are logically ANDed with the q
            parameter's criteria, ensuring that the returned entries satisfy
            both sets of conditions.
          required: false
          schema:
            type: string
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
      responses:
        '200':
          description: List of Change Log objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangelogPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/changelogs/{changelogUid}:
    get:
      tags:
        - Changelogs
      summary: Get Change Log
      description: Get a specific Change Log object by UID in the CDO tenant.
      operationId: getChangelog
      parameters:
        - name: changelogUid
          in: path
          description: The unique identifier of the changelog in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Change Log objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Changelog'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/changeRequests/{changeRequestUid}:
    get:
      tags:
        - Change Requests
      summary: Get Change Request
      description: Get a Change Request by UID in the CDO tenant.
      operationId: getChangeRequest
      parameters:
        - name: changeRequestUid
          in: path
          description: The unique identifier of the Change Request in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Change Request object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeRequest'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          $ref: '#/components/responses/http404NotFound'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Change Requests
      summary: Delete Change Request
      description: Delete a Change Request by UID in the CDO tenant.
      operationId: deleteChangeRequest
      parameters:
        - name: changeRequestUid
          in: path
          description: The unique identifier of the Change Request in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/auditlogs:
    get:
      tags:
        - Audit Logs
      summary: Get Audit Logs
      description: Get a list of Audit Logs.
      operationId: getAuditLogs
      parameters:
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 0
            type: string
            default: '50'
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: searchText
          in: query
          description: >-
            The searchText parameter serves as a flexible search option that
            allows for text-based filtering across the username fields of the
            Audit Log object. This parameter can be used independently to search
            for entries containing the specified text, or in combination with
            the q query parameter for more targeted results. When used with q,
            the search conditions of searchText are logically ANDed with the q
            parameter's criteria, ensuring that the returned entries satisfy
            both sets of conditions.
          required: false
          schema:
            type: string
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query.
          required: false
          schema:
            type: string
          example: fieldName:fieldValue
        - name: sort
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: name:DESC
      responses:
        '200':
          description: List of Audit Logs objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogPage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '405':
          $ref: '#/components/responses/http405MethodNotAllowed'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /v1/ai-assistant/conversations/{conversationUid}/messages:
    get:
      tags:
        - AI Assistant
      summary: Get Messages
      description: >-
        Get a list of messages in a single AI Assistant conversation. Note: this
        endpoint is not paginated, and returns the full list of messages.
      operationId: getAiAssistantConversationMessages
      parameters:
        - name: conversationUid
          in: path
          description: The unique identifier of the conversation in CDO.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of Conversation Messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AiMessage'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
      security:
        - bearerAuth: []
  /.well-known/jwks.json:
    get:
      tags:
        - Meta
      summary: Fetch JSON Web Key Set
      description: >-
        Retrieves the JSON Web Key Set (JWKS), which is a set of keys containing
        the public keys used to verify any JSON Web Token (JWT) issued by the
        Authorization Server and signed using the RS256 signing algorithm. Note:
        Verification of the token using a JSON Web Key does not guarantee
        validity due to the possibility of revocation.
      operationId: getJwks
      responses:
        '200':
          description: The JSON Web Key Set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwkSet'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/objects:
    get:
      tags:
        - Object Management
      summary: Get Objects
      description: Get objects in the CDO tenant.
      operationId: getObjects
      parameters:
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query. Possible fields to search by are name, content.
          required: false
          schema:
            type: string
          example: content:*2.2.* AND name:Lab1
        - name: includeOverrides
          in: query
          description: >-
            If enabled, the search will also include results from override
            objects.
          required: false
          schema:
            type: boolean
            default: false
        - name: offset
          in: query
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          required: false
          schema:
            minimum: 0
            type: string
            default: '0'
        - name: limit
          in: query
          description: The number of results to retrieve.
          required: false
          schema:
            maximum: 200
            minimum: 1
            type: string
            default: '50'
        - name: sortBy
          in: query
          description: The fields to sort results by.
          required: false
          schema:
            type: string
          example: name:DESC
      responses:
        '200':
          description: A paginated view of the CDO objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
    post:
      tags:
        - Object Management
      summary: Create Object
      description: Create an object in the CDO tenant.
      operationId: createObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequest'
        required: true
      responses:
        '201':
          description: A descriptive representation of the created CDO object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/objects/{uid}/targets:
    post:
      tags:
        - Object Management
      summary: Create Targets
      description: Create targets for an object in the CDO tenant.
      operationId: createTargets
      parameters:
        - name: uid
          in: path
          description: >-
            the unique identifier of the object for which the targets are being
            added to.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetsRequest'
        required: true
      responses:
        '200':
          description: No content
          content:
            '*/*':
              schema:
                type: object
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          description: Not found
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
    delete:
      tags:
        - Object Management
      summary: Delete Targets
      description: Delete targets from an object in the CDO tenant.
      operationId: deleteTargets
      parameters:
        - name: uid
          in: path
          description: >-
            the unique identifier of the object for which the targets are being
            removed from.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        - name: targetUuids
          in: query
          description: The list of UIDs of the targets being removed.
          required: true
          schema:
            type: array
            items:
              type: string
          example: >-
            [7131daad-e813-4b8f-8f42-be1e241e8cdb,
            yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy]
      responses:
        '204':
          description: No content
          content:
            '*/*':
              schema:
                type: object
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '404':
          description: Not found
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/objects/{uid}:
    get:
      tags:
        - Object Management
      summary: Get Object
      description: Gets an object in the CDO tenant
      operationId: getObject
      parameters:
        - name: uid
          in: path
          description: The unique identifier of the object being retrieved.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        - name: fields
          in: query
          description: >-
            The scope of the fields to be retrieved. One of ["@basic",
            "@detailed"]. Defaults to "@basic".
          required: false
          schema:
            type: string
          example: '@detailed'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
    delete:
      tags:
        - Object Management
      summary: Delete Object
      description: Delete an object in the CDO tenant
      operationId: deleteObject
      parameters:
        - name: uid
          in: path
          description: The unique identifier of the object being deleted.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
      responses:
        '204':
          description: No content
          content:
            '*/*':
              schema:
                type: object
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
    patch:
      tags:
        - Object Management
      summary: Modify Object
      description: Modify an object in the CDO tenant
      operationId: modifyObject
      parameters:
        - name: uid
          in: path
          description: The unique identifier of the object being updated.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
        required: true
      responses:
        '200':
          description: A descriptive representation of the updated CDO object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/objects/{uid}/usage:
    get:
      tags:
        - Object Management
      summary: Get Object Usages
      description: Get usages of an object in the CDO tenant.
      operationId: getObjectUsages
      parameters:
        - name: uid
          in: path
          description: The unique identifier of the object to retrieve usages for.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
      responses:
        '200':
          description: A descriptive representation of the created CDO object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferenceInfo'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/objects/{uid}/duplicates:
    get:
      tags:
        - Object Management
      summary: Get Duplicate Objects
      description: Get objects in the CDO tenant that are duplicates of the given object.
      operationId: getDuplicateObjects
      parameters:
        - name: uid
          in: path
          description: The unique identifier of the object to retrieve duplicates for.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        - name: targetUid
          in: query
          description: >-
            the unique identifier of the target to restrict the duplicate search
            to.
          required: true
          schema:
            type: string
            format: uuid
          example: 6131daad-e813-4b8f-8f42-be1e241e8cdb
      responses:
        '200':
          description: Duplicates of the object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DuplicateGroupDto'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/objects/overrides/{uid}:
    get:
      tags:
        - Object Management
      summary: Get Override Object With Values For Specific Target
      description: Gets an object in the CDO tenant with values for specific target uid
      operationId: getOverrideObject
      parameters:
        - name: uid
          in: path
          description: The unique identifier of the object being retrieved.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        - name: targetUid
          in: query
          description: The target UID to calculate values for.
          required: true
          schema:
            type: string
            format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectResponse'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
  /v1/objects/issues-count:
    get:
      tags:
        - Object Management
      summary: Get Issues Count
      description: Get issues count in the CDO tenant.
      operationId: getIssuesCount
      parameters:
        - name: q
          in: query
          description: >-
            The query to execute. Use the Lucene Query Syntax to construct your
            query. Possible fields to search by are name, content.
          required: false
          schema:
            type: string
          example: content:*2.2.* AND name:Lab1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuesCount'
        '400':
          $ref: '#/components/responses/http400BadRequest'
        '401':
          $ref: '#/components/responses/http401Unauthorised'
        '403':
          $ref: '#/components/responses/http403Forbidden'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonApiError'
components:
  schemas:
    CdoTransaction:
      type: object
      properties:
        tenantUid:
          type: string
          description: >-
            The unique identifier of the tenant that asynchronous transaction
            triggered on.
          format: uuid
          example: 5131daad-e813-4b8f-8f42-be1e241e2cdb
        sortKey:
          type: string
          description: DynamoDB sort key to provide us with efficient query capabilities.
          example: |2
              `transactionUid`
              `operation:<transactionType>#entityUid:<entityUid>`
              `cdoTransactionStatus:<cdoTransactionStatus>`
        transactionUid:
          type: string
          description: The unique identifier of the asynchronous transaction triggered.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        entityUid:
          type: string
          description: >-
            The unique identifier of the entity that the asynchronous
            transaction is triggered on.
          format: uuid
          example: f5f660d4-4b81-4374-877d-fbc4bee894e2
        entityUrl:
          type: string
          description: >-
            A URL to access the entity that the asynchronous transaction is
            triggered on.
          example: >-
            https://edge.us.cdo.cisco.com/platform/public-api/v1/inventory/devices/f5f660d4-4b81-4374-877d-fbc4bee894e2
        transactionPollingUrl:
          type: string
          description: The URL to poll to track the progress of the transaction.
          example: >-
            https://edge.us.cdo.cisco.com/platform/public-api/v1/transactions/7131daad-e813-4b8f-8f42-be1e241e8cdb
        submissionTime:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            transaction was triggered
          format: date-time
          example: '2023-12-13T05:15:44Z'
        lastUpdatedTime:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            transaction status was last updated
          format: date-time
          example: '2023-12-13T08:15:44Z'
        transactionType:
          $ref: '#/components/schemas/CdoTransactionType'
        cdoTransactionStatus:
          $ref: '#/components/schemas/CdoTransactionStatus'
        transactionDetails:
          type: object
          additionalProperties:
            type: string
            description: Transaction details, if any
          description: Transaction details, if any
        errorMessage:
          type: string
          description: Transaction error message, if any
        errorDetails:
          type: object
          additionalProperties:
            type: string
            description: Transaction error details, if any
          description: Transaction error details, if any
        expireAt:
          type: integer
          description: TTL attribute detailing the expiry time this item should be deleted
          format: int64
    CdoTransactionStatus:
      type: string
      description: The status of the CDO transaction
      example: IN_PROGRESS
      enum:
        - PENDING
        - IN_PROGRESS
        - DONE
        - ERROR
    CdoTransactionType:
      type: string
      description: the type of the transaction
      example: ONBOARD_ASA
      enum:
        - ONBOARD_ASA
        - ONBOARD_IOS
        - ONBOARD_DUO_ADMIN_PANEL
        - CREATE_FTD
        - REGISTER_FTD
        - DELETE_CDFMC_MANAGED_FTD
        - RECONNECT_ASA
        - READ_ASA
        - EXECUTE_CLI_COMMAND
        - DEPLOY_ASA_DEVICE_CHANGES
        - INDEX_TENANT
        - TERMINATE_DEVICE_RA_VPN_SESSIONS
        - REFRESH_RA_VPN_SESSIONS
        - TERMINATE_USER_RA_VPN_SESSIONS
        - CREATE_SDC
        - SEND_AI_ASSISTANT_MESSAGE
        - MSP_CREATE_TENANT
        - MSP_ADD_USERS_TO_TENANT
        - MSP_ADD_USER_GROUPS_TO_TENANT
        - MSP_ADD_EXISTING_TENANT
        - MSP_ENABLE_MULTICLOUD_DEFENSE
        - ENABLE_MULTICLOUD_DEFENSE
        - MSP_PROVISION_CDFMC
        - PROVISION_CD_FMC
    RaVpnDeviceInput:
      required:
        - deviceUids
      type: object
      properties:
        deviceUids:
          type: array
          description: >-
            List of UIDs of the devices to refresh RA VPN sessions for. Each of
            these devices has to be an RA VPN headend (this is indicated by the
            `deviceRole` field in the device object being set to
            `RA_VPN_HEADEND`).
          items:
            type: string
            description: >-
              List of UIDs of the devices to refresh RA VPN sessions for. Each
              of these devices has to be an RA VPN headend (this is indicated by
              the `deviceRole` field in the device object being set to
              `RA_VPN_HEADEND`).
    UserCreateOrUpdateInput:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the user in CDO.
          example: myusername@cisco.com
        role:
          type: string
          description: The user role in CDO.
          example: ROLE_ADMIN
        apiOnlyUser:
          type: boolean
          description: >-
            Whether the user is API-only, an API-only user cannot access CDO in
            the UI.
          example: false
          default: false
    User:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the user in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the user in CDO.
          example: myusername@cisco.com
        roles:
          type: array
          description: Roles associated with this user in CDO.
          example: '[ROLE_ADMIN]'
          items:
            $ref: '#/components/schemas/UserRole'
        apiOnlyUser:
          type: boolean
          description: >-
            Whether the user is API-only, an API-only user cannot access CDO in
            the UI.
          example: false
        lastSuccessfulLogin:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) that
            indicate the last time the user successfully login CDO.
          format: date-time
          example: '2023-12-13T05:15:44Z'
    UserRole:
      type: string
      description: >-
        The role of the user this token belongs to. The user can be API-only or
        a human.
      enum:
        - ROLE_ADMIN
        - ROLE_SUPER_ADMIN
        - ROLE_READ_ONLY
        - ROLE_DEPLOY_ONLY
        - ROLE_EDIT_ONLY
        - ROLE_VPN_SESSIONS_MANAGER
        - ROLE_FWAAS
    StatusInfo:
      type: object
      properties:
        status:
          type: string
          description: The Status of the request.
          example: OK
    ApiTokenInfo:
      type: object
      properties:
        apiToken:
          type: string
          description: The API Access Token.
          example: FaKE-toKeN
    ActiveDirectoryGroupCreateOrUpdateInput:
      required:
        - groupIdentifier
        - issuerUrl
        - name
      type: object
      properties:
        name:
          type: string
          description: >-
            The name of the Active Directory Group. CDO does not support special
            characters for this field.
          example: myusername
        role:
          type: string
          description: >-
            This determines the role for all the users included in this Active
            Directory Group.
          example: ROLE_ADMIN
        groupIdentifier:
          type: string
          description: >-
            The unique identifier of the Active Directory Group in your Identity
            Provider (IdP).
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        issuerUrl:
          type: string
          description: >-
            The Identity Provider (IdP) URL, which Cisco Defense Orchestrator
            will use to validate SAML assertions during the sign-in process.
          example: https://access.example.com/saml2/idp/metadata.php
        notes:
          type: string
          description: Any notes that are applicable to this Active Directory Group.
          example: This is an example note on the Active Directory Group.
    ActiveDirectoryGroup:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the Active Directory Group in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: >-
            The name of the Active Directory Group. CDO does not support special
            characters for this field.
          example: myusername
        role:
          $ref: '#/components/schemas/UserRole'
        groupIdentifier:
          type: string
          description: >-
            The unique identifier of the Active Directory Group in your Identity
            Provider (IdP).
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        issuerUrl:
          type: string
          description: >-
            The Identity Provider (IdP) URL, which Cisco Defense Orchestrator
            will use to validate SAML assertions during the sign-in process.
          example: https://access.example.com/saml2/idp/metadata.php
        notes:
          type: string
          description: Any notes that are applicable to this Active Directory Group.
          example: This is an example note on the Active Directory Group.
    AccessRuleCreateInput:
      required:
        - accessGroupUid
        - entityUid
        - index
      type: object
      properties:
        accessGroupUid:
          type: string
          description: >-
            The unique identifier of the Access Group associated with the Access
            Rule.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        entityUid:
          type: string
          description: >-
            The unique identifier of the device/manager associated with the
            Access Rule. Points to the shared Access Group in the case of a
            shared Access Rule being created.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        index:
          type: integer
          description: >-
            The position of the Access Rule in the orded list of rules in an
            Access Group.
          format: int32
          example: 1
        ruleAction:
          type: string
          description: The rule's action.
          example: PERMIT
          enum:
            - PERMIT
            - DENY
        protocol:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourcePort:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationPort:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourceNetwork:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationNetwork:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourceDynamicObject:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationDynamicObject:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        logSettings:
          $ref: '#/components/schemas/LogSettings'
        ruleTimeRange:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        remark:
          type: string
          description: >-
            A human-readable remark. This is typically used to describe the
            intentions of the access rule.
        activeRule:
          type: boolean
    AccessRuleDetailsContent:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name
          example: any
        uid:
          type: string
          description: The unique identifier.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        type:
          type: string
          description: The type of the policy object.
          example: NETWORK_OBJECT
          enum:
            - NETWORK_OBJECT
            - IPV4_ADDRESS_POOL
            - IPV6_ADDRESS_POOL
            - NETWORK_GROUP
            - SERVICE_OBJECT
            - SERVICE_TCP_OBJECT
            - SERVICE_UDP_OBJECT
            - SERVICE_ICMPV4_OBJECT
            - SERVICE_ICMPV6_OBJECT
            - SERVICE_PROTOCOL_OBJECT
            - SERVICE_GROUP
            - SERVICE_FTD_GROUP
            - PROTOCOL_GROUP
            - ICMP_GROUP
            - URL_OBJECT
            - URL_GROUP
            - APPLICATION_FILTER_OBJECT
        elements:
          type: array
          description: The list of elements.
          items:
            type: string
            description: The list of elements.
      description: The rule time range.
    LogSettings:
      required:
        - level
      type: object
      properties:
        level:
          type: string
          description: The level
          example: '3'
        interval:
          type: integer
          description: The interval
          format: int32
          example: 1
      description: The set of of interface and direction pairs or global resource.
    AccessRule:
      required:
        - accessGroupUid
        - entityUid
        - index
        - ruleAction
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of Access Rule in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        accessGroupUid:
          type: string
          description: >-
            The unique identifier of the Access Group associated with the Access
            Rule.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        sharedAccessGroupUid:
          type: string
          description: >-
            Optional unique identifier for the shared Access Group associated
            with a shared Access Rule.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        entityUid:
          type: string
          description: >-
            The unique identifier of the device/manager associated with the
            Access Rule. Points to shared Access Group in case of shared Rule
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        index:
          type: integer
          description: Access rule index position in Access Group ordered rule list.
          format: int32
          example: 1
        ruleType:
          type: string
          description: The L3 level rule type. L3, L7 or CONTENT_FILTERING. Defaults to L3.
          example: L3
        ruleAction:
          type: string
          description: 'The rule''s action: PERMIT or DENY.'
          example: PERMIT
          enum:
            - PERMIT
            - DENY
        protocol:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourcePort:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationPort:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourceNetwork:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationNetwork:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourceDynamicObject:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationDynamicObject:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        logSettings:
          $ref: '#/components/schemas/LogSettings'
        ruleTimeRange:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        remark:
          type: string
          description: A remark.
        issue:
          type: string
          description: Issues. SHADOWED or null.
          example: SHADOWED
        isActiveRule:
          type: boolean
          description: Is active. True by default
          example: false
        createdDate:
          type: string
          description: >-
            The time (in UTC) at which Access Rule was created, represented
            using the RFC-3339 standard.
          format: date-time
          example: '2023-12-13T05:15:44Z'
        updatedDate:
          type: string
          description: >-
            The time (in UTC) at which Access Rule was updated, represented
            using the RFC-3339 standard.
          format: date-time
          example: '2023-12-13T05:15:44Z'
    AccessGroupCreateInput:
      required:
        - entityUid
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the Access Group.
          example: Access-Group1
        entityUid:
          type: string
          description: >-
            The unique identifier of the device/manager associated with the
            Access Group. When creating shared Access Group, entityUid
            represents device that contains source Access Group 
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        resources:
          uniqueItems: true
          type: array
          description: >-
            The set of of interface and direction pairs or global resource. 
            Resource is an attribute applicable only to devices and will not be
            propagated to appliedTo devices if Access Group is shared.
          example: >-
            Interface resource: [{"interfaceName": "outside","direction":
            "OUTBOUND"] or Global resource: [{"global": true}]
          items:
            type: object
            additionalProperties:
              type: object
              description: >-
                The set of of interface and direction pairs or global resource. 
                Resource is an attribute applicable only to devices and will not
                be propagated to appliedTo devices if Access Group is shared.
              example: >-
                Interface resource: [{"interfaceName": "outside","direction":
                "OUTBOUND"] or Global resource: [{"global": true}]
            description: >-
              The set of of interface and direction pairs or global resource. 
              Resource is an attribute applicable only to devices and will not
              be propagated to appliedTo devices if Access Group is shared.
            example: >-
              Interface resource: [{"interfaceName": "outside","direction":
              "OUTBOUND"] or Global resource: [{"global": true}]
        isShared:
          type: boolean
          description: >-
            The flag that identifies if access group is shared.  If set to true,
            appliedTo field should be provided as well and entityUid should
            point to source device.
          example: false
        appliedTo:
          uniqueItems: true
          type: array
          description: >-
            The set of device unique identifiers to which this Access Group was
            applied. Only valid for shared access group.
          example: '[deviceUid1, deviceUid2, ..., deviceUidN]'
          items:
            type: string
            description: >-
              The set of device unique identifiers to which this Access Group
              was applied. Only valid for shared access group.
            format: uuid
    AccessGroup:
      required:
        - entityUid
        - name
        - sharedAccessGroupUid
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of Access Group in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: >-
            The name of Access Group in CDO. Access Group names are unique in
            CDO.
          example: my-example-access-group
        entityUid:
          type: string
          description: >-
            The unique identifier of the device/manager associated with the
            Access Group.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        sharedAccessGroupUid:
          type: string
          description: >-
            The unique identifier of the shared access group manager associated
            with the Access Group.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        isShared:
          type: boolean
          description: The flag that identifies if access group is shared.
          example: false
        appliedTo:
          uniqueItems: true
          type: array
          description: >-
            The set of device unique identifiers to which this Access Group was
            applied. Only valid for shared access group.
          example: '[deviceUid1, deviceUid2, ..., deviceUidN]'
          items:
            type: string
            description: >-
              The set of device unique identifiers to which this Access Group
              was applied. Only valid for shared access group.
            format: uuid
        resources:
          uniqueItems: true
          type: array
          description: The set of of interface and direction pairs or global resource.
          example: >-
            Interface resource: [{"interfaceName": "outside"},{"direction":
            "OUTBOUND"}] or Global resource: [{"global": true}]
          items:
            type: object
            additionalProperties:
              type: object
              description: The set of of interface and direction pairs or global resource.
              example: >-
                Interface resource: [{"interfaceName": "outside"},{"direction":
                "OUTBOUND"}] or Global resource: [{"global": true}]
            description: The set of of interface and direction pairs or global resource.
            example: >-
              Interface resource: [{"interfaceName": "outside"},{"direction":
              "OUTBOUND"}] or Global resource: [{"global": true}]
        createdDate:
          type: string
          description: >-
            The time (in UTC) at which Access Group was created, represented
            using the RFC-3339 standard.
          format: date-time
          example: '2023-12-13T05:15:44Z'
        updatedDate:
          type: string
          description: >-
            The time (in UTC) at which Access Group was updated, represented
            using the RFC-3339 standard.
          format: date-time
          example: '2023-12-13T05:15:44Z'
    MspAddTenantInput:
      required:
        - apiToken
      type: object
      properties:
        apiToken:
          type: string
          description: The Tenant API Access Token.
          example: FaKE-toKeN
    MspAddUsersToTenantInput:
      required:
        - users
      type: object
      properties:
        users:
          type: array
          description: The list of users to be added to the tenant.
          example: '[username: burak@cisco.com, role: ROLE_ADMIN]'
          items:
            $ref: '#/components/schemas/UserInput'
    UserInput:
      required:
        - role
        - username
      type: object
      properties:
        username:
          type: string
          description: The name of the user in CDO. This must be a valid e-mail address.
        role:
          $ref: '#/components/schemas/UserRole'
      description: The list of users to be added to the tenant.
      example: '[username: burak@cisco.com, role: ROLE_ADMIN]'
    MspCreateTenantInput:
      required:
        - tenantName
      type: object
      properties:
        tenantName:
          pattern: '[a-zA-Z0-9-_]{1,50}'
          type: string
          description: >-
            The name of the tenant to create. The tenant name can only contain
            alphabets, numbers, -, and _, and is limited to 50 characters.
          example: acme-inc-usa
        displayName:
          type: string
          description: >-
            A human-readable display name of the tenant to create. Use this
            field only if you want the display name to be different from the
            name of the tenant.
          example: Acme Inc., United States offices
    IosCreateOrUpdateInput:
      required:
        - connectorName
        - name
        - password
        - username
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My IOS
        deviceAddress:
          type: string
          description: >-
            The address of the device to onboard, specified in the format
            `host:port`.
          example: 10.2.2.5:443
        username:
          type: string
          description: The username used to authenticate with the device.
          example: admin
        password:
          type: string
          description: The password used to authenticate with the device.
          example: Cisco@23
        ignoreCertificate:
          type: boolean
          description: >-
            Set this attribute to true if you do not want CDO to validate the
            certificate of this device before onboarding.
          example: false
          default: false
        connectorName:
          type: string
          description: >-
            The name of the Secure Device Connector (SDC) that will be used to
            communicate with the device.
          example: SDC-1
        labels:
          $ref: '#/components/schemas/Labels'
    Labels:
      type: object
      properties:
        groupedLabels:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: Groups of labels used to identify/tag CDO entities.
            example:
              group1:
                - label-1
                - label-2
              group2:
                - label-1
                - label-2
            items:
              type: string
              description: Groups of labels used to identify/tag CDO entities.
              example: '{"group1":["label-1","label-2"],"group2":["label-1","label-2"]}'
          description: Groups of labels used to identify/tag CDO entities.
          example:
            group1:
              - label-1
              - label-2
            group2:
              - label-1
              - label-2
        ungroupedLabels:
          uniqueItems: true
          type: array
          description: Set of free-labels used to identify/tag CDO entities.
          example:
            - label-a
            - label-b
            - label-c
          items:
            type: string
            description: Set of free-labels used to identify/tag CDO entities.
            example: '["label-a","label-b","label-c"]'
      description: Labels used to identify/tag CDO entities.
    FtdCreateOrUpdateInput:
      required:
        - deviceType
        - fmcAccessPolicyUid
        - licenses
        - name
      type: object
      properties:
        name:
          type: string
          description: Specify a human-readable name for the device.
          example: My FTD
        licenses:
          uniqueItems: true
          type: array
          description: Specify a set of licenses to apply to the device.
          example: '[BASE]'
          items:
            type: string
            description: Specify a set of licenses to apply to the device.
            example: '[BASE]'
            enum:
              - BASE
              - CARRIER
              - THREAT
              - MALWARE
              - URLFilter
              - BASE
              - CARRIER
              - MALWARE
              - THREAT
              - URLFilter
          enum:
            - BASE
            - CARRIER
            - MALWARE
            - THREAT
            - URLFilter
        virtual:
          type: boolean
          description: Indicate whether the FTD is a virtual or a physical device.
          example: true
        fmcAccessPolicyUid:
          type: string
          description: >-
            Specify the unique identifier of the FMC access policy to apply to
            this device.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        performanceTier:
          type: string
          description: >-
            Specify the performance tier of the FTDv (required only if isVirtual
            is set to true)
          enum:
            - FTDv5
            - FTDv10
            - FTDv20
            - FTDv30
            - FTDv50
            - FTDv100
            - FTDv
        labels:
          $ref: '#/components/schemas/Labels'
        deviceType:
          type: string
          description: >-
            Specify the type of the FTD. The only supported type of FTD is
            CDFMC_MANAGED_FTD
          enum:
            - CDFMC_MANAGED_FTD
    FtdRegistrationInput:
      required:
        - ftdUid
      type: object
      properties:
        ftdUid:
          type: string
          description: >-
            The unique identifier of the FTD device in CDO for which
            registration should be triggered.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
    DuoAdminPanelCreateOrUpdateInput:
      required:
        - integrationKey
        - name
        - secretKey
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My Duo Admin Panel
        host:
          type: string
          description: The address of the Duo Admin Panel to onboard.
          example: api-1aa2bbb3.duosecurity.com
        integrationKey:
          type: string
          description: >-
            The integration key of the Admin API application used to
            authenticate with Duo Admin Panel.
          example: EIVJAJFK1Y25B1BWVSO
        secretKey:
          type: string
          description: >-
            The secret key of the Admin API application used to authenticate
            with Duo Admin Panel.
          example: b2Ln2DrBioS2sTI7dqRYh7DPoLsvYDm0wn5UbIKi
        labels:
          $ref: '#/components/schemas/Labels'
    AsaCreateOrUpdateInput:
      required:
        - connectorType
        - name
        - password
        - username
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My ASA
        deviceAddress:
          type: string
          description: >-
            The address of the device to onboard, specified in the format
            `host:port`.
          example: 10.2.2.5:443
        username:
          type: string
          description: The username used to authenticate with the device.
          example: admin
        password:
          type: string
          description: The password used to authenticate with the device.
          example: Cisco@23
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        ignoreCertificate:
          type: boolean
          description: >-
            Set this attribute to true if you do not want CDO to validate the
            certificate of this device before onboarding.
          example: false
          default: false
        connectorName:
          type: string
          description: >-
            The name of the Secure Device Connector (SDC) that will be used to
            communicate with the device. This value is not required if the
            connector type selected is Cloud Connector (CDG).
          example: SDC-1
        labels:
          $ref: '#/components/schemas/Labels'
    ConnectorType:
      type: string
      description: >-
        The type of the connector that will be used to communicate with the
        device. CDO can communicate with your device using either a Cloud
        Connector (CDG) or a Secure Device Connector (SDC).
      example: CDG
      enum:
        - SDC
        - CDG
    CliCommandInput:
      required:
        - deviceUids
        - script
      type: object
      properties:
        deviceUids:
          type: array
          description: List of UIDs of the devices to execute the CLI script for.
          example:
            - 7131daad-e813-4b8f-8f42-be1e241e8cdb
          items:
            type: string
            description: List of UIDs of the devices to execute the CLI script for.
            example: '["7131daad-e813-4b8f-8f42-be1e241e8cdb"]'
        script:
          type: string
          description: The script executed to generate the CLI result.
          example: show xlate detail
    CliMacroExecuteInput:
      required:
        - deviceUids
      type: object
      properties:
        deviceUids:
          type: array
          description: List of UIDs of the devices to execute the CLI macro for.
          example:
            - 7131daad-e813-4b8f-8f42-be1e241e8cdb
          items:
            type: string
            description: List of UIDs of the devices to execute the CLI macro for.
            example: '["7131daad-e813-4b8f-8f42-be1e241e8cdb"]'
        macroUid:
          type: string
          description: The unique identifier of the CLI macro.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        parameters:
          type: object
          additionalProperties:
            type: string
            description: >-
              Parameters provided for the CLI macro execution as key-value
              pairs.
            example: '{"USER":"admin"}'
          description: Parameters provided for the CLI macro execution as key-value pairs.
          example:
            USER: admin
    SdcCreateInput:
      type: object
      properties:
        name:
          type: string
    CliMacroCreateInput:
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the CLI Macro.
          example: My Network Object
        description:
          type: string
          description: A detailed description of what the CLI Macro does.
          example: This macro defines a network object in a firewall configuration.
        script:
          type: string
          description: >-
            The script content of the CLI Macro that will be executed on the
            device.
          example: object network obj-192.168.1.0
        deviceType:
          type: string
          description: The type of device the CLI Macro is intended for.
          example: IOS
          enum:
            - ASA
            - IOS
    CdoCliMacro:
      required:
        - deviceType
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the CLI macro.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the CLI macro.
          example: Disconnect VPN User
        script:
          type: string
          description: The script executed to generate the CLI result.
          example: vpn-sessiondb logoff name {{USER}} noconfirm
        parameters:
          uniqueItems: true
          type: array
          description: A set of parameters provided in the script
          example:
            - USER
          items:
            type: string
            description: A set of parameters provided in the script
            example: '["USER"]'
        deviceType:
          $ref: '#/components/schemas/EntityType'
        systemDefined:
          type: boolean
          description: Indicating whether this CLI macro is system-defined.
          example: true
    EntityType:
      type: string
      description: The type of the device.
      example: ASA
      enum:
        - ASA
        - CDFMC_MANAGED_FTD
        - ONPREM_FMC_MANAGED_FTD
        - ONPREM_FMC_MANAGED_FIREPOWER
        - ONPREM_FMC_NGIPS
        - FDM_MANAGED_FTD
        - IOS
        - SSH_DEVICE
        - GENERIC_DEVICE
        - MERAKI_MX
        - CLOUD_DNG
        - SFCN
        - SFCN_DNG
        - SFCN_STS
        - ONPREM_FMC
        - CDFMC
        - AWS_VPC
        - AZURE_VNET
        - DUO_ADMIN_PANEL
        - UMBRELLA_ORGANIZATION
    ChangeRequestCreateInput:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the change request in CDO.
          example: SecureNewBranchChange
        description:
          type: string
          description: The description of the change request in CDO.
          example: Changes related to securing the new branch.
    ChangeRequest:
      required:
        - name
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the Change Request.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the Change Request.
          example: my change request
        description:
          type: string
          description: The description of the Change Request.
          example: my change request description
    AiQuestion:
      type: object
      properties:
        content:
          type: string
          description: The content of the message.
          example: What's the difference between an Admin and a Super Admin?
    ConflictDetectionInterval:
      type: string
      description: >-
        Specifies the default interval at which CDO checks for changes made
        out-of-band on the devices on the tenant.
      example: EVERY_6_HOURS
      enum:
        - EVERY_10_MINUTES
        - EVERY_HOUR
        - EVERY_6_HOURS
        - EVERY_24_HOURS
    TenantSettings:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the tenant in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        changeRequestSupport:
          type: boolean
          description: Indicates if the tenant supports change requests.
          example: true
        autoAcceptDeviceChanges:
          type: boolean
          description: >-
            Indicates if changes made out-of-band on devices on the tenant are
            automatically accepted without manual approval.
          example: true
        webAnalytics:
          type: boolean
          description: Indicates if web analytics are enabled for the tenant.
          example: true
        scheduledDeployments:
          type: boolean
          description: Indicates if the tenant has scheduled deployments enabled.
          example: false
        denyCiscoSupportAccessToTenant:
          type: boolean
          description: Indicates if Cisco support is denied access to the tenant.
          example: true
        multicloudDefense:
          type: boolean
          description: Indicates if the tenant has the multicloud defense enabled.
          example: false
        policyAnalyzer:
          type: boolean
          description: Indicates if the tenant has the policy analyzer enabled.
          example: true
        aiAssistant:
          type: boolean
          description: Indicates if the tenant has the AI assistant enabled.
          example: true
        autoDiscoverOnPremFmcs:
          type: boolean
          description: Indicates if the system automatically discovers on-premise FMCs.
          example: true
        conflictDetectionInterval:
          $ref: '#/components/schemas/ConflictDetectionInterval'
    AccessRuleUpdateInput:
      required:
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the Access Rule.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        index:
          type: integer
          description: Access rule index position in Access Group ordered rule list.
          format: int32
          example: 1
        ruleAction:
          type: string
          description: 'The rule''s action: PERMIT or DENY.'
          example: PERMIT
          enum:
            - PERMIT
            - DENY
        protocol:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourcePort:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationPort:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourceNetwork:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationNetwork:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        sourceDynamicObject:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        destinationDynamicObject:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        logSettings:
          $ref: '#/components/schemas/LogSettings'
        ruleTimeRange:
          $ref: '#/components/schemas/AccessRuleDetailsContent'
        remark:
          type: string
          description: A remark.
        isActiveRule:
          type: boolean
          description: Is active. True by default
          example: false
    AccessGroupUpdateInput:
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the Access Group.
          example: Access-Group1
        resources:
          uniqueItems: true
          type: array
          description: >-
            The set of of interface and direction pairs or global resource. 
            Resource is an attribute applicable only to devices and will not be
            propagated to appliedTo devices if Access Group is shared.
          example: >-
            Interface resource: [{"interfaceName": "outside","direction":
            "OUTBOUND"] or Global resource: [{"global": true}]
          items:
            type: object
            additionalProperties:
              type: object
              description: >-
                The set of of interface and direction pairs or global resource. 
                Resource is an attribute applicable only to devices and will not
                be propagated to appliedTo devices if Access Group is shared.
              example: >-
                Interface resource: [{"interfaceName": "outside","direction":
                "OUTBOUND"] or Global resource: [{"global": true}]
            description: >-
              The set of of interface and direction pairs or global resource. 
              Resource is an attribute applicable only to devices and will not
              be propagated to appliedTo devices if Access Group is shared.
            example: >-
              Interface resource: [{"interfaceName": "outside","direction":
              "OUTBOUND"] or Global resource: [{"global": true}]
        isShared:
          type: boolean
          description: >-
            The flag that identifies if access group is shared.  If set to true,
            appliedTo field should be provided as well and entityUid should
            point to source device.
          example: false
        appliedTo:
          uniqueItems: true
          type: array
          description: >-
            The set of device unique identifiers to which this Access Group was
            applied. Only valid for shared access group.
          example: '[deviceUid1, deviceUid2, ..., deviceUidN]'
          items:
            type: string
            description: >-
              The set of device unique identifiers to which this Access Group
              was applied. Only valid for shared access group.
            format: uuid
    DevicePatchInput:
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the device.
          example: My ASA
        labels:
          $ref: '#/components/schemas/Labels'
    AsaFailoverMate:
      type: object
      properties:
        failoverState:
          type: string
          description: (High Availability ASAs only) Failover state of this device.
          example: Primary - Active
        serial:
          type: string
          description: >-
            (High Availability ASAs only) The serial number of the device. This
            is typically used for licensing, and is not the same as the chassis'
            serial number.
          example: JAD24500xxx
        softwareVersion:
          type: string
          description: >-
            (High Availability ASAs only) The version of the software running on
            the device.
          example: 9.18.8
      description: >-
        (High Availability ASAs only) Information on the failover mate of this
        device.
    AsaFailoverMode:
      type: string
      description: (ASAs only) Failover mode of the device.
      example: ACTIVE_STANDBY
      enum:
        - 'OFF'
        - ACTIVE_STANDBY
        - ACTIVE_ACTIVE
    CdFmcInfo:
      type: object
      properties:
        cliKey:
          type: string
          description: >-
            The CLI key to paste into the FTD CLI to register the FTD with a
            cdFMC. You need to paste this value in only once, when the FTD is
            being onboarded. Refer to the [CDO
            Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)
            for details.
          example: >-
            configure manager add acme.app.us.cdo.cisco.com
            E2jsyiZggyeCfFfCUaMK2kD1a1bxxx 5Do6FwUaXY4EFlyraC2yVnxodLxhuxxx
            acme.app.us.cdo.cisco.com
        regKey:
          type: string
          description: >-
            The Network Address Translation (NAT) ID of this FTD. Refer to the
            [CDO
            Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)
            for details.
          example: E2jsyiZggyeCfFfCUaMK2kD1a1bxxx
        natId:
          type: string
          description: >-
            The Registration Key of this FTD. Refer to the [CDO
            Documentation](https://www.cisco.com/c/en/us/td/docs/security/cdo/cloud-delivered-firewall-management-center-in-cdo/managing-firewall-threat-defense-services-with-cisco-defense-orchestrator/m-onboard-for-ftd-management.html)
            for details.
          example: 5Do6FwUaXY4EFlyraC2yVnxodLxhuxxx
      description: >-
        (FTDs managed by cdFMC only) Information on the cloud-delivered FMC
        managing this FTD. This information is not available for FTDs managed
        using FDM or on-prem FMCs.
    ClusterNode:
      type: object
      properties:
        serial:
          type: string
          description: >-
            The serial number of the node on the device. This is typically used
            for licensing, and is not the same as the chassis' serial number.
          example: JAD24500xxx
        softwareVersion:
          type: string
          description: The version of the software running on the device.
          example: 7.4.1
        uidOnFmc:
          type: string
          description: The unique identifier of the device on a cdFMC.
          format: uuid
          example: 6131daad-e813-4b8f-8f42-be1e241e8cdb
        status:
          type: string
          description: The status of the cluster node.
          example: NORMAL
          enum:
            - ADDED_OUT_OF_BOX
            - DISABLED
            - JOINING
            - NORMAL
            - NOT_AVAILABLE
            - UNKNOWN
      description: >-
        Information on the data nodes, which are individual units within a
        cluster that process and forward network traffic based on policies and
        configurations managed by the control node.
    ConfigState:
      type: string
      description: >-
        The state of the device configuration in CDO. CDO stages configuration
        changes which have to be manually applied to the device; this field
        indicates whether the configuration on CDO does not match the
        configuration on the device, which indicates whether there are changes
        to be deployed from CDO to the device.
      example: SYNCED
      enum:
        - NO_CONFIG
        - SYNCED
        - NOT_SYNCED
        - UNKNOWN
    ConflictDetectionState:
      type: string
      description: >-
        Indicates whether there have been changes made to the device's
        configuration outside of CDO.
      example: NO_CONFLICTS
      enum:
        - CONFLICT_DETECTED
        - NO_CONFLICTS
    ConnectivityState:
      type: string
      description: >-
        The connectivity state of the device to CDO. A connectivity state that
        is not ONLINE can indicate either a problem with the device, or the
        communication pathways between the device and CDO.
      example: ONLINE
      enum:
        - ONLINE
        - UNREACHABLE
        - BAD_CREDENTIALS
        - UNKNOWN
        - PENDING_SETUP
    Device:
      required:
        - deviceType
        - name
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the device in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the device in CDO. Device names are unique in CDO.
          example: my-example-device
        deviceType:
          $ref: '#/components/schemas/EntityType'
        connectorType:
          $ref: '#/components/schemas/ConnectorType'
        connectorUid:
          type: string
          description: >-
            The unique identifier of the Secure Device Connector (SDC) that will
            be used to communicate with the device. This value is not required
            if the connector type selected is Cloud Connector (CDG)The name of
            the Secure Device Connector (SDC) that will be used to communicate
            with the device. This value is not required if the connector type
            selected is Cloud Connector (CDG).
          format: uuid
          example: 3af473a8-d70f-4090-bcdb-853981696478
        address:
          type: string
          description: >-
            The address of the device, in `host:port` format. CDO connects to
            the device at this address.
          example: my-example-device.example.com:443
        deviceRole:
          $ref: '#/components/schemas/DeviceRole'
        serial:
          type: string
          description: >-
            The serial number of the device. This is typically used for
            licensing, and is not the same as the chassis' serial number.
          example: JAD24500xxx
        chassisSerial:
          type: string
          description: >-
            The serial number on the chassis of the device (ASA-only). This is
            typically used to type up to Cisco SmartNet, and is not the same as
            the serial number.
          example: JMX2450Xxxx
        softwareVersion:
          type: string
          description: The version of the software running on the device.
          example: 7.4.1
        connectivityState:
          $ref: '#/components/schemas/ConnectivityState'
        configState:
          $ref: '#/components/schemas/ConfigState'
        conflictDetectionState:
          $ref: '#/components/schemas/ConflictDetectionState'
        notes:
          type: string
          description: Free-form notes on the device.
          example: This is an example note on the device.
        asdmVersion:
          type: string
          description: >-
            (ASAs only) Version of the ASDM device manager running on the
            device.
          example: 7.6(2)
        asaFailoverMode:
          $ref: '#/components/schemas/AsaFailoverMode'
        asaFailoverState:
          type: string
          description: (High Availability ASAs only) Failover state of this device.
          example: Primary - Active
        asaFailoverMate:
          $ref: '#/components/schemas/AsaFailoverMate'
        asaLicenseEntitlements:
          type: object
          additionalProperties:
            type: string
            description: (ASAs only) Map of ASA License entitlements.
          description: (ASAs only) Map of ASA License entitlements.
        ftdLicenses:
          type: array
          description: (FTDs only) List of FTD License entitlements.
          items:
            type: string
            description: (FTDs only) List of FTD License entitlements.
        snortVersion:
          type: string
          description: (FTDs only) List of FTD License entitlements.
        ftdPerformanceTier:
          type: string
          description: >-
            (FTDvs only) The FTDv supports performance-tiered licensing that
            provides different throughput levels and VPN connection limits based
            on deployment requirements. This field specifies the performance
            tier of the FTD.
        redundancyMode:
          type: string
          description: >-
            The redundancy mode this firewall is running in. Note: for High
            Availability pairs and clusters, CDO represents all of the devices
            as part of one record.
          enum:
            - HA
            - CLUSTER
            - STANDALONE
        cdFmcInfo:
          $ref: '#/components/schemas/CdFmcInfo'
        onPremFmcInfo:
          $ref: '#/components/schemas/OnPremFmcInfo'
        ftdClusterInfo:
          $ref: '#/components/schemas/FtdClusterInfo'
        ftdHaInfo:
          $ref: '#/components/schemas/FtdHaInfo'
        merakiDeploymentMode:
          $ref: '#/components/schemas/MerakiDeploymentMode'
        merakiNetwork:
          $ref: '#/components/schemas/Network'
        state:
          type: string
          description: The device state.
        stateMachineDetails:
          $ref: '#/components/schemas/StateMachineDetails'
        labels:
          $ref: '#/components/schemas/Labels'
        fmcDomainUid:
          type: string
          description: >-
            (FMC device managers only) The unique identifier of the [FMC
            domain](https://www.cisco.com/c/en/us/td/docs/security/secure-firewall/management-center/admin/740/management-center-admin-74/system-domains.html).
          format: uuid
        uidOnFmc:
          type: string
          description: >-
            (cdFMC-managed FTDs only) The unique identifier of the device on a
            cdFMC.
          format: uuid
          example: 6131daad-e813-4b8f-8f42-be1e241e8cdb
        modelNumber:
          type: string
          description: >-
            The hardware, or virtualized hardware platform, that the device is
            running on (ASA-only). This field can be missing in the case of a
            partially onboarded device.
    DeviceRole:
      type: string
      description: The role this device performs on the network.
      example: RA_VPN_HEADEND
      enum:
        - RA_VPN_HEADEND
        - MFA_PROVIDER
        - ZTNA_PROVIDER
        - ANYCONNECT_VPN_HEAD_END
    FtdClusterInfo:
      type: object
      properties:
        controlNode:
          $ref: '#/components/schemas/ClusterNode'
        dataNodes:
          type: array
          description: >-
            Information on the data nodes, which are individual units within a
            cluster that process and forward network traffic based on policies
            and configurations managed by the control node.
          items:
            $ref: '#/components/schemas/ClusterNode'
      description: >-
        (Device Clusters managed by FMC only) Clustering information. Note: CDO
        represents all of the nodes on an FTD cluster in a single device record
        with the UID of the cluster control node.
    FtdHaInfo:
      type: object
      properties:
        primaryNode:
          $ref: '#/components/schemas/HaNode'
        secondaryNode:
          $ref: '#/components/schemas/HaNode'
      description: >-
        (High Availability Devices managed by FMC only) High-Available
        information information. Note: CDO represents all of the nodes on an FTD
        cluster in a single device record with the UID of the cluster control
        node.
    HaNode:
      type: object
      properties:
        serial:
          type: string
          description: >-
            The serial number of the node on the device. This is typically used
            for licensing, and is not the same as the chassis' serial number.
          example: JAD24500xxx
        softwareVersion:
          type: string
          description: The version of the software running on the device.
          example: 7.4.1
        uidOnFmc:
          type: string
          description: The unique identifier of the device on a cdFMC.
          format: uuid
          example: 6131daad-e813-4b8f-8f42-be1e241e8cdb
        status:
          type: string
          description: The status of the HA node.
          example: NORMAL
          enum:
            - NORMAL
            - ERROR
            - WARNING
            - DISABLED
            - UNKNOWN
      description: Information on the secondary unit in the FTD HA Pair.
    MerakiDeploymentMode:
      type: string
      description: (Meraki devices only) The deployment mode of the Meraki device.
      example: ROUTED
      enum:
        - ROUTED
        - PASSTHROUGH
    Network:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the Meraki Dashboard Network.
          example: L_583779101697901532
        name:
          type: string
          description: The name of the Meraki Dashboard Network.
          example: meraki-network
        timezone:
          type: string
          description: The timezone of the Meraki Dashboard Network.
          example: UTC +0
      description: >-
        (Meraki devices only) The [Dashboard
        Network](https://documentation.meraki.com/General_Administration/Organizations_and_Networks/Creating_and_Deleting_Dashboard_Networks)
        the device is deployed in.
    OnPremFmcInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of the device in CDO. Device names are unique in CDO.
          example: my-example-fmc
        address:
          type: string
          description: >-
            The address of the on-prem FMC managing this device, in `host:port`
            format.
          example: my-example-fmc.example.com:443
      description: >-
        (Devices managed by on-prem FMC only) Information on the on-prem FMC
        managing this device.
    StateMachineDetails:
      type: object
      properties:
        identifier:
          type: string
        lastError:
          $ref: '#/components/schemas/StateMachineError'
      description: The device state machine details.
    StateMachineError:
      type: object
      properties:
        errorMessage:
          type: string
        errorCode:
          type: string
        actionIdentifier:
          type: string
    SdcPatchInput:
      type: object
      properties:
        name:
          type: string
    PublicKey:
      type: object
      properties:
        base64EncodedKey:
          type: string
          description: >-
            Base64 RSA public key to use to encrypt device credentials sent to
            the SDC.
          example: >-
            c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEZGpxeDNNMjh3ZHE2Rk11R2NFZHJqaGl3SFp5NDE0WXZFUmRDcVdnRXgrSXloNjVteHlkaVh1OVpoMXUyVTRtNDlnL0VUL2JxTklFNGgraUViQURjcjlScVFGRGZ4RC9pK1ZPSkhiQzQ0UERhZHFJd21vUGNoazYvQ0RoZVlJSmZTM0xTNmlkaC9SRGVFVHpnZ3lTaUI2Mm5yMnRmTkJ3V0ZScjV1Sko5dkNvdUxKRVBZbDBVMkpZNnBjd0paNk1lRDg5dU4rTjlHWFN2Vlh4bEZKNXg0VThReGFCMzJuNHZoekNiUzlYSVg1bGJJQnVIUEZ1bmMrNThPaUFzS0dwTTZ1NzhVR2V2TndOVzU0eVZmU2c4Q01XQ09vM1hiNTIrMnU2VHZlcE1BT2ZFU290YUd5NHV1RTBnUHYwSnowano3ZnFGTCt4d1AzNnNVY2pPRlIzQ1VhbEVpUDEyT2tTeEhreVNMUXJ3a2lFTVUvQ3VPUjdOWkdjUFd0dkVBaUZOTEN0VHhzY25Ma0xNNENkUEt3WnZQV3l3cHAyVGdValU4MEFaWkJZaGZBWTd3SFFQdDhrTkROMURhMWpWaHlwMWlycE5VbTEvaDNrS2srOFdFOVV2RjNDeVgyL1NqWUpPR2lMUWdVaXFUL3E5UkNMZUdVWStzaUFwS3ZyNS91UkU9IHNpd2FycmllQFNJV0FSUklFLU0tS1JBRgo=
        keyId:
          type: string
          description: >-
            The identifier of the RSA public key. This identifier is used by the
            SDC to know which private key to use to decrypt a string.
          example: example-key-id
      description: >-
        Information on the public key used to encrypt credentials sent to the
        SDC.
    Sdc:
      required:
        - name
      type: object
      properties:
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        uid:
          type: string
          description: The unique identifier of the SDC in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the SDC in CDO. SDC names are unique in CDO.
          example: my-example-sdc
        softwareVersion:
          type: string
          description: The software version running on the SDC.
          example: '202311071057'
        ipAddress:
          type: string
          description: The IP address of the SDC.
          example: '202311071057'
        status:
          $ref: '#/components/schemas/Status'
        lastHeartbeat:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) that a
            heartbeat was last received from the SDC. This serves as an
            indicator of the health of the SDC.
          format: date-time
          example: '2023-12-13T05:15:44Z'
        bootstrapData:
          type: string
          description: >-
            The bootstrap data is information used to automatically configure
            the SDC during its initial setup. This data is base64 encoded and
            includes essential details like the unique registration token and
            customer-specific settings that enable the SDC to communicate with
            and send data to CDO. This field is populated only if the SDC is not
            onboarded.
          example: >-
            Q0RPX1RPS0VOPSJleGFtcGxlLWNkby1hcGktdG9rZW4iCkNET19ET01BSU49ImNkby5jaXNjby5jb20iCkNET19URU5BTlQ9IkNET190ZXN0LXRlbmFudCIKQ0RPX0JPT1RTVFJBUF9VUkw9Imh0dHBzOi8vY2RvLmNpc2NvLmNvbS9zZGMvYm9vdHN0cmFwL0NET190ZXN0LXRlbmFudC9teS1zaGlueS1uZXctc2RjIgo=
    Status:
      type: string
      description: The status of the SDC.
      example: ACTIVE
      enum:
        - NEW
        - ONBOARDING
        - ACTIVE
        - INACTIVE
        - DISABLED
        - UNKNOWN
    CliMacroPatchInput:
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the CLI Macro.
          example: My Network Object
        description:
          type: string
          description: A detailed description of what the CLI Macro does.
          example: This macro defines a network object in a firewall configuration.
        script:
          type: string
          description: >-
            The script content of the CLI Macro that will be executed on the
            device.
          example: object network obj-192.168.1.0
    Location:
      type: object
      properties:
        city:
          type: string
          description: The city where the client device is located.
          example: San Jose
        subdivision:
          type: string
          description: >-
            The subdivision (e.g., state or province) where the client device is
            located.
          example: California
        country:
          type: string
          description: The country where the client device is located.
          example: United States
      description: The location of the client device.
    OS:
      type: object
      properties:
        type:
          type: string
          description: The type of operating system running on the client device.
          example: mac-intel
        version:
          type: string
          description: The version of the operating system running on the client device.
          example: 14.2.1
      description: The operating system of the client device.
    RaVpnSession:
      required:
        - deviceUid
        - uid
        - username
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the VPN session.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        username:
          type: string
          description: The name of the user associated with the RA VPN session.
          example: user@example.com
        status:
          type: string
          description: The status of the RA VPN session.
          example: ACTIVE
          enum:
            - ACTIVE
            - TERMINATED
        deviceUid:
          type: string
          description: >-
            The unique identifier of the device associated with the RA VPN
            session.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        assignedIpV4:
          type: string
          description: The IPv4 address assigned to the RA VPN session.
          example: 172.16.0.2
        assignedIpV6:
          type: string
          description: The IPv6 address assigned to the RA VPN session.
          example: 172.16.0.2
        publicIp:
          type: string
          description: >-
            The public IP address of the client that has established this RA VPN
            session.
          example: 106.51.163.157
        auditSessionId:
          type: string
          description: The audit session ID associated with this RA VPN session.
          example: 0a6405150000900065c0c86d
        location:
          $ref: '#/components/schemas/Location'
        os:
          $ref: '#/components/schemas/OS'
        bytesTx:
          type: integer
          description: The number of bytes transmitted during the RA VPN session.
          format: int32
          example: 9157513
        bytesRx:
          type: integer
          description: The number of bytes received during the RA VPN session.
          format: int32
          example: 6102087
        loginTime:
          type: string
          description: >-
            The time (in UTC) at which the user logged in to the RA VPN session,
            represented using the RFC-3339 standard.
          format: date-time
          example: '2023-12-13T05:15:44Z'
        lastActiveTime:
          type: string
          description: >-
            The time (in UTC) at which the user was last active in the RA VPN
            session, represented using the RFC-3339 standard.
          format: date-time
          example: '2023-12-13T05:15:44Z'
    RaVpnSessionPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/RaVpnSession'
    UserPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/User'
    ActiveDirectoryGroupPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/ActiveDirectoryGroup'
    CdoTokenInfo:
      type: object
      properties:
        uid:
          type: string
          description: >-
            The unique identifier of the user this token belongs to. The user
            can be API-only or a human.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: >-
            The name of the user this token belongs to. The user can be API-only
            or a human.
          example: my-example-device
        roles:
          uniqueItems: true
          type: array
          description: >-
            The role of the user this token belongs to. The user can be API-only
            or a human.
          items:
            $ref: '#/components/schemas/UserRole'
        expiresAt:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) the token
            expires. If this field is missing, the token will never expire.
          format: date-time
        tenantUid:
          type: string
          description: >-
            The unique identifier of the tenant this token is associated with.
            While a user can be associated with multiple tenants, a token is
            associated with a single tenant.
          format: uuid
    Tenant:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the tenant in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the tenant in CDO.
          example: mytenantname@cisco.com
        securityCloudControlEnterpriseId:
          type: string
          description: >-
            The unique identifier of the Security Cloud Control Enterprise this
            tenant is associated with.
          format: uuid
          example: dda3ce52-312c-477a-aa86-1fd1866ddab7
        displayName:
          type: string
          description: >-
            A human-readable display name for the tenant. This is the tenant
            name displayed in the CDO Web UI.
          example: mytenantname
        payType:
          $ref: '#/components/schemas/TenantPayType'
    TenantPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Tenant'
    TenantPayType:
      type: string
      description: An enum that describes the payment type of the tenant in CDO.
      example: TRIAL
      enum:
        - PAYING
        - NOT_PAYING
        - TRIAL
        - INTERNAL
        - PARTNER
        - DEMO
    CdFmcObject:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the entity in Cloud-delivered FMC.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the entity in Cloud-delivered FMC.
          example: my-example-entity
        link:
          type: string
          description: A URL to access the entity in Cloud-delivered FMC.
          example: >-
            https://edge.us.cdo.cisco.com/api/platform/public-api/v1/cdfmc/api/fmc_config/v1/domain/e276abec-e0f2-11e3-8169-6d9ed49b625f/devices/devicerecords/7131daad-e813-4b8f-8f42-be1e241e8cdb
      description: Policies that match the search term.
    CdFmcResult:
      type: object
      properties:
        devices:
          type: array
          description: Devices that match the search term.
          items:
            $ref: '#/components/schemas/CdFmcObject'
        objects:
          type: array
          description: Objects that match the search term.
          items:
            $ref: '#/components/schemas/CdFmcObject'
        policies:
          type: array
          description: Policies that match the search term.
          items:
            $ref: '#/components/schemas/CdFmcObject'
      description: >-
        Results from the Cloud-delivered FMC devices, objects or policies that
        match the search term.
    Entity:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the entity in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the entity in CDO. Device names are unique in CDO.
          example: my-example-entity
        type:
          $ref: '#/components/schemas/EntityType'
        address:
          type: string
          description: The address of the entity.
          example: my-example-device.example.com:443
        matchingConfigurations:
          type: array
          description: >-
            (ASAs only) Parts of the ASA device configuration that match the
            search term.
          items:
            type: string
            description: >-
              (ASAs only) Parts of the ASA device configuration that match the
              search term.
      description: Cloud Services that match the search term.
    GlobalSearchResult:
      type: object
      properties:
        inventory:
          $ref: '#/components/schemas/Inventory'
        objects:
          type: array
          description: Results from the CDO objects that match the search term.
          items:
            type: object
        policies:
          type: array
          description: Results from the CDO policies that match the search term.
          items:
            $ref: '#/components/schemas/Policy'
        cdFmcResult:
          $ref: '#/components/schemas/CdFmcResult'
    Inventory:
      type: object
      properties:
        devices:
          type: array
          description: Devices that match the search term.
          items:
            $ref: '#/components/schemas/Entity'
        managers:
          type: array
          description: Device Managers that match the search term.
          items:
            $ref: '#/components/schemas/Entity'
        services:
          type: array
          description: Cloud Services that match the search term.
          items:
            $ref: '#/components/schemas/Entity'
      description: Results from the CDO inventory that match the search term.
    Policy:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the policy in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the policy in CDO.
          example: my-example-policy
      description: Results from the CDO policies that match the search term.
    CdoRegion:
      type: object
      properties:
        domain:
          type: string
          description: The domain for the region.
        apiDomain:
          type: string
          description: The domain for API services in the region.
        description:
          type: string
          description: Human readable description of the region.
      description: The list of items.
    CdoRegionList:
      type: object
      properties:
        items:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/CdoRegion'
    AccessRulePage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/AccessRule'
    AccessGroupPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/AccessGroup'
    Browser:
      type: object
      properties:
        name:
          type: string
          description: The name of the web browser running on the client device.
          example: Chrome
        version:
          type: string
          description: The version of the web browser running on the client device.
          example: 121.0.6167.160
      description: The web browser running on the client device.
    ClientDevice:
      required:
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the device.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        location:
          $ref: '#/components/schemas/Location'
        ipAddress:
          type: string
          description: >-
            The IP address of the client device that has triggered this MFA
            event.
          example: 106.51.163.157
        passwordSet:
          type: boolean
          description: Indicates whether a password is set on the client device.
          example: false
        encrypted:
          type: boolean
          description: Indicates whether encryption is enabled on the client device.
          example: true
        firewalled:
          type: boolean
          description: Indicates whether a firewall is enabled on the client device.
          example: true
        os:
          $ref: '#/components/schemas/OS'
        browser:
          $ref: '#/components/schemas/Browser'
      description: The client device that triggered this MFA event.
    MfaEvent:
      required:
        - uid
        - username
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the MFA event.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        username:
          type: string
          description: The name of the user associated with the MFA event.
          example: user@example.com
        timestamp:
          type: string
          description: >-
            The time (in UTC) at which the user logged in to the MFA event,
            represented using the RFC-3339 standard.
          format: date-time
          example: '2023-12-13T05:15:44Z'
        application:
          type: string
          description: The name of the application associated with the MFA event.
          example: Security Cloud Sign On Preview
        result:
          type: string
          description: The result of the MFA event.
          example: GRANTED
          enum:
            - DENIED
            - GRANTED
        reason:
          type: string
          description: >-
            The reason for the result of the MFA event. When the `result` is
            `DENIED`, this field contains information on why the MFA event
            failed.
          example: valid_passcode
        secondFactor:
          type: string
          description: The second factor used for the MFA event.
          example: sms_passcode
        clientDevice:
          $ref: '#/components/schemas/ClientDevice'
    MfaEventPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/MfaEvent'
    Meta:
      type: object
      properties:
        cloudConnectorIps:
          type: array
          description: >-
            The IP addresses from which to allow inbound access to your network
            if you wish to connect to your devices through CDO's Cloud
            Connector.
          items:
            type: string
            description: >-
              The IP addresses from which to allow inbound access to your
              network if you wish to connect to your devices through CDO's Cloud
              Connector.
    DevicePage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Device'
    ChassisStatsHealthMetrics:
      type: object
      properties:
        fan1RpmAvg:
          type: number
          description: The average speed of fan 1, if present, in RPM.
          format: double
        fan2RpmAvg:
          type: number
          description: The average speed of fan 2, if present, in RPM.
          format: double
        fan3RpmAvg:
          type: number
          description: The average speed of fan 3, if present, in RPM.
          format: double
        fan4RpmAvg:
          type: number
          description: The average speed of fan 4, if present, in RPM.
          format: double
      description: The chassis health metrics for the device.
    CpuHealthMetrics:
      type: object
      properties:
        linaUsageAvg:
          type: number
          description: >-
            The average CPU usage of the Lina process on the device, expressed
            as a percentage value between 0 and 1.
          format: double
        snortUsageAvg:
          type: number
          description: >-
            The average CPU usage of the Snort process on the device, expressed
            as a percentage value between 0 and 1.
          format: double
        systemUsageAvg:
          type: number
          description: >-
            The average CPU usage of all processes on the device, expressed as a
            percentage value between 0 and 1.
          format: double
      description: >-
        The CPU health metrics for the device. This value will be available only
        if the health policy on the device has CPU monitoring enabled.
    DiskHealthMetrics:
      type: object
      properties:
        totalDiskUsageAvg:
          type: number
          description: >-
            The average total disk usage, expressed as a percentage value
            between 0 and 1.
          format: double
      description: The disk health metrics for the device.
    FmcHealthMetrics:
      type: object
      properties:
        deviceUid:
          type: string
          description: The unique identifier of the device in CDO.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        deviceName:
          type: string
          description: The name of the device in CDO.
          example: Burak's FTD device
        cpuHealthMetrics:
          $ref: '#/components/schemas/CpuHealthMetrics'
        memoryHealthMetrics:
          $ref: '#/components/schemas/MemoryHealthMetrics'
        diskHealthMetrics:
          $ref: '#/components/schemas/DiskHealthMetrics'
        chassisStatsHealthMetrics:
          $ref: '#/components/schemas/ChassisStatsHealthMetrics'
        interfaceHealthMetrics:
          type: array
          description: The interface health metrics for the device.
          items:
            $ref: '#/components/schemas/InterfaceHealthMetrics'
    InterfaceHealthMetrics:
      type: object
      properties:
        status:
          type: string
        bufferUnderrunsAvg:
          type: number
          format: double
        bufferOverrunsAvg:
          type: number
          format: double
        interface:
          type: string
        interfaceName:
          type: string
      description: The interface health metrics for the device.
    MemoryHealthMetrics:
      type: object
      properties:
        linaUsageAvg:
          type: number
          description: >-
            The average memory usage of the Lina process on the device,
            expressed as a percentage value between 0 and 1.
          format: double
        snortUsageAvg:
          type: number
          description: >-
            The average memory usage of the Snort process on the device,
            expressed as a percentage value between 0 and 1.
          format: double
        systemUsageAvg:
          type: number
          description: >-
            The average memory usage of all processes on the device, expressed
            as a percentage value between 0 and 1.
          format: double
      description: The memory health metrics for the device.
    SdcPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Sdc'
    CdoCliResult:
      required:
        - deviceUid
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the CLI execution result.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        result:
          type: string
          description: The result of the CLI execution.
          example: '5 in use, 5 most used\nFlags: D - DNS, e - extended, I - identity'
        errorMsg:
          type: string
          description: The error message, if any.
          example: 'Error: Connection timed out'
        deviceUid:
          type: string
          description: The unique identifier of the device.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        startTime:
          type: string
          description: >-
            The time (in UTC) at which the user run the CLI execution,
            represented using the RFC-3339 standard.
          format: date-time
          example: '2023-12-13T05:15:44Z'
        script:
          type: string
          description: The script executed to generate the CLI result.
          example: show xlate detail
    CdoCliResultPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/CdoCliResult'
    CdoCliMacroPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/CdoCliMacro'
    Changelog:
      required:
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the Change Log.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        status:
          type: string
          description: The status of the Change Log.
          example: ACTIVE
          enum:
            - ACTIVE
            - COMPLETED
            - UNKNOWN
        entityUid:
          type: string
          description: The uid of the device/manager/service the Change Log refers to.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        events:
          type: array
          description: The events recorded in this Change Log.
          items:
            $ref: '#/components/schemas/Event'
    ChangelogPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/Changelog'
    Event:
      type: object
      properties:
        description:
          type: string
          description: A human-readable description of the Change Log event.
        diff:
          type: string
          description: >-
            A textual Diff representation of the changes made to the
            configuration.
        username:
          type: string
          description: The username of the user that triggered the Change Log event.
          example: myuser@cisco.com
        date:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            Change Log Event occurred.
          format: date-time
        action:
          type: string
          description: The action performed.
          enum:
            - CREATE
            - UPDATE
            - DELETE
            - ERROR
            - UNKNOWN
        changeRequestUid:
          type: string
          description: >-
            The unique Identifier of the Change Request associated with the
            Change Log event.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        changeRequestName:
          type: string
          description: The name of the Change Request associated with the Change Log event.
          example: LH-12345
      description: The events recorded in this Change Log.
    ChangeRequestPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/ChangeRequest'
    AuditLog:
      required:
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the Audit Log.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        eventType:
          type: string
          description: The type of the Audit Log event.
          example: USER_LOGGED_IN
          enum:
            - USER_LOGGED_IN
            - USER_ADDED_TO_TENANT
            - USER_REMOVED_FROM_TENANT
            - USER_ROLE_CHANGED
            - AD_GROUP_ADDED
            - AD_GROUP_DELETED
            - AD_GROUP_ROLE_CHANGED
            - USER_LOGIN_DATA
        username:
          type: string
          description: The name/email of the of user the Audit Log refers to.
          example: test@cisco.com
        eventDescription:
          type: string
          description: The description of the Audit Log event.
          example: test@cisco.com logged in
        eventTime:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            Audit Log event was created.
          format: date-time
          example: '2024-06-26T20:44:06Z'
        roles:
          uniqueItems: true
          type: array
          description: The roles of the user who did the Audit log operation
          example: '[ROLE_READ_ONLY, ROLE_DEPLOY_ONLY]'
          items:
            type: string
            description: The roles of the user who did the Audit log operation
            example: '[ROLE_READ_ONLY, ROLE_DEPLOY_ONLY]'
      description: The list of items retrieved.
    AuditLogPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/AuditLog'
    AiAssistantConversationPage:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int32
          example: 100
        limit:
          type: integer
          description: The number of results retrieved.
          format: int32
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int32
          example: 0
        items:
          type: array
          description: The list of items retrieved.
          items:
            $ref: '#/components/schemas/AiConversation'
    AiConversation:
      required:
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the conversation.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        createdDate:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            conversation was created.
          format: date-time
          example: '2023-12-13T08:15:44Z'
        lastInteractionDate:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            user interacted with this conversation.
          format: date-time
          example: '2023-12-13T08:15:44Z'
        lastAnswerDate:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which an
            answer was received.
          format: date-time
          example: '2023-12-13T08:15:44Z'
        title:
          type: string
          description: >-
            The title of the conversation. This is set to the first question
            asked as part of the conversation.
          example: Is example.com blocked on my FTD?
    AiMessage:
      required:
        - uid
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the Message.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        type:
          type: string
          description: >-
            The type of the message, indicating whether it is a request or a
            response.
          example: REQUEST
          enum:
            - REQUEST
            - RESPONSE
        inReplyTo:
          type: string
          description: >-
            The unique identifier of the message to which this message is
            replying. This field is populated only for messages of type
            RESPONSE.
          format: uuid
          example: f127a6f6-ec56-400f-a23b-832b0100540b
        content:
          type: string
          description: The content of the message.
          example: What's the difference between an Admin and a Super Admin?
        createdDate:
          type: string
          description: >-
            The time (UTC; represented using the RFC-3339 standard) at which the
            message was sent.
          format: date-time
          example: '2023-12-13T08:15:44Z'
    JsonWebKey:
      type: object
      properties:
        kty:
          type: string
          description: The family of cryptographic algorithms used with the key.
        e:
          type: string
          description: The exponent for the RSA public key.
        use:
          type: string
          description: How the key was meant to be used.
        kid:
          type: string
          description: The unique identifier for the key.
        alg:
          type: string
          description: The specific cryptographic algorithm used with the key.
        'n':
          type: string
          description: The modulus for the RSA public key.
      description: The JSON Web Key Set.
    JwkSet:
      type: object
      properties:
        keys:
          type: array
          description: The JSON Web Key Set.
          items:
            $ref: '#/components/schemas/JsonWebKey'
    AuthenticationError:
      type: object
      properties:
        error:
          type: string
          description: A human-readable error description in English.
          example: invalid_token
        errorDescription:
          type: string
          description: A human-readable error description in English.
          example: Your token is invalid
    CommonApiError:
      type: object
      properties:
        errorCode:
          type: string
          description: A unique error code that describes the error.
          example: INVALID_INPUT
          enum:
            - INVALID_INPUT
            - UNAUTHORIZED
            - FORBIDDEN
            - NOT_FOUND
            - METHOD_NOT_ALLOWED
            - CONFLICT
            - TOO_MANY_REQUESTS
            - CANNOT_DELETE_CDFMC_MANAGED_FTD
            - CANNOT_DELETE_ONPREM_FMC_MANAGED_FTD
            - CANNOT_DELETE_ONPREM_FMC_MANAGED_FIREPOWER
            - CANNOT_DELETE_CDFMC
            - SERVER_ERROR
            - PROXY_ERROR
            - BAD_REQUEST
        errorMsg:
          type: string
          description: A human-readable error description in English.
          example: sample error
        details:
          type: object
          additionalProperties:
            type: object
            description: Additional details, if any, on the error
            example: {}
          description: Additional details, if any, on the error
          example: {}
    CreateRequest:
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
          description: The name of the object
          example: my-object
        value:
          $ref: '#/components/schemas/SharedObjectValue'
        description:
          type: string
          description: The human-readable description of the object
          example: My object description
        targetIds:
          uniqueItems: true
          type: array
          description: >-
            Set of IDs for targets that contain the object. A target can be, for
            example, a device, service, or a shared policy (Ruleset).
          example:
            - 7131daad-e813-4b8f-8f42-be1e241e8cdb
          items:
            type: string
            description: >-
              Set of IDs for targets that contain the object. A target can be,
              for example, a device, service, or a shared policy (Ruleset).
            example: '["7131daad-e813-4b8f-8f42-be1e241e8cdb"]'
        tags:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: The tags for the object
            example:
              location:
                - London
                - Head-office
            items:
              type: string
              description: The tags for the object
              example: '{"location":["London","Head-office"]}'
          description: The tags for the object
          example:
            location:
              - London
              - Head-office
        labels:
          uniqueItems: true
          type: array
          description: The labels for the object
          example:
            - migration
          items:
            type: string
            description: The labels for the object
            example: '["migration"]'
    GroupContent:
      type: object
      properties:
        literals:
          type: array
          description: List of content literals
          items:
            $ref: '#/components/schemas/SingleContent'
        referencedObjectUids:
          uniqueItems: true
          type: array
          description: Set of UIDs of the group's referenced objects
          example:
            - 7131daad-e813-4b8f-8f42-be1e241e8cdb
          items:
            type: string
            description: Set of UIDs of the group's referenced objects
            format: uuid
      description: The contents of an object group
    Icmp4Value:
      type: object
      properties:
        icmp4Type:
          type: string
          example: DESTINATION_UNREACHABLE
          enum:
            - ANY
            - ECHO_REPLY
            - DESTINATION_UNREACHABLE
            - SOURCE_QUENCH
            - REDIRECT_MESSAGE
            - ALTERNATE_HOST_ADDRESS
            - ECHO_REQUEST
            - ROUTER_ADVERTISEMENT
            - ROUTER_SOLICITATION
            - TIME_EXCEEDED
            - PARAMETER_PROBLEM
            - TIMESTAMP
            - TIMESTAMP_REPLY
            - INFO_REQUEST
            - INFO_REPLY
            - ADDR_MASK_REQUEST
            - ADDR_MASK_REPLY
            - TRACEROUTE
            - DATAGRAM_CONVERSION_ERROR
            - MOBILE_HOST_REDIRECT
            - WHERE_ARE_YOU
            - HERE_I_AM
            - MOBILE_REG_REQUEST
            - MOBILE_REG_REPLY
            - DOMAIN_NAME_REQUEST
            - DOMAIN_NAME_REPLY
            - SKIP_ALGORITHM_DISCOVERY_PROTOCOL
            - PHOTURIS
            - EXPERIMENTAL_MOB_PROTOCOLS
        icmp4Code:
          type: string
          example: NET_UNREACHABLE
          enum:
            - NET_UNREACHABLE
            - HOST_UNREACHABLE
            - PROTOCOL_UNREACHABLE
            - PORT_UNREACHABLE
            - FRAGMENTATION_NEEDED
            - SOURCE_ROUTE_FAILED
            - DEST_NETWORK_UNKNOWN
            - DEST_HOST_UNKNOWN
            - SRC_HOST_ISOLATED
            - COMMUNICATION_DEST_NET_PROHIBITED
            - COMMUNICATION_DEST_HOST_PROHIBITED
            - DEST_NET_UNREACHABLE_FOR_TOS
            - DEST_HOST_UNREACHABLE_FOR_TOS
            - COMM_ADMINISTRATIVELY_PROHIBITED
            - HOST_PRECEDENCE_VIOLATION
            - PRECEDENCE_CUTOFF
            - REDIRECT_DATAGRAM_NETWORK
            - REDIRECT_DATAGRAM_HOST
            - REDIRECT_DATAGRAM_SERVICE_NETWORK
            - REDIRECT_DATAGRAM_SERVICE_HOST
            - ALTERNATE_HOST_ADDR
            - DO_NOT_ROUTE_COMMON_TRAFFIC
            - NORMAL_ROUTER_ADV
            - TTL_EXPIRED_TRANSIT
            - FRAG_ASSEMBLY
            - PTR_ERROR
            - MISSING_REQD_OPTION
            - BAD_LENGTH
            - BAD_SPI
            - AUTH_FAILED
            - DECOMPRESSION_FAILED
            - DECRYPTION_FAILED
            - NEED_AUTHENTICATION
            - NEED_AUTHORIZATION
    Icmp6Value:
      type: object
      properties:
        icmp6Type:
          type: string
          example: DESTINATION_UNREACHABLE
          enum:
            - ANY
            - DESTINATION_UNREACHABLE
            - PACKET_TOO_BIG
            - TIME_EXCEEDED
            - PARAMETER_PROBLEM
            - ECHO_REQUEST
            - ECHO_REPLY
            - MULTICAST_LISTENER_QUERY
            - MULTICAST_LISTENER_REPORT
            - MULTICAST_LISTENER_DONE
            - ROUTER_SOLICITATION
            - ROUTER_ADVERTISEMENT
            - NEIGHBOUR_SOLICITATION
            - NEIGHBOUR_ADVERTISEMENT
            - REDIRECT_MESSAGE
            - ROUTER_RENUMBERING
            - ICMP_NODE_INFO_QUERY
            - ICMP_NODE_INFO_RESPONSE
            - INVERSE_NEIGHBOR_DISCOVERY_SOLICITATION
            - INVERSE_NEIGHBOR_DISCOVERY_ADVERTISEMENT
            - VER2_MULTICAST_LISTENER_REPORT
            - HOME_AGENT_ADDR_DISCOVERY_REQUEST
            - HOME_AGENT_ADDR_DISCOVERY_REPLY
            - MOBILE_PREFIX_SOLICITATION
            - MOBILE_PREFIX_ADVERTISEMENT
            - CERT_PATH_SOLICITATION
            - CERT_PATH_ADVERTISEMENT
            - ICMP_EXP_MOBILITY_PROTOCOLS
            - MULTICAST_ROUTER_ADVERTISEMENT
            - MULTICAST_ROUTER_SOLICITATION
            - MULTICAST_ROUTER_TERMINATION
            - FMIPV6_MESSAGE
            - RPL_CONTROL_MESSAGE
            - PRIVATE_EXPERIMENTATION
            - PRIVATE_EXPERIMENTATION_EXTENDED
        icmp6Code:
          type: string
          example: ADDRESS_UNREACHABLE
          enum:
            - NO_ROUTE_DEST
            - COMMUNICATION_PROHIBITED
            - BEYOND_SCOPE_SRC_ADDR
            - ADDRESS_UNREACHABLE
            - PORT_UNREACHABLE
            - SOURCE_ADDRESS_FAILED
            - REJECT_ROUTE
            - ERROR_SRC_ROUTING_HEADER
            - HOP_LIMIT_EXCEEDED
            - FRAGMENT_REASSEMBLY_TIME_EXCEEDED
            - ERRONEOUS_HEADER_ENCOUNTERED
            - UNRECOGNIZED_NEXT_HEADER_TYPE_ENCOUNTERED
            - UNRECOGNIZED_IPV6_OPTION_ENCOUNTERED
            - IPV6_FIRST_FRAG_HAS_INCOMPLETE_HEADER_CHAIN
            - SR_UPPER_LAYER_HEADER_ERROR
            - ROUTER_RENUMBERING_COMMAND
            - ROUTER_RENUMBERING_RESULT
            - DATA_CONTAINS_IPV6
            - DATA_CONTAINS_NAME
            - DATA_CONTAINS_IPV4
            - SUCCESSFUL_REPLY
            - RESPONDER_REFUSES_ANSWER
            - QTYPE_UNKNOWN
    NetworkObjectContent:
      required:
        - literal
      type: object
      properties:
        literal:
          type: string
          description: The literal content of the network object
          example: a:b:c::1
      description: The content of a network object
    ObjectContent:
      type: object
      description: >-
        The content value of the override. This overrides the object's default
        content.
      example:
        literal: a:b:c::1
      oneOf:
        - $ref: '#/components/schemas/ServiceObjectContent'
        - $ref: '#/components/schemas/UrlObjectContent'
        - $ref: '#/components/schemas/GroupContent'
        - $ref: '#/components/schemas/NetworkObjectContent'
    Override:
      required:
        - content
      type: object
      properties:
        targetId:
          type: string
          description: >-
            The ID of the target. A target can be, for example, a device,
            service, or a shared policy (Ruleset).
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        content:
          $ref: '#/components/schemas/ObjectContent'
      description: >-
        The list of target overrides for the object. Each override the default
        content for its target.
      example:
        targetId: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        content: a:b:c::2
    PortsValue:
      type: object
      properties:
        literal:
          type: string
          description: The literal port or range of port values
          example: 8000-8080
    ProtocolValueContent:
      type: object
      properties:
        protocolValue:
          type: string
          description: The literal for a custom protocol value
          example: www
    ServiceObjectContent:
      type: object
      properties:
        protocol:
          type: string
          description: The service object protocol
          example: TCP
          enum:
            - TCP
            - UDP
            - ICMP
            - ICMP4
            - ICMP6
            - TCP_UDP
            - IGMP
            - GGP
            - ST2
            - CBT
            - EGP
            - IGP
            - BBNRCCMON
            - NVP2
            - PUP
            - ARGUS
            - EMCON
            - XNET
            - CHAOS
            - MUX
            - DCNMEAS
            - HMP
            - PRM
            - XNSIDP
            - TRUNK1
            - TRUNK2
            - LEAF1
            - LEAF2
            - RDP
            - IRTP
            - ISOTP4
            - NETBLT
            - MFENSP
            - MERITINP
            - SEP
            - THREEPC
            - IDPR
            - XTP
            - DDP
            - IDPRCMTP
            - TPPLUSPLUS
            - IL
            - SDRP
            - IDRP
            - RSVP
            - GRE
            - MHRP
            - BNA
            - ESP
            - AH
            - INLSP
            - SWIPE
            - NARP
            - MOBILE
            - TLSP
            - SKIP
            - IPv6NONXT
            - CFTP
            - SATEXPAK
            - KRYPTOLAN
            - RVD
            - IPPC
            - SATMON
            - VISA
            - IPCV
            - CPNX
            - CPHB
            - WSN
            - PVP
            - BRSATMON
            - SUNND
            - WBMON
            - WBEXPAK
            - ISOIP
            - VMTP
            - SECUREVMTP
            - VINES
            - TTP
            - NSFNETIGP
            - DGP
            - TCF
            - EIGRP
            - OSPFIGP
            - SPRITERPC
            - LARP
            - MTP
            - AX25
            - IPIP
            - MICP
            - SCCSP
            - ETHERIP
            - ENCAP
            - GMTP
            - IFMP
            - PNNI
            - PIM
            - ARIS
            - SCPS
            - QNX
            - AN
            - IPCOMP
            - SNP
            - COMPAQPEER
            - IPXINIP
            - VRRP
            - PGM
            - L2TP
            - DDX
            - IATP
            - ST
            - SRP
            - UTI
            - SMP
            - SM
            - PTP
            - ISIS
            - FIRE
            - CRTP
            - CRUDP
            - SSCOPMCE
            - IPLT
            - SPS
            - PIPE
            - SCTP
            - FC
            - DIVERT
            - CUSTOM
        serviceValue:
          $ref: '#/components/schemas/ServiceObjectValueContent'
    ServiceObjectValueContent:
      type: object
      properties:
        type:
          type: string
          enum:
            - NETWORK_OBJECT
            - URL_OBJECT
            - SERVICE_OBJECT
            - ICMP_4
            - ICMP_6
            - SOURCE_DESTINATION_PORT
            - PORT
            - PROTOCOL_VALUE
      description: The value of the service object
      example: '{ "8000-9000"] }'
      oneOf:
        - $ref: '#/components/schemas/Icmp4Value'
        - $ref: '#/components/schemas/Icmp6Value'
        - $ref: '#/components/schemas/SourceDestinationPortsValue'
        - $ref: '#/components/schemas/PortsValue'
        - $ref: '#/components/schemas/ProtocolValueContent'
    SharedObjectValue:
      required:
        - defaultContent
        - objectType
      type: object
      properties:
        objectType:
          type: string
          description: The type of object
          example: NETWORK_OBJECT
          enum:
            - NETWORK_OBJECT
            - URL_OBJECT
            - SERVICE_OBJECT
            - NETWORK_GROUP
            - URL_GROUP
            - SERVICE_GROUP
        defaultContent:
          $ref: '#/components/schemas/ObjectContent'
        overrides:
          type: array
          description: >-
            The list of target overrides for the object. Each override the
            default content for its target.
          items:
            $ref: '#/components/schemas/Override'
      description: The value of the object
    SingleContent:
      type: object
      properties:
        type:
          type: string
          enum:
            - NETWORK_OBJECT
            - URL_OBJECT
            - SERVICE_OBJECT
            - ICMP_4
            - ICMP_6
            - SOURCE_DESTINATION_PORT
            - PORT
            - PROTOCOL_VALUE
      description: List of content literals
      oneOf:
        - $ref: '#/components/schemas/ServiceObjectContent'
        - $ref: '#/components/schemas/UrlObjectContent'
        - $ref: '#/components/schemas/NetworkObjectContent'
    SourceDestinationPortsValue:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/PortsValue'
        destination:
          $ref: '#/components/schemas/PortsValue'
    UrlObjectContent:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          description: The URL literal
          example: https://www.cisco.com/
    IssuesDto:
      type: object
      properties:
        unusedTargetIds:
          uniqueItems: true
          type: array
          items:
            type: string
        duplicateTargetIds:
          uniqueItems: true
          type: array
          items:
            type: string
      description: The issues for the object
      example:
        unusedTargetIds:
          - 7131daad-e813-4b8f-8f42-be1e241e8cdb
    ObjectResponse:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the object
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the object
          example: my-object
        value:
          $ref: '#/components/schemas/SharedObjectValue'
        description:
          type: string
          description: The human-readable description of the object
          example: My object description
        targets:
          type: array
          description: >-
            Set of targets that contain the object. A target can be, for
            example, a device, service, or a shared policy (Ruleset).
          items:
            $ref: '#/components/schemas/Target'
        elements:
          type: array
          description: A flattened list of the content value of the object
          example: '[a:b:c::1]'
          items:
            type: string
            description: A flattened list of the content value of the object
            example: '[a:b:c::1]'
        referencesInfoFromDefaultAndOverrides:
          type: array
          description: >-
            List of objects referenced in the default content or in any of the
            overrides.
          items:
            $ref: '#/components/schemas/ReferenceInfo'
        tags:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: The tags for the object
            example:
              location:
                - London
                - Head-office
            items:
              type: string
              description: The tags for the object
              example: '{"location":["London","Head-office"]}'
          description: The tags for the object
          example:
            location:
              - London
              - Head-office
        labels:
          uniqueItems: true
          type: array
          description: The labels for the object
          example:
            - migration
          items:
            type: string
            description: The labels for the object
            example: '["migration"]'
        issues:
          $ref: '#/components/schemas/IssuesDto'
    ReferenceInfo:
      type: object
      properties:
        uid:
          type: string
          description: The unique identifier of the referenced object
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        name:
          type: string
          description: The name of the referenced object
          example: another-object
        objectType:
          type: string
          description: The object type
          example: NETWORK_OBJECT
          enum:
            - NETWORK_OBJECT
            - URL_OBJECT
            - SERVICE_OBJECT
            - NETWORK_GROUP
            - URL_GROUP
            - SERVICE_GROUP
      description: >-
        List of objects referenced in the default content or in any of the
        overrides.
    Target:
      type: object
      properties:
        id:
          type: string
          description: >-
            The ID of the target with which the object is associated. A target
            can be, for example, a device, service, or a shared policy
            (Ruleset).
          example: '[7131daad-e813-4b8f-8f42-be1e241e8cdb]'
        displayName:
          type: string
          description: The display name of the target
          example: My ASA
        type:
          type: string
          description: The target type
          example: ASA
          enum:
            - ASA
            - FDM_MANAGED_FTD
            - CDFMC
            - CDFMC_MANAGED_FTD
            - SFCN
            - AWS_VPC
            - ONPREM_FMC
            - MERAKI_MX
            - FDM_RULESET
            - ONPREM_FMC_MANAGED_FTD
            - MCD
            - SDWAN
      description: >-
        Set of targets that contain the object. A target can be, for example, a
        device, service, or a shared policy (Ruleset).
    TargetsRequest:
      type: object
      properties:
        targetsUuids:
          type: array
          description: The list of UIDs of the targets to be deleted.
          example:
            - 7131daad-e813-4b8f-8f42-be1e241e8cdb
          items:
            type: string
            description: The list of UIDs of the targets to be deleted.
            example: '["7131daad-e813-4b8f-8f42-be1e241e8cdb"]'
    UpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the object to update
          example: my-object
        description:
          type: string
          description: The description of the object
          example: My object description
        value:
          $ref: '#/components/schemas/SharedObjectValue'
        tags:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            description: The tags for the object
            example:
              location:
                - London
                - Head-office
            items:
              type: string
              description: The tags for the object
              example: '{"location":["London","Head-office"]}'
          description: The tags for the object
          example:
            location:
              - London
              - Head-office
        labels:
          uniqueItems: true
          type: array
          description: The labels for the object
          example:
            - migration
          items:
            type: string
            description: The labels for the object
            example: '["migration"]'
    ListObjectResponse:
      type: object
      properties:
        count:
          type: integer
          description: The total number of results available.
          format: int64
          example: 100
        limit:
          maximum: 200
          type: integer
          description: The number of results retrieved.
          format: int64
          example: 50
        offset:
          type: integer
          description: >-
            The offset of the results retrieved. The CDO API uses the offset
            field to determine the index of the first result retrieved, and will
            retrieve `limit` results from the offset specified.
          format: int64
          example: 0
        items:
          type: array
          description: The list of objects retrieved.
          items:
            $ref: '#/components/schemas/UnifiedObjectListView'
    UnifiedObjectListView:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        value:
          $ref: '#/components/schemas/SharedObjectValue'
        targetIds:
          uniqueItems: true
          type: array
          items:
            type: string
        overrideIds:
          uniqueItems: true
          type: array
          items:
            type: string
        tags:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
        labels:
          uniqueItems: true
          type: array
          items:
            type: string
        issues:
          $ref: '#/components/schemas/IssuesDto'
      description: The list of objects retrieved.
    DuplicateGroupDto:
      type: object
      properties:
        targetUid:
          type: string
          description: The unique identifier of the target to search in.
          format: uuid
          example: 7131daad-e813-4b8f-8f42-be1e241e8cdb
        unifiedObjectUids:
          uniqueItems: true
          type: array
          description: The set of unique identifiers of the duplicate objects.
          items:
            type: string
            description: The set of unique identifiers of the duplicate objects.
            format: uuid
    IssuesCount:
      type: object
      properties:
        totalObjects:
          type: integer
          description: Total number of objects for the tenant
          format: int64
          example: 4
        unAssociated:
          type: integer
          description: Number of UnAssociated Objects
          format: int64
          example: 1
        unUseds:
          type: integer
          description: Number of unAssigned Objects
          format: int64
          example: 1
        duplicates:
          type: integer
          description: Number of duplicate Objects
          format: int64
          example: 2
  responses:
    http400BadRequest:
      description: Invalid input provided. Check the response for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http401Unauthorised:
      description: Request not authorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
    http403Forbidden:
      description: User does not have sufficient privileges to perform this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http404NotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http405MethodNotAllowed:
      description: Method not allowed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http409Conflict:
      description: Conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
    http422UnprocessableEntity:
      description: Unprocessable entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonApiError'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
x-tagGroups:
  - name: public-api-openapi
    tags:
      - Cloud-delivered FMC
      - Remote Access Monitoring
      - Users
      - Search
      - ASA Access Rules
      - Access Groups
      - MSP
      - Inventory
      - Connectors
      - Command Line Interface
      - Change Requests
      - AI Assistant
      - Tenant Management
      - Transactions
      - Meta
      - Changelogs
      - Audit Logs
  - name: object-service-openapi
    tags:
      - Object Management
