name: build OpenAPI docs generation tool
on:
  push:
    branches: [ master, main ]
    paths:
      - scripts/golang/**
  pull_request:
    branches: [ master, main ]
    paths:
      - scripts/golang/**
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install dependencies
        working-directory: scripts/golang
        run: |
          go mod tidy
          go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Run tests
        working-directory: scripts/golang
        run: |
          ginkgo -r -v

      - name: Build Snapshots using Goreleaser
        if: github.ref != 'refs/heads/main'
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --snapshot
          workdir: 'scripts/golang'

      - name: Archive Snapshots
        if: github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: dist-snapshots
          path: scripts/golang/dist/*.tar.gz

      # when branch is main, release a new version
      - name: Bump version and push tag
        id: tag_version
        if: github.ref == 'refs/heads/main'
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build using Goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release
          workdir: 'scripts/golang'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.ARTIFACTORY_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}